Search.setIndex({"alltitles": {"ABS": [[1351, "abs"]], "ACOS": [[1354, "acos"]], "ACOSD": [[1354, "acosd"]], "ARRAY_AGG": [[1347, "array-agg"]], "ARRAY_CONTAINS": [[1347, "array-contains"]], "ARRAY_GET": [[1347, "array-get"]], "ARRAY_LENGTH": [[1347, "array-length"]], "ARRAY_LOWER": [[1347, "array-lower"]], "ARRAY_MEAN": [[1347, "array-mean"]], "ARRAY_REVERSE": [[1347, "array-reverse"]], "ARRAY_SUM": [[1347, "array-sum"]], "ARRAY_TO_STRING": [[1347, "array-to-string"]], "ARRAY_UNIQUE": [[1347, "array-unique"]], "ARRAY_UPPER": [[1347, "array-upper"]], "ASIN": [[1354, "asin"]], "ASIND": [[1354, "asind"]], "ATAN": [[1354, "atan"]], "ATAN2": [[1354, "atan2"]], "ATAN2D": [[1354, "atan2d"]], "ATAND": [[1354, "atand"]], "AVG": [[1346, "avg"]], "Aggregate": [[1346, null]], "Aggregation": [[185, null], [337, null], [834, null], [941, null]], "Aliases": [[1346, null], [1346, null], [1351, null], [1351, null], [1352, null], [1352, null]], "Array": [[812, null], [1321, null], [1347, null]], "Asserts": [[1360, "asserts"]], "Attributes": [[325, null], [929, null], [1322, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[833, "avro"]], "BIT_AND": [[1348, "bit-and"]], "BIT_COUNT": [[1348, "bit-count"]], "BIT_LENGTH": [[1352, "bit-length"]], "BIT_OR": [[1348, "bit-or"]], "BIT_XOR": [[1348, "bit-xor"]], "Binary": [[813, null], [826, "binary"], [1323, null]], "Boolean": [[814, null], [1324, null]], "CAST": [[1355, "cast"]], "CBRT": [[1351, "cbrt"]], "CEIL": [[1351, "ceil"]], "COALESCE": [[1349, "coalesce"]], "CONCAT": [[1352, "concat"]], "CONCAT_WS": [[1352, "concat-ws"]], "COS": [[1354, "cos"]], "COSD": [[1354, "cosd"]], "COT": [[1354, "cot"]], "COTD": [[1354, "cotd"]], "COUNT": [[1346, "count"]], "CREATE TABLE": [[1359, "create-table"]], "CSV": [[833, "csv"]], "Catalog": [[183, null]], "Categories": [[815, null], [1325, null]], "Clipboard": [[833, "clipboard"]], "Cloud Credentials": [[833, "cloud-credentials"]], "Columns / names": [[817, null]], "Comparison": [[826, "comparison"], [1333, "comparison"]], "Computation": [[326, null], [818, null], [1326, null]], "Conditional": [[1349, null]], "Config": [[184, null]], "Config load, save, state": [[184, "config-load-save-state"]], "Config options": [[184, "config-options"]], "Conjunction": [[826, "conjunction"]], "Conversion": [[831, "conversion"]], "DATE": [[1352, "date"]], "DATE_PART": [[1353, "date-part"]], "DEGREES": [[1354, "degrees"]], "DISTINCT": [[1345, "distinct"]], "DIV": [[1351, "div"]], "DROP TABLES": [[1359, "drop-tables"]], "Data types": [[335, null]], "DataFrame": [[330, null]], "DataType": [[335, "datatype"]], "Database": [[833, "database"]], "Delta Lake": [[833, "delta-lake"]], "Descriptive": [[327, null], [930, null], [1327, null]], "Documentation": [[1357, null], [1357, null], [1357, null]], "ENDS_WITH": [[1352, "ends-with"]], "EXCEPT": [[1358, "except"]], "EXP": [[1351, "exp"]], "EXPLAIN": [[1359, "explain"]], "EXTRACT": [[1353, "extract"]], "Errors": [[336, "errors"]], "Examples": [[1, "examples"], [940, "examples"], [1360, "examples"]], "Excel / ODS": [[833, "excel-ods"]], "Exceptions": [[336, null]], "Export": [[328, null], [1328, null]], "Expression SQL": [[1357, "expression-sql"]], "Expression plugins": [[938, "expression-plugins"]], "Expressions": [[820, null]], "Extending the API": [[1, null]], "FIRST": [[1346, "first"]], "FLOOR": [[1351, "floor"]], "FROM": [[1345, "from"]], "Feather / IPC": [[833, "feather-ipc"]], "Frame SQL": [[1357, "frame-sql"]], "Functions": [[819, null], [831, null], [940, "functions"]], "GPUEngine": [[931, null]], "GREATEST": [[1349, "greatest"]], "GROUP BY": [[1345, "group-by"]], "Global SQL": [[1357, "global-sql"]], "GroupBy": [[329, null], [932, null]], "HAVING": [[1345, "having"]], "IF": [[1349, "if"]], "IFNULL": [[1349, "ifnull"]], "INITCAP": [[1352, "initcap"]], "INTERSECT": [[1358, "intersect"]], "IO plugins": [[938, "io-plugins"]], "Iceberg": [[833, "iceberg"]], "Importing": [[940, "importing"]], "InProcessQuery": [[933, null]], "Index": [[0, null]], "Input/output": [[833, null]], "Introduction": [[1357, "introduction"]], "JOIN": [[1345, "join"]], "JSON": [[833, "json"]], "LAST": [[1346, "last"]], "LEAST": [[1349, "least"]], "LEFT": [[1352, "left"]], "LENGTH": [[1352, "length"]], "LIMIT": [[1345, "limit"]], "LN": [[1351, "ln"]], "LOG": [[1351, "log"]], "LOG10": [[1351, "log10"]], "LOG1P": [[1351, "log1p"]], "LOG2": [[1351, "log2"]], "LOWER": [[1352, "lower"]], "LTRIM": [[1352, "ltrim"]], "LazyFrame": [[934, null]], "List": [[821, null], [1330, null]], "MAX": [[1346, "max"]], "MEDIAN": [[1346, "median"]], "MIN": [[1346, "min"]], "MOD": [[1351, "mod"]], "Manipulation/selection": [[332, null], [824, null], [936, null], [1332, null]], "Math": [[1351, null]], "Meta": [[822, null]], "Metadata": [[937, null]], "Methods": [[1357, "methods"]], "Miscellaneous": [[331, null], [823, null], [831, "miscellaneous"], [935, null], [1331, null]], "Multiple Config instances": [[184, "multiple-config-instances"]], "NORMALIZE": [[1352, "normalize"]], "NULLIF": [[1349, "nullif"]], "Name": [[825, null]], "Nested": [[335, "nested"]], "Numeric": [[335, "numeric"], [826, "numeric"], [1333, "numeric"]], "OCTET_LENGTH": [[1352, "octet-length"]], "OFFSET": [[1345, "offset"]], "ORDER BY": [[1345, "order-by"]], "Operators": [[826, null], [1333, null]], "Other": [[335, "other"]], "PI": [[1351, "pi"]], "POW": [[1351, "pow"]], "Panic": [[336, "panic"]], "Parallelization": [[831, "parallelization"]], "Parametric testing": [[1360, "parametric-testing"]], "Parquet": [[833, "parquet"]], "Plot": [[333, null], [1334, null]], "Plugins": [[938, null]], "Polars strategies": [[1360, "polars-strategies"]], "Profiles": [[1360, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[833, "pyarrow-datasets"]], "Python API": [[1357, null]], "Python API reference": [[832, null]], "QUANTILE_CONT": [[1346, "quantile-cont"]], "QUANTILE_DISC": [[1346, "quantile-disc"]], "Querying": [[1357, "querying"]], "RADIANS": [[1354, "radians"]], "REGEXP_LIKE": [[1352, "regexp-like"]], "REPLACE": [[1352, "replace"]], "REVERSE": [[1352, "reverse"]], "RIGHT": [[1352, "right"]], "ROUND": [[1351, "round"]], "RTRIM": [[1352, "rtrim"]], "Random": [[831, "random"]], "SELECT": [[1345, "select"]], "SHOW TABLES": [[1359, "show-tables"]], "SIGN": [[1351, "sign"]], "SIN": [[1354, "sin"]], "SIND": [[1354, "sind"]], "SQL Clauses": [[1345, null]], "SQL Functions": [[1350, null]], "SQL Interface": [[1356, null]], "SQLContext": [[1357, "sqlcontext"]], "SQRT": [[1351, "sqrt"]], "STARTS_WITH": [[1352, "starts-with"]], "STDDEV": [[1346, "stddev"]], "STRFTIME": [[1353, "strftime"]], "STRPOS": [[1352, "strpos"]], "STRPTIME": [[1352, "strptime"]], "SUBSTR": [[1352, "substr"]], "SUM": [[1346, "sum"]], "Schema": [[939, null]], "Selectors": [[940, null]], "Serialization": [[331, "serialization"], [935, "serialization"]], "Series": [[1329, null]], "Set Operations": [[1358, null]], "Set operations": [[940, "set-operations"]], "Strategy helpers": [[1360, "strategy-helpers"]], "String": [[335, "string"], [827, null], [1335, null], [1352, null]], "StringCache": [[831, "stringcache"]], "Struct": [[828, null], [1336, null]], "Style": [[334, null]], "TAN": [[1354, "tan"]], "TAND": [[1354, "tand"]], "TIMESTAMP": [[1352, "timestamp"]], "TRUNCATE": [[1359, "truncate"]], "TRY_CAST": [[1355, "try-cast"]], "Table Operations": [[1359, null]], "Temporal": [[335, "temporal"], [829, null], [1337, null], [1348, null], [1353, null]], "Testing": [[1360, null]], "Trigonometry": [[1354, null]], "Types": [[1355, null]], "UNION": [[1358, "union"]], "UNION ALL": [[1358, "union-all"]], "UNION BY NAME": [[1358, "union-by-name"]], "UNNEST": [[1347, "unnest"], [1359, "unnest"]], "UPPER": [[1352, "upper"]], "Unity Catalog": [[183, "unity-catalog"]], "Use as a context manager": [[184, "use-as-a-context-manager"]], "Use as a decorator": [[184, "use-as-a-decorator"]], "VARIANCE": [[1346, "variance"]], "WHERE": [[1345, "where"]], "Warnings": [[336, "warnings"]], "Window": [[830, null]], "polars.Catalog": [[2, null]], "polars.Catalog.get_table_info": [[3, null]], "polars.Catalog.list_catalogs": [[4, null]], "polars.Catalog.list_namespaces": [[5, null]], "polars.Catalog.list_tables": [[6, null]], "polars.Catalog.scan_table": [[7, null]], "polars.Config.load": [[8, null]], "polars.Config.load_from_file": [[9, null]], "polars.Config.restore_defaults": [[10, null]], "polars.Config.save": [[11, null]], "polars.Config.save_to_file": [[12, null]], "polars.Config.set_ascii_tables": [[13, null]], "polars.Config.set_auto_structify": [[14, null]], "polars.Config.set_decimal_separator": [[15, null]], "polars.Config.set_float_precision": [[16, null]], "polars.Config.set_fmt_float": [[17, null]], "polars.Config.set_fmt_str_lengths": [[18, null]], "polars.Config.set_fmt_table_cell_list_len": [[19, null]], "polars.Config.set_streaming_chunk_size": [[20, null]], "polars.Config.set_tbl_cell_alignment": [[21, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[22, null]], "polars.Config.set_tbl_cols": [[23, null]], "polars.Config.set_tbl_column_data_type_inline": [[24, null]], "polars.Config.set_tbl_dataframe_shape_below": [[25, null]], "polars.Config.set_tbl_formatting": [[26, null]], "polars.Config.set_tbl_hide_column_data_types": [[27, null]], "polars.Config.set_tbl_hide_column_names": [[28, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[29, null]], "polars.Config.set_tbl_hide_dtype_separator": [[30, null]], "polars.Config.set_tbl_rows": [[31, null]], "polars.Config.set_tbl_width_chars": [[32, null]], "polars.Config.set_thousands_separator": [[33, null]], "polars.Config.set_trim_decimal_zeros": [[34, null]], "polars.Config.set_verbose": [[35, null]], "polars.Config.state": [[36, null]], "polars.CredentialProvider": [[37, null]], "polars.CredentialProviderAWS": [[38, null]], "polars.CredentialProviderAzure": [[39, null]], "polars.CredentialProviderGCP": [[40, null]], "polars.DataFrame.__array__": [[186, null]], "polars.DataFrame.__arrow_c_stream__": [[187, null]], "polars.DataFrame.__dataframe__": [[188, null]], "polars.DataFrame.__getitem__": [[189, null]], "polars.DataFrame.approx_n_unique": [[190, null]], "polars.DataFrame.bottom_k": [[191, null]], "polars.DataFrame.cast": [[192, null]], "polars.DataFrame.clear": [[193, null]], "polars.DataFrame.clone": [[194, null]], "polars.DataFrame.collect_schema": [[195, null]], "polars.DataFrame.columns": [[196, null]], "polars.DataFrame.corr": [[197, null]], "polars.DataFrame.count": [[198, null]], "polars.DataFrame.describe": [[199, null]], "polars.DataFrame.deserialize": [[200, null]], "polars.DataFrame.drop": [[201, null]], "polars.DataFrame.drop_in_place": [[202, null]], "polars.DataFrame.drop_nans": [[203, null]], "polars.DataFrame.drop_nulls": [[204, null]], "polars.DataFrame.dtypes": [[205, null]], "polars.DataFrame.equals": [[206, null]], "polars.DataFrame.estimated_size": [[207, null]], "polars.DataFrame.explode": [[208, null]], "polars.DataFrame.extend": [[209, null]], "polars.DataFrame.fill_nan": [[210, null]], "polars.DataFrame.fill_null": [[211, null]], "polars.DataFrame.filter": [[212, null]], "polars.DataFrame.flags": [[213, null]], "polars.DataFrame.fold": [[214, null]], "polars.DataFrame.gather_every": [[215, null]], "polars.DataFrame.get_column": [[216, null]], "polars.DataFrame.get_column_index": [[217, null]], "polars.DataFrame.get_columns": [[218, null]], "polars.DataFrame.glimpse": [[219, null]], "polars.DataFrame.group_by": [[220, null]], "polars.DataFrame.group_by_dynamic": [[221, null]], "polars.DataFrame.hash_rows": [[222, null]], "polars.DataFrame.head": [[223, null]], "polars.DataFrame.height": [[224, null]], "polars.DataFrame.hstack": [[225, null]], "polars.DataFrame.insert_column": [[226, null]], "polars.DataFrame.interpolate": [[227, null]], "polars.DataFrame.is_duplicated": [[228, null]], "polars.DataFrame.is_empty": [[229, null]], "polars.DataFrame.is_unique": [[230, null]], "polars.DataFrame.item": [[231, null]], "polars.DataFrame.iter_columns": [[232, null]], "polars.DataFrame.iter_rows": [[233, null]], "polars.DataFrame.iter_slices": [[234, null]], "polars.DataFrame.join": [[235, null]], "polars.DataFrame.join_asof": [[236, null]], "polars.DataFrame.join_where": [[237, null]], "polars.DataFrame.lazy": [[238, null]], "polars.DataFrame.limit": [[239, null]], "polars.DataFrame.map_rows": [[240, null]], "polars.DataFrame.max": [[241, null]], "polars.DataFrame.max_horizontal": [[242, null]], "polars.DataFrame.mean": [[243, null]], "polars.DataFrame.mean_horizontal": [[244, null]], "polars.DataFrame.median": [[245, null]], "polars.DataFrame.melt": [[246, null]], "polars.DataFrame.merge_sorted": [[247, null]], "polars.DataFrame.min": [[248, null]], "polars.DataFrame.min_horizontal": [[249, null]], "polars.DataFrame.n_chunks": [[250, null]], "polars.DataFrame.n_unique": [[251, null]], "polars.DataFrame.null_count": [[252, null]], "polars.DataFrame.partition_by": [[253, null]], "polars.DataFrame.pipe": [[254, null]], "polars.DataFrame.pivot": [[255, null]], "polars.DataFrame.product": [[256, null]], "polars.DataFrame.quantile": [[257, null]], "polars.DataFrame.rechunk": [[258, null]], "polars.DataFrame.rename": [[259, null]], "polars.DataFrame.replace_column": [[260, null]], "polars.DataFrame.reverse": [[261, null]], "polars.DataFrame.rolling": [[262, null]], "polars.DataFrame.row": [[263, null]], "polars.DataFrame.rows": [[264, null]], "polars.DataFrame.rows_by_key": [[265, null]], "polars.DataFrame.sample": [[266, null]], "polars.DataFrame.schema": [[267, null]], "polars.DataFrame.select": [[268, null]], "polars.DataFrame.select_seq": [[269, null]], "polars.DataFrame.serialize": [[270, null]], "polars.DataFrame.set_sorted": [[271, null]], "polars.DataFrame.shape": [[272, null]], "polars.DataFrame.shift": [[273, null]], "polars.DataFrame.shrink_to_fit": [[274, null]], "polars.DataFrame.slice": [[275, null]], "polars.DataFrame.sort": [[276, null]], "polars.DataFrame.sql": [[277, null]], "polars.DataFrame.std": [[278, null]], "polars.DataFrame.sum": [[279, null]], "polars.DataFrame.sum_horizontal": [[280, null]], "polars.DataFrame.tail": [[281, null]], "polars.DataFrame.to_arrow": [[282, null]], "polars.DataFrame.to_dict": [[283, null]], "polars.DataFrame.to_dicts": [[284, null]], "polars.DataFrame.to_dummies": [[285, null]], "polars.DataFrame.to_init_repr": [[286, null]], "polars.DataFrame.to_jax": [[287, null]], "polars.DataFrame.to_numpy": [[288, null]], "polars.DataFrame.to_pandas": [[289, null]], "polars.DataFrame.to_series": [[290, null]], "polars.DataFrame.to_struct": [[291, null]], "polars.DataFrame.to_torch": [[292, null]], "polars.DataFrame.top_k": [[293, null]], "polars.DataFrame.transpose": [[294, null]], "polars.DataFrame.unique": [[295, null]], "polars.DataFrame.unnest": [[296, null]], "polars.DataFrame.unpivot": [[297, null]], "polars.DataFrame.unstack": [[298, null]], "polars.DataFrame.update": [[299, null]], "polars.DataFrame.upsample": [[300, null]], "polars.DataFrame.var": [[301, null]], "polars.DataFrame.vstack": [[302, null]], "polars.DataFrame.width": [[303, null]], "polars.DataFrame.with_columns": [[304, null]], "polars.DataFrame.with_columns_seq": [[305, null]], "polars.DataFrame.with_row_count": [[306, null]], "polars.DataFrame.with_row_index": [[307, null]], "polars.DataFrame.write_avro": [[41, null]], "polars.DataFrame.write_clipboard": [[42, null]], "polars.DataFrame.write_csv": [[43, null]], "polars.DataFrame.write_database": [[44, null]], "polars.DataFrame.write_delta": [[45, null]], "polars.DataFrame.write_excel": [[46, null]], "polars.DataFrame.write_ipc": [[47, null]], "polars.DataFrame.write_ipc_stream": [[48, null]], "polars.DataFrame.write_json": [[49, null]], "polars.DataFrame.write_ndjson": [[50, null]], "polars.DataFrame.write_parquet": [[51, null]], "polars.Expr.abs": [[338, null]], "polars.Expr.add": [[339, null]], "polars.Expr.agg_groups": [[340, null]], "polars.Expr.alias": [[341, null]], "polars.Expr.all": [[342, null]], "polars.Expr.and_": [[343, null]], "polars.Expr.any": [[344, null]], "polars.Expr.append": [[345, null]], "polars.Expr.approx_n_unique": [[346, null]], "polars.Expr.arccos": [[347, null]], "polars.Expr.arccosh": [[348, null]], "polars.Expr.arcsin": [[349, null]], "polars.Expr.arcsinh": [[350, null]], "polars.Expr.arctan": [[351, null]], "polars.Expr.arctanh": [[352, null]], "polars.Expr.arg_max": [[353, null]], "polars.Expr.arg_min": [[354, null]], "polars.Expr.arg_sort": [[355, null]], "polars.Expr.arg_true": [[356, null]], "polars.Expr.arg_unique": [[357, null]], "polars.Expr.arr.all": [[358, null]], "polars.Expr.arr.any": [[359, null]], "polars.Expr.arr.arg_max": [[360, null]], "polars.Expr.arr.arg_min": [[361, null]], "polars.Expr.arr.contains": [[362, null]], "polars.Expr.arr.count_matches": [[363, null]], "polars.Expr.arr.explode": [[364, null]], "polars.Expr.arr.first": [[365, null]], "polars.Expr.arr.get": [[366, null]], "polars.Expr.arr.join": [[367, null]], "polars.Expr.arr.last": [[368, null]], "polars.Expr.arr.max": [[369, null]], "polars.Expr.arr.median": [[370, null]], "polars.Expr.arr.min": [[371, null]], "polars.Expr.arr.n_unique": [[372, null]], "polars.Expr.arr.reverse": [[373, null]], "polars.Expr.arr.shift": [[374, null]], "polars.Expr.arr.sort": [[375, null]], "polars.Expr.arr.std": [[376, null]], "polars.Expr.arr.sum": [[377, null]], "polars.Expr.arr.to_list": [[378, null]], "polars.Expr.arr.to_struct": [[379, null]], "polars.Expr.arr.unique": [[380, null]], "polars.Expr.arr.var": [[381, null]], "polars.Expr.backward_fill": [[382, null]], "polars.Expr.bin.contains": [[383, null]], "polars.Expr.bin.decode": [[384, null]], "polars.Expr.bin.encode": [[385, null]], "polars.Expr.bin.ends_with": [[386, null]], "polars.Expr.bin.reinterpret": [[387, null]], "polars.Expr.bin.size": [[388, null]], "polars.Expr.bin.starts_with": [[389, null]], "polars.Expr.bitwise_and": [[390, null]], "polars.Expr.bitwise_count_ones": [[391, null]], "polars.Expr.bitwise_count_zeros": [[392, null]], "polars.Expr.bitwise_leading_ones": [[393, null]], "polars.Expr.bitwise_leading_zeros": [[394, null]], "polars.Expr.bitwise_or": [[395, null]], "polars.Expr.bitwise_trailing_ones": [[396, null]], "polars.Expr.bitwise_trailing_zeros": [[397, null]], "polars.Expr.bitwise_xor": [[398, null]], "polars.Expr.bottom_k": [[399, null]], "polars.Expr.bottom_k_by": [[400, null]], "polars.Expr.cast": [[401, null]], "polars.Expr.cat.ends_with": [[402, null]], "polars.Expr.cat.get_categories": [[403, null]], "polars.Expr.cat.len_bytes": [[404, null]], "polars.Expr.cat.len_chars": [[405, null]], "polars.Expr.cat.starts_with": [[406, null]], "polars.Expr.cbrt": [[407, null]], "polars.Expr.ceil": [[408, null]], "polars.Expr.clip": [[409, null]], "polars.Expr.cos": [[410, null]], "polars.Expr.cosh": [[411, null]], "polars.Expr.cot": [[412, null]], "polars.Expr.count": [[413, null]], "polars.Expr.cum_count": [[414, null]], "polars.Expr.cum_max": [[415, null]], "polars.Expr.cum_min": [[416, null]], "polars.Expr.cum_prod": [[417, null]], "polars.Expr.cum_sum": [[418, null]], "polars.Expr.cumulative_eval": [[419, null]], "polars.Expr.cut": [[420, null]], "polars.Expr.degrees": [[421, null]], "polars.Expr.deserialize": [[422, null]], "polars.Expr.diff": [[423, null]], "polars.Expr.dot": [[424, null]], "polars.Expr.drop_nans": [[425, null]], "polars.Expr.drop_nulls": [[426, null]], "polars.Expr.dt.add_business_days": [[427, null]], "polars.Expr.dt.base_utc_offset": [[428, null]], "polars.Expr.dt.cast_time_unit": [[429, null]], "polars.Expr.dt.century": [[430, null]], "polars.Expr.dt.combine": [[431, null]], "polars.Expr.dt.convert_time_zone": [[432, null]], "polars.Expr.dt.date": [[433, null]], "polars.Expr.dt.datetime": [[434, null]], "polars.Expr.dt.day": [[435, null]], "polars.Expr.dt.dst_offset": [[436, null]], "polars.Expr.dt.epoch": [[437, null]], "polars.Expr.dt.hour": [[438, null]], "polars.Expr.dt.is_leap_year": [[439, null]], "polars.Expr.dt.iso_year": [[440, null]], "polars.Expr.dt.microsecond": [[441, null]], "polars.Expr.dt.millennium": [[442, null]], "polars.Expr.dt.millisecond": [[443, null]], "polars.Expr.dt.minute": [[444, null]], "polars.Expr.dt.month": [[445, null]], "polars.Expr.dt.month_end": [[446, null]], "polars.Expr.dt.month_start": [[447, null]], "polars.Expr.dt.nanosecond": [[448, null]], "polars.Expr.dt.offset_by": [[449, null]], "polars.Expr.dt.ordinal_day": [[450, null]], "polars.Expr.dt.quarter": [[451, null]], "polars.Expr.dt.replace": [[452, null]], "polars.Expr.dt.replace_time_zone": [[453, null]], "polars.Expr.dt.round": [[454, null]], "polars.Expr.dt.second": [[455, null]], "polars.Expr.dt.strftime": [[456, null]], "polars.Expr.dt.time": [[457, null]], "polars.Expr.dt.timestamp": [[458, null]], "polars.Expr.dt.to_string": [[459, null]], "polars.Expr.dt.total_days": [[460, null]], "polars.Expr.dt.total_hours": [[461, null]], "polars.Expr.dt.total_microseconds": [[462, null]], "polars.Expr.dt.total_milliseconds": [[463, null]], "polars.Expr.dt.total_minutes": [[464, null]], "polars.Expr.dt.total_nanoseconds": [[465, null]], "polars.Expr.dt.total_seconds": [[466, null]], "polars.Expr.dt.truncate": [[467, null]], "polars.Expr.dt.week": [[468, null]], "polars.Expr.dt.weekday": [[469, null]], "polars.Expr.dt.with_time_unit": [[470, null]], "polars.Expr.dt.year": [[471, null]], "polars.Expr.entropy": [[472, null]], "polars.Expr.eq": [[473, null]], "polars.Expr.eq_missing": [[474, null]], "polars.Expr.ewm_mean": [[475, null]], "polars.Expr.ewm_mean_by": [[476, null]], "polars.Expr.ewm_std": [[477, null]], "polars.Expr.ewm_var": [[478, null]], "polars.Expr.exclude": [[479, null]], "polars.Expr.exp": [[480, null]], "polars.Expr.explode": [[481, null]], "polars.Expr.extend_constant": [[482, null]], "polars.Expr.fill_nan": [[483, null]], "polars.Expr.fill_null": [[484, null]], "polars.Expr.filter": [[485, null]], "polars.Expr.first": [[486, null]], "polars.Expr.flatten": [[487, null]], "polars.Expr.floor": [[488, null]], "polars.Expr.floordiv": [[489, null]], "polars.Expr.forward_fill": [[490, null]], "polars.Expr.from_json": [[491, null]], "polars.Expr.gather": [[492, null]], "polars.Expr.gather_every": [[493, null]], "polars.Expr.ge": [[494, null]], "polars.Expr.get": [[495, null]], "polars.Expr.gt": [[496, null]], "polars.Expr.has_nulls": [[497, null]], "polars.Expr.hash": [[498, null]], "polars.Expr.head": [[499, null]], "polars.Expr.hist": [[500, null]], "polars.Expr.implode": [[501, null]], "polars.Expr.index_of": [[502, null]], "polars.Expr.inspect": [[503, null]], "polars.Expr.interpolate": [[504, null]], "polars.Expr.interpolate_by": [[505, null]], "polars.Expr.is_between": [[506, null]], "polars.Expr.is_duplicated": [[507, null]], "polars.Expr.is_finite": [[508, null]], "polars.Expr.is_first_distinct": [[509, null]], "polars.Expr.is_in": [[510, null]], "polars.Expr.is_infinite": [[511, null]], "polars.Expr.is_last_distinct": [[512, null]], "polars.Expr.is_nan": [[513, null]], "polars.Expr.is_not_nan": [[514, null]], "polars.Expr.is_not_null": [[515, null]], "polars.Expr.is_null": [[516, null]], "polars.Expr.is_unique": [[517, null]], "polars.Expr.kurtosis": [[518, null]], "polars.Expr.last": [[519, null]], "polars.Expr.le": [[520, null]], "polars.Expr.len": [[521, null]], "polars.Expr.limit": [[522, null]], "polars.Expr.list.all": [[523, null]], "polars.Expr.list.any": [[524, null]], "polars.Expr.list.arg_max": [[525, null]], "polars.Expr.list.arg_min": [[526, null]], "polars.Expr.list.concat": [[527, null]], "polars.Expr.list.contains": [[528, null]], "polars.Expr.list.count_matches": [[529, null]], "polars.Expr.list.diff": [[530, null]], "polars.Expr.list.drop_nulls": [[531, null]], "polars.Expr.list.eval": [[532, null]], "polars.Expr.list.explode": [[533, null]], "polars.Expr.list.first": [[534, null]], "polars.Expr.list.gather": [[535, null]], "polars.Expr.list.gather_every": [[536, null]], "polars.Expr.list.get": [[537, null]], "polars.Expr.list.head": [[538, null]], "polars.Expr.list.join": [[539, null]], "polars.Expr.list.last": [[540, null]], "polars.Expr.list.len": [[541, null]], "polars.Expr.list.max": [[542, null]], "polars.Expr.list.mean": [[543, null]], "polars.Expr.list.median": [[544, null]], "polars.Expr.list.min": [[545, null]], "polars.Expr.list.n_unique": [[546, null]], "polars.Expr.list.reverse": [[547, null]], "polars.Expr.list.sample": [[548, null]], "polars.Expr.list.set_difference": [[549, null]], "polars.Expr.list.set_intersection": [[550, null]], "polars.Expr.list.set_symmetric_difference": [[551, null]], "polars.Expr.list.set_union": [[552, null]], "polars.Expr.list.shift": [[553, null]], "polars.Expr.list.slice": [[554, null]], "polars.Expr.list.sort": [[555, null]], "polars.Expr.list.std": [[556, null]], "polars.Expr.list.sum": [[557, null]], "polars.Expr.list.tail": [[558, null]], "polars.Expr.list.to_array": [[559, null]], "polars.Expr.list.to_struct": [[560, null]], "polars.Expr.list.unique": [[561, null]], "polars.Expr.list.var": [[562, null]], "polars.Expr.log": [[563, null]], "polars.Expr.log10": [[564, null]], "polars.Expr.log1p": [[565, null]], "polars.Expr.lower_bound": [[566, null]], "polars.Expr.lt": [[567, null]], "polars.Expr.map_batches": [[568, null]], "polars.Expr.map_elements": [[569, null]], "polars.Expr.max": [[570, null]], "polars.Expr.mean": [[571, null]], "polars.Expr.median": [[572, null]], "polars.Expr.meta.eq": [[573, null]], "polars.Expr.meta.has_multiple_outputs": [[574, null]], "polars.Expr.meta.is_column": [[575, null]], "polars.Expr.meta.is_column_selection": [[576, null]], "polars.Expr.meta.is_literal": [[577, null]], "polars.Expr.meta.is_regex_projection": [[578, null]], "polars.Expr.meta.ne": [[579, null]], "polars.Expr.meta.output_name": [[580, null]], "polars.Expr.meta.pop": [[581, null]], "polars.Expr.meta.root_names": [[582, null]], "polars.Expr.meta.serialize": [[583, null]], "polars.Expr.meta.show_graph": [[584, null]], "polars.Expr.meta.tree_format": [[585, null]], "polars.Expr.meta.undo_aliases": [[586, null]], "polars.Expr.meta.write_json": [[587, null]], "polars.Expr.min": [[588, null]], "polars.Expr.mod": [[589, null]], "polars.Expr.mode": [[590, null]], "polars.Expr.mul": [[591, null]], "polars.Expr.n_unique": [[592, null]], "polars.Expr.name.keep": [[593, null]], "polars.Expr.name.map": [[594, null]], "polars.Expr.name.map_fields": [[595, null]], "polars.Expr.name.prefix": [[596, null]], "polars.Expr.name.prefix_fields": [[597, null]], "polars.Expr.name.suffix": [[598, null]], "polars.Expr.name.suffix_fields": [[599, null]], "polars.Expr.name.to_lowercase": [[600, null]], "polars.Expr.name.to_uppercase": [[601, null]], "polars.Expr.nan_max": [[602, null]], "polars.Expr.nan_min": [[603, null]], "polars.Expr.ne": [[604, null]], "polars.Expr.ne_missing": [[605, null]], "polars.Expr.neg": [[606, null]], "polars.Expr.not_": [[607, null]], "polars.Expr.null_count": [[608, null]], "polars.Expr.or_": [[609, null]], "polars.Expr.over": [[610, null]], "polars.Expr.pct_change": [[611, null]], "polars.Expr.peak_max": [[612, null]], "polars.Expr.peak_min": [[613, null]], "polars.Expr.pipe": [[614, null]], "polars.Expr.pow": [[615, null]], "polars.Expr.product": [[616, null]], "polars.Expr.qcut": [[617, null]], "polars.Expr.quantile": [[618, null]], "polars.Expr.radians": [[619, null]], "polars.Expr.rank": [[620, null]], "polars.Expr.rechunk": [[621, null]], "polars.Expr.reinterpret": [[622, null]], "polars.Expr.repeat_by": [[623, null]], "polars.Expr.replace": [[624, null]], "polars.Expr.replace_strict": [[625, null]], "polars.Expr.reshape": [[626, null]], "polars.Expr.reverse": [[627, null]], "polars.Expr.rle": [[628, null]], "polars.Expr.rle_id": [[629, null]], "polars.Expr.rolling": [[630, null]], "polars.Expr.rolling_map": [[631, null]], "polars.Expr.rolling_max": [[632, null]], "polars.Expr.rolling_max_by": [[633, null]], "polars.Expr.rolling_mean": [[634, null]], "polars.Expr.rolling_mean_by": [[635, null]], "polars.Expr.rolling_median": [[636, null]], "polars.Expr.rolling_median_by": [[637, null]], "polars.Expr.rolling_min": [[638, null]], "polars.Expr.rolling_min_by": [[639, null]], "polars.Expr.rolling_quantile": [[640, null]], "polars.Expr.rolling_quantile_by": [[641, null]], "polars.Expr.rolling_skew": [[642, null]], "polars.Expr.rolling_std": [[643, null]], "polars.Expr.rolling_std_by": [[644, null]], "polars.Expr.rolling_sum": [[645, null]], "polars.Expr.rolling_sum_by": [[646, null]], "polars.Expr.rolling_var": [[647, null]], "polars.Expr.rolling_var_by": [[648, null]], "polars.Expr.round": [[649, null]], "polars.Expr.round_sig_figs": [[650, null]], "polars.Expr.sample": [[651, null]], "polars.Expr.search_sorted": [[652, null]], "polars.Expr.set_sorted": [[653, null]], "polars.Expr.shift": [[654, null]], "polars.Expr.shrink_dtype": [[655, null]], "polars.Expr.shuffle": [[656, null]], "polars.Expr.sign": [[657, null]], "polars.Expr.sin": [[658, null]], "polars.Expr.sinh": [[659, null]], "polars.Expr.skew": [[660, null]], "polars.Expr.slice": [[661, null]], "polars.Expr.sort": [[662, null]], "polars.Expr.sort_by": [[663, null]], "polars.Expr.sqrt": [[664, null]], "polars.Expr.std": [[665, null]], "polars.Expr.str.concat": [[666, null]], "polars.Expr.str.contains": [[667, null]], "polars.Expr.str.contains_any": [[668, null]], "polars.Expr.str.count_matches": [[669, null]], "polars.Expr.str.decode": [[670, null]], "polars.Expr.str.encode": [[671, null]], "polars.Expr.str.ends_with": [[672, null]], "polars.Expr.str.escape_regex": [[673, null]], "polars.Expr.str.explode": [[674, null]], "polars.Expr.str.extract": [[675, null]], "polars.Expr.str.extract_all": [[676, null]], "polars.Expr.str.extract_groups": [[677, null]], "polars.Expr.str.extract_many": [[678, null]], "polars.Expr.str.find": [[679, null]], "polars.Expr.str.find_many": [[680, null]], "polars.Expr.str.head": [[681, null]], "polars.Expr.str.join": [[682, null]], "polars.Expr.str.json_decode": [[683, null]], "polars.Expr.str.json_path_match": [[684, null]], "polars.Expr.str.len_bytes": [[685, null]], "polars.Expr.str.len_chars": [[686, null]], "polars.Expr.str.normalize": [[687, null]], "polars.Expr.str.pad_end": [[688, null]], "polars.Expr.str.pad_start": [[689, null]], "polars.Expr.str.replace": [[690, null]], "polars.Expr.str.replace_all": [[691, null]], "polars.Expr.str.replace_many": [[692, null]], "polars.Expr.str.reverse": [[693, null]], "polars.Expr.str.slice": [[694, null]], "polars.Expr.str.split": [[695, null]], "polars.Expr.str.split_exact": [[696, null]], "polars.Expr.str.splitn": [[697, null]], "polars.Expr.str.starts_with": [[698, null]], "polars.Expr.str.strip_chars": [[699, null]], "polars.Expr.str.strip_chars_end": [[700, null]], "polars.Expr.str.strip_chars_start": [[701, null]], "polars.Expr.str.strip_prefix": [[702, null]], "polars.Expr.str.strip_suffix": [[703, null]], "polars.Expr.str.strptime": [[704, null]], "polars.Expr.str.tail": [[705, null]], "polars.Expr.str.to_date": [[706, null]], "polars.Expr.str.to_datetime": [[707, null]], "polars.Expr.str.to_decimal": [[708, null]], "polars.Expr.str.to_integer": [[709, null]], "polars.Expr.str.to_lowercase": [[710, null]], "polars.Expr.str.to_time": [[711, null]], "polars.Expr.str.to_titlecase": [[712, null]], "polars.Expr.str.to_uppercase": [[713, null]], "polars.Expr.str.zfill": [[714, null]], "polars.Expr.struct.field": [[715, null]], "polars.Expr.struct.json_encode": [[716, null]], "polars.Expr.struct.rename_fields": [[717, null]], "polars.Expr.struct.unnest": [[718, null]], "polars.Expr.struct.with_fields": [[719, null]], "polars.Expr.sub": [[720, null]], "polars.Expr.sum": [[721, null]], "polars.Expr.tail": [[722, null]], "polars.Expr.tan": [[723, null]], "polars.Expr.tanh": [[724, null]], "polars.Expr.to_physical": [[725, null]], "polars.Expr.top_k": [[726, null]], "polars.Expr.top_k_by": [[727, null]], "polars.Expr.truediv": [[728, null]], "polars.Expr.unique": [[729, null]], "polars.Expr.unique_counts": [[730, null]], "polars.Expr.upper_bound": [[731, null]], "polars.Expr.value_counts": [[732, null]], "polars.Expr.var": [[733, null]], "polars.Expr.where": [[734, null]], "polars.Expr.xor": [[735, null]], "polars.LazyFrame.approx_n_unique": [[835, null]], "polars.LazyFrame.bottom_k": [[836, null]], "polars.LazyFrame.cache": [[837, null]], "polars.LazyFrame.cast": [[838, null]], "polars.LazyFrame.clear": [[839, null]], "polars.LazyFrame.clone": [[840, null]], "polars.LazyFrame.collect": [[841, null]], "polars.LazyFrame.collect_async": [[842, null]], "polars.LazyFrame.collect_schema": [[843, null]], "polars.LazyFrame.columns": [[844, null]], "polars.LazyFrame.count": [[845, null]], "polars.LazyFrame.describe": [[846, null]], "polars.LazyFrame.deserialize": [[847, null]], "polars.LazyFrame.drop": [[848, null]], "polars.LazyFrame.drop_nans": [[849, null]], "polars.LazyFrame.drop_nulls": [[850, null]], "polars.LazyFrame.dtypes": [[851, null]], "polars.LazyFrame.explain": [[852, null]], "polars.LazyFrame.explode": [[853, null]], "polars.LazyFrame.fill_nan": [[854, null]], "polars.LazyFrame.fill_null": [[855, null]], "polars.LazyFrame.filter": [[856, null]], "polars.LazyFrame.first": [[857, null]], "polars.LazyFrame.gather_every": [[858, null]], "polars.LazyFrame.group_by": [[859, null]], "polars.LazyFrame.group_by_dynamic": [[860, null]], "polars.LazyFrame.head": [[861, null]], "polars.LazyFrame.inspect": [[862, null]], "polars.LazyFrame.interpolate": [[863, null]], "polars.LazyFrame.join": [[864, null]], "polars.LazyFrame.join_asof": [[865, null]], "polars.LazyFrame.join_where": [[866, null]], "polars.LazyFrame.last": [[867, null]], "polars.LazyFrame.lazy": [[868, null]], "polars.LazyFrame.limit": [[869, null]], "polars.LazyFrame.map_batches": [[870, null]], "polars.LazyFrame.max": [[871, null]], "polars.LazyFrame.mean": [[872, null]], "polars.LazyFrame.median": [[873, null]], "polars.LazyFrame.melt": [[874, null]], "polars.LazyFrame.merge_sorted": [[875, null]], "polars.LazyFrame.min": [[876, null]], "polars.LazyFrame.null_count": [[877, null]], "polars.LazyFrame.pipe": [[878, null]], "polars.LazyFrame.profile": [[879, null]], "polars.LazyFrame.quantile": [[880, null]], "polars.LazyFrame.rename": [[881, null]], "polars.LazyFrame.reverse": [[882, null]], "polars.LazyFrame.rolling": [[883, null]], "polars.LazyFrame.schema": [[884, null]], "polars.LazyFrame.select": [[885, null]], "polars.LazyFrame.select_seq": [[886, null]], "polars.LazyFrame.serialize": [[887, null]], "polars.LazyFrame.set_sorted": [[888, null]], "polars.LazyFrame.shift": [[889, null]], "polars.LazyFrame.show_graph": [[890, null]], "polars.LazyFrame.sink_csv": [[52, null]], "polars.LazyFrame.sink_ipc": [[53, null]], "polars.LazyFrame.sink_ndjson": [[54, null]], "polars.LazyFrame.sink_parquet": [[55, null]], "polars.LazyFrame.slice": [[891, null]], "polars.LazyFrame.sort": [[892, null]], "polars.LazyFrame.sql": [[893, null]], "polars.LazyFrame.std": [[894, null]], "polars.LazyFrame.sum": [[895, null]], "polars.LazyFrame.tail": [[896, null]], "polars.LazyFrame.top_k": [[897, null]], "polars.LazyFrame.unique": [[898, null]], "polars.LazyFrame.unnest": [[899, null]], "polars.LazyFrame.unpivot": [[900, null]], "polars.LazyFrame.update": [[901, null]], "polars.LazyFrame.var": [[902, null]], "polars.LazyFrame.width": [[903, null]], "polars.LazyFrame.with_columns": [[904, null]], "polars.LazyFrame.with_columns_seq": [[905, null]], "polars.LazyFrame.with_context": [[906, null]], "polars.LazyFrame.with_row_count": [[907, null]], "polars.LazyFrame.with_row_index": [[908, null]], "polars.SQLContext.execute": [[1338, null]], "polars.SQLContext.execute_global": [[1339, null]], "polars.SQLContext.register": [[1340, null]], "polars.SQLContext.register_globals": [[1341, null]], "polars.SQLContext.register_many": [[1342, null]], "polars.SQLContext.tables": [[1343, null]], "polars.SQLContext.unregister": [[1344, null]], "polars.Series.__array__": [[942, null]], "polars.Series.__arrow_c_stream__": [[943, null]], "polars.Series.__getitem__": [[944, null]], "polars.Series.abs": [[945, null]], "polars.Series.alias": [[946, null]], "polars.Series.all": [[947, null]], "polars.Series.any": [[948, null]], "polars.Series.append": [[949, null]], "polars.Series.approx_n_unique": [[950, null]], "polars.Series.arccos": [[951, null]], "polars.Series.arccosh": [[952, null]], "polars.Series.arcsin": [[953, null]], "polars.Series.arcsinh": [[954, null]], "polars.Series.arctan": [[955, null]], "polars.Series.arctanh": [[956, null]], "polars.Series.arg_max": [[957, null]], "polars.Series.arg_min": [[958, null]], "polars.Series.arg_sort": [[959, null]], "polars.Series.arg_true": [[960, null]], "polars.Series.arg_unique": [[961, null]], "polars.Series.arr.all": [[962, null]], "polars.Series.arr.any": [[963, null]], "polars.Series.arr.arg_max": [[964, null]], "polars.Series.arr.arg_min": [[965, null]], "polars.Series.arr.contains": [[966, null]], "polars.Series.arr.count_matches": [[967, null]], "polars.Series.arr.explode": [[968, null]], "polars.Series.arr.first": [[969, null]], "polars.Series.arr.get": [[970, null]], "polars.Series.arr.join": [[971, null]], "polars.Series.arr.last": [[972, null]], "polars.Series.arr.max": [[973, null]], "polars.Series.arr.median": [[974, null]], "polars.Series.arr.min": [[975, null]], "polars.Series.arr.n_unique": [[976, null]], "polars.Series.arr.reverse": [[977, null]], "polars.Series.arr.shift": [[978, null]], "polars.Series.arr.sort": [[979, null]], "polars.Series.arr.std": [[980, null]], "polars.Series.arr.sum": [[981, null]], "polars.Series.arr.to_list": [[982, null]], "polars.Series.arr.to_struct": [[983, null]], "polars.Series.arr.unique": [[984, null]], "polars.Series.arr.var": [[985, null]], "polars.Series.bin.contains": [[986, null]], "polars.Series.bin.decode": [[987, null]], "polars.Series.bin.encode": [[988, null]], "polars.Series.bin.ends_with": [[989, null]], "polars.Series.bin.reinterpret": [[990, null]], "polars.Series.bin.size": [[991, null]], "polars.Series.bin.starts_with": [[992, null]], "polars.Series.bitwise_and": [[993, null]], "polars.Series.bitwise_count_ones": [[994, null]], "polars.Series.bitwise_count_zeros": [[995, null]], "polars.Series.bitwise_leading_ones": [[996, null]], "polars.Series.bitwise_leading_zeros": [[997, null]], "polars.Series.bitwise_or": [[998, null]], "polars.Series.bitwise_trailing_ones": [[999, null]], "polars.Series.bitwise_trailing_zeros": [[1000, null]], "polars.Series.bitwise_xor": [[1001, null]], "polars.Series.bottom_k": [[1002, null]], "polars.Series.cast": [[1003, null]], "polars.Series.cat.ends_with": [[1004, null]], "polars.Series.cat.get_categories": [[1005, null]], "polars.Series.cat.is_local": [[1006, null]], "polars.Series.cat.len_bytes": [[1007, null]], "polars.Series.cat.len_chars": [[1008, null]], "polars.Series.cat.starts_with": [[1009, null]], "polars.Series.cat.to_local": [[1010, null]], "polars.Series.cat.uses_lexical_ordering": [[1011, null]], "polars.Series.cbrt": [[1012, null]], "polars.Series.ceil": [[1013, null]], "polars.Series.chunk_lengths": [[1014, null]], "polars.Series.clear": [[1015, null]], "polars.Series.clip": [[1016, null]], "polars.Series.clone": [[1017, null]], "polars.Series.cos": [[1018, null]], "polars.Series.cosh": [[1019, null]], "polars.Series.cot": [[1020, null]], "polars.Series.count": [[1021, null]], "polars.Series.cum_count": [[1022, null]], "polars.Series.cum_max": [[1023, null]], "polars.Series.cum_min": [[1024, null]], "polars.Series.cum_prod": [[1025, null]], "polars.Series.cum_sum": [[1026, null]], "polars.Series.cumulative_eval": [[1027, null]], "polars.Series.cut": [[1028, null]], "polars.Series.describe": [[1029, null]], "polars.Series.diff": [[1030, null]], "polars.Series.dot": [[1031, null]], "polars.Series.drop_nans": [[1032, null]], "polars.Series.drop_nulls": [[1033, null]], "polars.Series.dt.add_business_days": [[1034, null]], "polars.Series.dt.base_utc_offset": [[1035, null]], "polars.Series.dt.cast_time_unit": [[1036, null]], "polars.Series.dt.century": [[1037, null]], "polars.Series.dt.combine": [[1038, null]], "polars.Series.dt.convert_time_zone": [[1039, null]], "polars.Series.dt.date": [[1040, null]], "polars.Series.dt.datetime": [[1041, null]], "polars.Series.dt.day": [[1042, null]], "polars.Series.dt.dst_offset": [[1043, null]], "polars.Series.dt.epoch": [[1044, null]], "polars.Series.dt.hour": [[1045, null]], "polars.Series.dt.is_leap_year": [[1046, null]], "polars.Series.dt.iso_year": [[1047, null]], "polars.Series.dt.max": [[1048, null]], "polars.Series.dt.mean": [[1049, null]], "polars.Series.dt.median": [[1050, null]], "polars.Series.dt.microsecond": [[1051, null]], "polars.Series.dt.millennium": [[1052, null]], "polars.Series.dt.millisecond": [[1053, null]], "polars.Series.dt.min": [[1054, null]], "polars.Series.dt.minute": [[1055, null]], "polars.Series.dt.month": [[1056, null]], "polars.Series.dt.month_end": [[1057, null]], "polars.Series.dt.month_start": [[1058, null]], "polars.Series.dt.nanosecond": [[1059, null]], "polars.Series.dt.offset_by": [[1060, null]], "polars.Series.dt.ordinal_day": [[1061, null]], "polars.Series.dt.quarter": [[1062, null]], "polars.Series.dt.replace": [[1063, null]], "polars.Series.dt.replace_time_zone": [[1064, null]], "polars.Series.dt.round": [[1065, null]], "polars.Series.dt.second": [[1066, null]], "polars.Series.dt.strftime": [[1067, null]], "polars.Series.dt.time": [[1068, null]], "polars.Series.dt.timestamp": [[1069, null]], "polars.Series.dt.to_string": [[1070, null]], "polars.Series.dt.total_days": [[1071, null]], "polars.Series.dt.total_hours": [[1072, null]], "polars.Series.dt.total_microseconds": [[1073, null]], "polars.Series.dt.total_milliseconds": [[1074, null]], "polars.Series.dt.total_minutes": [[1075, null]], "polars.Series.dt.total_nanoseconds": [[1076, null]], "polars.Series.dt.total_seconds": [[1077, null]], "polars.Series.dt.truncate": [[1078, null]], "polars.Series.dt.week": [[1079, null]], "polars.Series.dt.weekday": [[1080, null]], "polars.Series.dt.with_time_unit": [[1081, null]], "polars.Series.dt.year": [[1082, null]], "polars.Series.dtype": [[1083, null]], "polars.Series.entropy": [[1084, null]], "polars.Series.eq": [[1085, null]], "polars.Series.eq_missing": [[1086, null]], "polars.Series.equals": [[1087, null]], "polars.Series.estimated_size": [[1088, null]], "polars.Series.ewm_mean": [[1089, null]], "polars.Series.ewm_mean_by": [[1090, null]], "polars.Series.ewm_std": [[1091, null]], "polars.Series.ewm_var": [[1092, null]], "polars.Series.exp": [[1093, null]], "polars.Series.explode": [[1094, null]], "polars.Series.extend": [[1095, null]], "polars.Series.extend_constant": [[1096, null]], "polars.Series.fill_nan": [[1097, null]], "polars.Series.fill_null": [[1098, null]], "polars.Series.filter": [[1099, null]], "polars.Series.first": [[1100, null]], "polars.Series.flags": [[1101, null]], "polars.Series.floor": [[1102, null]], "polars.Series.gather": [[1103, null]], "polars.Series.gather_every": [[1104, null]], "polars.Series.ge": [[1105, null]], "polars.Series.get_chunks": [[1106, null]], "polars.Series.gt": [[1107, null]], "polars.Series.has_nulls": [[1108, null]], "polars.Series.has_validity": [[1109, null]], "polars.Series.hash": [[1110, null]], "polars.Series.head": [[1111, null]], "polars.Series.hist": [[1112, null]], "polars.Series.implode": [[1113, null]], "polars.Series.index_of": [[1114, null]], "polars.Series.interpolate": [[1115, null]], "polars.Series.interpolate_by": [[1116, null]], "polars.Series.is_between": [[1117, null]], "polars.Series.is_duplicated": [[1118, null]], "polars.Series.is_empty": [[1119, null]], "polars.Series.is_finite": [[1120, null]], "polars.Series.is_first_distinct": [[1121, null]], "polars.Series.is_in": [[1122, null]], "polars.Series.is_infinite": [[1123, null]], "polars.Series.is_last_distinct": [[1124, null]], "polars.Series.is_nan": [[1125, null]], "polars.Series.is_not_nan": [[1126, null]], "polars.Series.is_not_null": [[1127, null]], "polars.Series.is_null": [[1128, null]], "polars.Series.is_sorted": [[1129, null]], "polars.Series.is_unique": [[1130, null]], "polars.Series.item": [[1131, null]], "polars.Series.kurtosis": [[1132, null]], "polars.Series.last": [[1133, null]], "polars.Series.le": [[1134, null]], "polars.Series.len": [[1135, null]], "polars.Series.limit": [[1136, null]], "polars.Series.list.all": [[1137, null]], "polars.Series.list.any": [[1138, null]], "polars.Series.list.arg_max": [[1139, null]], "polars.Series.list.arg_min": [[1140, null]], "polars.Series.list.concat": [[1141, null]], "polars.Series.list.contains": [[1142, null]], "polars.Series.list.count_matches": [[1143, null]], "polars.Series.list.diff": [[1144, null]], "polars.Series.list.drop_nulls": [[1145, null]], "polars.Series.list.eval": [[1146, null]], "polars.Series.list.explode": [[1147, null]], "polars.Series.list.first": [[1148, null]], "polars.Series.list.gather": [[1149, null]], "polars.Series.list.gather_every": [[1150, null]], "polars.Series.list.get": [[1151, null]], "polars.Series.list.head": [[1152, null]], "polars.Series.list.join": [[1153, null]], "polars.Series.list.last": [[1154, null]], "polars.Series.list.len": [[1155, null]], "polars.Series.list.max": [[1156, null]], "polars.Series.list.mean": [[1157, null]], "polars.Series.list.median": [[1158, null]], "polars.Series.list.min": [[1159, null]], "polars.Series.list.n_unique": [[1160, null]], "polars.Series.list.reverse": [[1161, null]], "polars.Series.list.sample": [[1162, null]], "polars.Series.list.set_difference": [[1163, null]], "polars.Series.list.set_intersection": [[1164, null]], "polars.Series.list.set_symmetric_difference": [[1165, null]], "polars.Series.list.set_union": [[1166, null]], "polars.Series.list.shift": [[1167, null]], "polars.Series.list.slice": [[1168, null]], "polars.Series.list.sort": [[1169, null]], "polars.Series.list.std": [[1170, null]], "polars.Series.list.sum": [[1171, null]], "polars.Series.list.tail": [[1172, null]], "polars.Series.list.to_array": [[1173, null]], "polars.Series.list.to_struct": [[1174, null]], "polars.Series.list.unique": [[1175, null]], "polars.Series.list.var": [[1176, null]], "polars.Series.log": [[1177, null]], "polars.Series.log10": [[1178, null]], "polars.Series.log1p": [[1179, null]], "polars.Series.lower_bound": [[1180, null]], "polars.Series.lt": [[1181, null]], "polars.Series.map_elements": [[1182, null]], "polars.Series.max": [[1183, null]], "polars.Series.mean": [[1184, null]], "polars.Series.median": [[1185, null]], "polars.Series.min": [[1186, null]], "polars.Series.mode": [[1187, null]], "polars.Series.n_chunks": [[1188, null]], "polars.Series.n_unique": [[1189, null]], "polars.Series.name": [[1190, null]], "polars.Series.nan_max": [[1191, null]], "polars.Series.nan_min": [[1192, null]], "polars.Series.ne": [[1193, null]], "polars.Series.ne_missing": [[1194, null]], "polars.Series.new_from_index": [[1195, null]], "polars.Series.not_": [[1196, null]], "polars.Series.null_count": [[1197, null]], "polars.Series.pct_change": [[1198, null]], "polars.Series.peak_max": [[1199, null]], "polars.Series.peak_min": [[1200, null]], "polars.Series.pow": [[1201, null]], "polars.Series.product": [[1202, null]], "polars.Series.qcut": [[1203, null]], "polars.Series.quantile": [[1204, null]], "polars.Series.rank": [[1205, null]], "polars.Series.rechunk": [[1206, null]], "polars.Series.reinterpret": [[1207, null]], "polars.Series.rename": [[1208, null]], "polars.Series.replace": [[1209, null]], "polars.Series.replace_strict": [[1210, null]], "polars.Series.reshape": [[1211, null]], "polars.Series.reverse": [[1212, null]], "polars.Series.rle": [[1213, null]], "polars.Series.rle_id": [[1214, null]], "polars.Series.rolling_map": [[1215, null]], "polars.Series.rolling_max": [[1216, null]], "polars.Series.rolling_mean": [[1217, null]], "polars.Series.rolling_median": [[1218, null]], "polars.Series.rolling_min": [[1219, null]], "polars.Series.rolling_quantile": [[1220, null]], "polars.Series.rolling_skew": [[1221, null]], "polars.Series.rolling_std": [[1222, null]], "polars.Series.rolling_sum": [[1223, null]], "polars.Series.rolling_var": [[1224, null]], "polars.Series.round": [[1225, null]], "polars.Series.round_sig_figs": [[1226, null]], "polars.Series.sample": [[1227, null]], "polars.Series.scatter": [[1228, null]], "polars.Series.search_sorted": [[1229, null]], "polars.Series.set": [[1230, null]], "polars.Series.set_sorted": [[1231, null]], "polars.Series.shape": [[1232, null]], "polars.Series.shift": [[1233, null]], "polars.Series.shrink_dtype": [[1234, null]], "polars.Series.shrink_to_fit": [[1235, null]], "polars.Series.shuffle": [[1236, null]], "polars.Series.sign": [[1237, null]], "polars.Series.sin": [[1238, null]], "polars.Series.sinh": [[1239, null]], "polars.Series.skew": [[1240, null]], "polars.Series.slice": [[1241, null]], "polars.Series.sort": [[1242, null]], "polars.Series.sqrt": [[1243, null]], "polars.Series.std": [[1244, null]], "polars.Series.str.concat": [[1245, null]], "polars.Series.str.contains": [[1246, null]], "polars.Series.str.contains_any": [[1247, null]], "polars.Series.str.count_matches": [[1248, null]], "polars.Series.str.decode": [[1249, null]], "polars.Series.str.encode": [[1250, null]], "polars.Series.str.ends_with": [[1251, null]], "polars.Series.str.escape_regex": [[1252, null]], "polars.Series.str.explode": [[1253, null]], "polars.Series.str.extract": [[1254, null]], "polars.Series.str.extract_all": [[1255, null]], "polars.Series.str.extract_groups": [[1256, null]], "polars.Series.str.extract_many": [[1257, null]], "polars.Series.str.find": [[1258, null]], "polars.Series.str.find_many": [[1259, null]], "polars.Series.str.head": [[1260, null]], "polars.Series.str.join": [[1261, null]], "polars.Series.str.json_decode": [[1262, null]], "polars.Series.str.json_path_match": [[1263, null]], "polars.Series.str.len_bytes": [[1264, null]], "polars.Series.str.len_chars": [[1265, null]], "polars.Series.str.normalize": [[1266, null]], "polars.Series.str.pad_end": [[1267, null]], "polars.Series.str.pad_start": [[1268, null]], "polars.Series.str.replace": [[1269, null]], "polars.Series.str.replace_all": [[1270, null]], "polars.Series.str.replace_many": [[1271, null]], "polars.Series.str.reverse": [[1272, null]], "polars.Series.str.slice": [[1273, null]], "polars.Series.str.split": [[1274, null]], "polars.Series.str.split_exact": [[1275, null]], "polars.Series.str.splitn": [[1276, null]], "polars.Series.str.starts_with": [[1277, null]], "polars.Series.str.strip_chars": [[1278, null]], "polars.Series.str.strip_chars_end": [[1279, null]], "polars.Series.str.strip_chars_start": [[1280, null]], "polars.Series.str.strip_prefix": [[1281, null]], "polars.Series.str.strip_suffix": [[1282, null]], "polars.Series.str.strptime": [[1283, null]], "polars.Series.str.tail": [[1284, null]], "polars.Series.str.to_date": [[1285, null]], "polars.Series.str.to_datetime": [[1286, null]], "polars.Series.str.to_decimal": [[1287, null]], "polars.Series.str.to_integer": [[1288, null]], "polars.Series.str.to_lowercase": [[1289, null]], "polars.Series.str.to_time": [[1290, null]], "polars.Series.str.to_titlecase": [[1291, null]], "polars.Series.str.to_uppercase": [[1292, null]], "polars.Series.str.zfill": [[1293, null]], "polars.Series.struct.field": [[1294, null]], "polars.Series.struct.fields": [[1295, null]], "polars.Series.struct.json_encode": [[1296, null]], "polars.Series.struct.rename_fields": [[1297, null]], "polars.Series.struct.schema": [[1298, null]], "polars.Series.struct.unnest": [[1299, null]], "polars.Series.sum": [[1300, null]], "polars.Series.tail": [[1301, null]], "polars.Series.tan": [[1302, null]], "polars.Series.tanh": [[1303, null]], "polars.Series.to_arrow": [[1304, null]], "polars.Series.to_dummies": [[1305, null]], "polars.Series.to_frame": [[1306, null]], "polars.Series.to_init_repr": [[1307, null]], "polars.Series.to_jax": [[1308, null]], "polars.Series.to_list": [[1309, null]], "polars.Series.to_numpy": [[1310, null]], "polars.Series.to_pandas": [[1311, null]], "polars.Series.to_physical": [[1312, null]], "polars.Series.to_torch": [[1313, null]], "polars.Series.top_k": [[1314, null]], "polars.Series.unique": [[1315, null]], "polars.Series.unique_counts": [[1316, null]], "polars.Series.upper_bound": [[1317, null]], "polars.Series.value_counts": [[1318, null]], "polars.Series.var": [[1319, null]], "polars.Series.zip_with": [[1320, null]], "polars.StringCache": [[56, null]], "polars.align_frames": [[57, null]], "polars.all": [[736, null]], "polars.all_horizontal": [[737, null]], "polars.any": [[738, null]], "polars.any_horizontal": [[739, null]], "polars.api.register_dataframe_namespace": [[58, null]], "polars.api.register_expr_namespace": [[59, null]], "polars.api.register_lazyframe_namespace": [[60, null]], "polars.api.register_series_namespace": [[61, null]], "polars.approx_n_unique": [[740, null]], "polars.arange": [[741, null]], "polars.arctan2": [[742, null]], "polars.arctan2d": [[743, null]], "polars.arg_sort_by": [[744, null]], "polars.arg_where": [[745, null]], "polars.build_info": [[62, null]], "polars.business_day_count": [[746, null]], "polars.coalesce": [[747, null]], "polars.col": [[816, null]], "polars.collect_all": [[63, null]], "polars.collect_all_async": [[64, null]], "polars.concat": [[65, null]], "polars.concat_arr": [[748, null]], "polars.concat_list": [[749, null]], "polars.concat_str": [[750, null]], "polars.corr": [[751, null]], "polars.count": [[752, null]], "polars.cov": [[753, null]], "polars.cum_count": [[754, null]], "polars.cum_fold": [[755, null]], "polars.cum_reduce": [[756, null]], "polars.cum_sum": [[757, null]], "polars.cum_sum_horizontal": [[758, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[308, null]], "polars.dataframe.group_by.GroupBy.agg": [[309, null]], "polars.dataframe.group_by.GroupBy.all": [[310, null]], "polars.dataframe.group_by.GroupBy.count": [[311, null]], "polars.dataframe.group_by.GroupBy.first": [[312, null]], "polars.dataframe.group_by.GroupBy.head": [[313, null]], "polars.dataframe.group_by.GroupBy.last": [[314, null]], "polars.dataframe.group_by.GroupBy.len": [[315, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[316, null]], "polars.dataframe.group_by.GroupBy.max": [[317, null]], "polars.dataframe.group_by.GroupBy.mean": [[318, null]], "polars.dataframe.group_by.GroupBy.median": [[319, null]], "polars.dataframe.group_by.GroupBy.min": [[320, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[321, null]], "polars.dataframe.group_by.GroupBy.quantile": [[322, null]], "polars.dataframe.group_by.GroupBy.sum": [[323, null]], "polars.dataframe.group_by.GroupBy.tail": [[324, null]], "polars.datatypes.Array": [[66, null]], "polars.datatypes.Binary": [[67, null]], "polars.datatypes.Boolean": [[68, null]], "polars.datatypes.Categorical": [[69, null]], "polars.datatypes.DataType": [[70, null]], "polars.datatypes.Date": [[71, null]], "polars.datatypes.Datetime": [[72, null]], "polars.datatypes.Decimal": [[73, null]], "polars.datatypes.Duration": [[74, null]], "polars.datatypes.Enum": [[75, null]], "polars.datatypes.Field": [[76, null]], "polars.datatypes.Float32": [[77, null]], "polars.datatypes.Float64": [[78, null]], "polars.datatypes.Int128": [[79, null]], "polars.datatypes.Int16": [[80, null]], "polars.datatypes.Int32": [[81, null]], "polars.datatypes.Int64": [[82, null]], "polars.datatypes.Int8": [[83, null]], "polars.datatypes.List": [[84, null]], "polars.datatypes.Null": [[85, null]], "polars.datatypes.Object": [[86, null]], "polars.datatypes.String": [[87, null]], "polars.datatypes.Struct": [[88, null]], "polars.datatypes.Time": [[89, null]], "polars.datatypes.UInt16": [[90, null]], "polars.datatypes.UInt32": [[91, null]], "polars.datatypes.UInt64": [[92, null]], "polars.datatypes.UInt8": [[93, null]], "polars.datatypes.Unknown": [[94, null]], "polars.datatypes.Utf8": [[95, null]], "polars.date": [[759, null]], "polars.date_range": [[760, null]], "polars.date_ranges": [[761, null]], "polars.datetime": [[762, null]], "polars.datetime_range": [[763, null]], "polars.datetime_ranges": [[764, null]], "polars.disable_string_cache": [[96, null]], "polars.duration": [[765, null]], "polars.element": [[766, null]], "polars.enable_string_cache": [[97, null]], "polars.escape_regex": [[98, null]], "polars.exceptions.CategoricalRemappingWarning": [[99, null]], "polars.exceptions.ChronoFormatWarning": [[100, null]], "polars.exceptions.ColumnNotFoundError": [[101, null]], "polars.exceptions.ComputeError": [[102, null]], "polars.exceptions.CustomUFuncWarning": [[103, null]], "polars.exceptions.DataOrientationWarning": [[104, null]], "polars.exceptions.DuplicateError": [[105, null]], "polars.exceptions.InvalidOperationError": [[106, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[107, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[108, null]], "polars.exceptions.NoDataError": [[109, null]], "polars.exceptions.NoRowsReturnedError": [[110, null]], "polars.exceptions.OutOfBoundsError": [[111, null]], "polars.exceptions.PanicException": [[112, null]], "polars.exceptions.ParameterCollisionError": [[113, null]], "polars.exceptions.PerformanceWarning": [[114, null]], "polars.exceptions.PolarsError": [[115, null]], "polars.exceptions.PolarsInefficientMapWarning": [[116, null]], "polars.exceptions.PolarsWarning": [[117, null]], "polars.exceptions.RowsError": [[118, null]], "polars.exceptions.SQLInterfaceError": [[119, null]], "polars.exceptions.SQLSyntaxError": [[120, null]], "polars.exceptions.SchemaError": [[121, null]], "polars.exceptions.SchemaFieldNotFoundError": [[122, null]], "polars.exceptions.ShapeError": [[123, null]], "polars.exceptions.StringCacheMismatchError": [[124, null]], "polars.exceptions.StructFieldNotFoundError": [[125, null]], "polars.exceptions.TooManyRowsReturnedError": [[126, null]], "polars.exceptions.UnstableWarning": [[127, null]], "polars.exceptions.UnsuitableSQLError": [[128, null]], "polars.exclude": [[767, null]], "polars.first": [[768, null]], "polars.fold": [[769, null]], "polars.format": [[770, null]], "polars.from_arrow": [[129, null]], "polars.from_dataframe": [[130, null]], "polars.from_dict": [[131, null]], "polars.from_dicts": [[132, null]], "polars.from_epoch": [[771, null]], "polars.from_numpy": [[133, null]], "polars.from_pandas": [[134, null]], "polars.from_records": [[135, null]], "polars.from_repr": [[136, null]], "polars.get_index_type": [[137, null]], "polars.groups": [[772, null]], "polars.head": [[773, null]], "polars.implode": [[774, null]], "polars.int_range": [[775, null]], "polars.int_ranges": [[776, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[138, null]], "polars.io.plugins.register_io_source": [[139, null]], "polars.json_normalize": [[140, null]], "polars.last": [[777, null]], "polars.lazyframe.engine_config.GPUEngine": [[909, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[910, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[911, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[912, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[913, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[914, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[915, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[916, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[917, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[918, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[919, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[920, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[921, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[922, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[923, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[924, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[925, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[926, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[927, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[928, null]], "polars.len": [[778, null]], "polars.linear_space": [[779, null]], "polars.lit": [[780, null]], "polars.map_batches": [[781, null]], "polars.map_groups": [[782, null]], "polars.max": [[783, null]], "polars.max_horizontal": [[784, null]], "polars.mean": [[785, null]], "polars.mean_horizontal": [[786, null]], "polars.median": [[787, null]], "polars.min": [[788, null]], "polars.min_horizontal": [[789, null]], "polars.n_unique": [[790, null]], "polars.nth": [[791, null]], "polars.ones": [[792, null]], "polars.plugins.register_plugin_function": [[141, null]], "polars.quantile": [[793, null]], "polars.read_avro": [[142, null]], "polars.read_clipboard": [[143, null]], "polars.read_csv": [[144, null]], "polars.read_csv_batched": [[145, null]], "polars.read_database": [[146, null]], "polars.read_database_uri": [[147, null]], "polars.read_delta": [[148, null]], "polars.read_excel": [[149, null]], "polars.read_ipc": [[150, null]], "polars.read_ipc_schema": [[151, null]], "polars.read_ipc_stream": [[152, null]], "polars.read_json": [[153, null]], "polars.read_ndjson": [[154, null]], "polars.read_ods": [[155, null]], "polars.read_parquet": [[156, null]], "polars.read_parquet_schema": [[157, null]], "polars.reduce": [[794, null]], "polars.repeat": [[795, null]], "polars.rolling_corr": [[796, null]], "polars.rolling_cov": [[797, null]], "polars.scan_csv": [[158, null]], "polars.scan_delta": [[159, null]], "polars.scan_iceberg": [[160, null]], "polars.scan_ipc": [[161, null]], "polars.scan_ndjson": [[162, null]], "polars.scan_parquet": [[163, null]], "polars.scan_pyarrow_dataset": [[164, null]], "polars.select": [[798, null]], "polars.set_random_seed": [[165, null]], "polars.show_versions": [[166, null]], "polars.sql": [[799, null]], "polars.sql_expr": [[800, null]], "polars.std": [[801, null]], "polars.struct": [[802, null]], "polars.sum": [[803, null]], "polars.sum_horizontal": [[804, null]], "polars.tail": [[805, null]], "polars.testing.assert_frame_equal": [[167, null]], "polars.testing.assert_frame_not_equal": [[168, null]], "polars.testing.assert_series_equal": [[169, null]], "polars.testing.assert_series_not_equal": [[170, null]], "polars.testing.parametric.column": [[171, null]], "polars.testing.parametric.columns": [[172, null]], "polars.testing.parametric.create_list_strategy": [[173, null]], "polars.testing.parametric.dataframes": [[174, null]], "polars.testing.parametric.dtypes": [[175, null]], "polars.testing.parametric.lists": [[176, null]], "polars.testing.parametric.load_profile": [[177, null]], "polars.testing.parametric.series": [[178, null]], "polars.testing.parametric.set_profile": [[179, null]], "polars.thread_pool_size": [[180, null]], "polars.threadpool_size": [[181, null]], "polars.time": [[806, null]], "polars.time_range": [[807, null]], "polars.time_ranges": [[808, null]], "polars.using_string_cache": [[182, null]], "polars.var": [[809, null]], "polars.when": [[810, null]], "polars.zeros": [[811, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Catalog", "reference/api/polars.Catalog.get_table_info", "reference/api/polars.Catalog.list_catalogs", "reference/api/polars.Catalog.list_namespaces", "reference/api/polars.Catalog.list_tables", "reference/api/polars.Catalog.scan_table", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Catalog.rst", "reference/api/polars.Catalog.get_table_info.rst", "reference/api/polars.Catalog.list_catalogs.rst", "reference/api/polars.Catalog.list_namespaces.rst", "reference/api/polars.Catalog.list_tables.rst", "reference/api/polars.Catalog.scan_table.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[186, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[942, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[187, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[943, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[188, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1357, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1357, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[189, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[944, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[2, "polars.Catalog.__init__", false]], "__init__() (polars.credentialprovider method)": [[37, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[38, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[39, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[40, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[66, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[67, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[68, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[69, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[70, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[71, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[72, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[73, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[74, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[75, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[76, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[77, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[78, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[79, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[80, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[81, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[82, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[83, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[84, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[85, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[86, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[87, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[88, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[89, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[90, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[91, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[92, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[93, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[94, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[909, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1357, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[171, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[338, "polars.Expr.abs", false]], "abs() (polars.series method)": [[945, "polars.Series.abs", false]], "add() (polars.expr method)": [[339, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[427, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1034, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[340, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[341, "polars.Expr.alias", false]], "alias() (polars.series method)": [[946, "polars.Series.alias", false]], "align_frames() (in module polars)": [[57, "polars.align_frames", false]], "all() (in module polars)": [[736, "polars.all", false]], "all() (in module polars.selectors)": [[940, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[342, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[358, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[523, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[947, "polars.Series.all", false]], "all() (polars.series.arr method)": [[962, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1137, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[737, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[940, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[940, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[343, "polars.Expr.and_", false]], "any() (in module polars)": [[738, "polars.any", false]], "any() (polars.expr method)": [[344, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[359, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[524, "polars.Expr.list.any", false]], "any() (polars.series method)": [[948, "polars.Series.any", false]], "any() (polars.series.arr method)": [[963, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1138, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[739, "polars.any_horizontal", false]], "append() (polars.expr method)": [[345, "polars.Expr.append", false]], "append() (polars.series method)": [[949, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[740, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[190, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[346, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[835, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[950, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[741, "polars.arange", false]], "arccos() (polars.expr method)": [[347, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[951, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[348, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[952, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[349, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[953, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[350, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[954, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[351, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[955, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[742, "polars.arctan2", false]], "arctan2d() (in module polars)": [[743, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[352, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[956, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[353, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[360, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[525, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[957, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[964, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1139, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[354, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[361, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[526, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[958, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[965, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1140, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[355, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[959, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[744, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[356, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[960, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[357, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[961, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[745, "polars.arg_where", false]], "array (class in polars.datatypes)": [[66, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[167, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[168, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[169, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[170, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[382, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[428, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1035, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[67, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[940, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[390, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[993, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[391, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[994, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[392, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[995, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[393, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[996, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[394, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[997, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[395, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[998, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[396, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[999, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[397, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1000, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[398, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1001, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[68, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[940, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[191, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[399, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[836, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1002, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[400, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[62, "polars.build_info", false]], "business_day_count() (in module polars)": [[746, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[940, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[940, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[940, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[837, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[926, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[192, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[401, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[838, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1003, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[429, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1036, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[2, "polars.Catalog", false]], "categorical (class in polars.datatypes)": [[69, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[940, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[99, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[407, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1012, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[408, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1013, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[430, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1037, "polars.Series.dt.century", false]], "chronoformatwarning": [[100, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1014, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[193, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[839, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1015, "polars.Series.clear", false]], "clip() (polars.expr method)": [[409, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1016, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[194, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[840, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1017, "polars.Series.clone", false]], "coalesce() (in module polars)": [[747, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[841, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[63, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[64, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[842, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[195, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[843, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[171, "polars.testing.parametric.column", false]], "columnnotfounderror": [[101, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[196, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[844, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[172, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[431, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1038, "polars.Series.dt.combine", false]], "computeerror": [[102, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[65, "polars.concat", false]], "concat() (polars.expr.list method)": [[527, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[666, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1141, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1245, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[748, "polars.concat_arr", false]], "concat_list() (in module polars)": [[749, "polars.concat_list", false]], "concat_str() (in module polars)": [[750, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[940, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[362, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[383, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[528, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[667, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[966, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[986, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1142, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1246, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[668, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1247, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[432, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1039, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[751, "polars.corr", false]], "corr() (polars.dataframe method)": [[197, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[410, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1018, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[411, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1019, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[412, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1020, "polars.Series.cot", false]], "count() (in module polars)": [[752, "polars.count", false]], "count() (polars.dataframe method)": [[198, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[413, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[845, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1021, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[363, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[529, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[669, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[967, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1143, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1248, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[753, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[173, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[37, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[38, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[39, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[40, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[754, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[414, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1022, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[755, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[415, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1023, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[416, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1024, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[417, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1025, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[756, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[757, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[418, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1026, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[758, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[419, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1027, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[103, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[420, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1028, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[174, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[104, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[70, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[71, "polars.datatypes.Date", false]], "date() (in module polars)": [[759, "polars.date", false]], "date() (in module polars.selectors)": [[940, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[433, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1040, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[760, "polars.date_range", false]], "date_ranges() (in module polars)": [[761, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[72, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[762, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[940, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[434, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1041, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[763, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[764, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[435, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1042, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[73, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[940, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[384, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[670, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[987, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1249, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[421, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[199, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[846, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1029, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[200, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[422, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[847, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[423, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[530, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1030, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1144, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[940, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[96, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[424, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1031, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[201, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[848, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[202, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[203, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[425, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[849, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1032, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[204, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[426, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[531, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[850, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1033, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1145, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[436, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1043, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1083, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[205, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[851, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[175, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[105, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[74, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[765, "polars.duration", false]], "duration() (in module polars.selectors)": [[940, "polars.selectors.duration", false]], "element() (in module polars)": [[766, "polars.element", false]], "enable_string_cache() (in module polars)": [[97, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[385, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[671, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[988, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1250, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[940, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[386, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[402, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[672, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[989, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1004, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1251, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[472, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1084, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[75, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[437, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1044, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[473, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[573, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1085, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[474, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1086, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[206, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1087, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[98, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[673, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1252, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[207, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1088, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[532, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1146, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[475, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1089, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[476, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1090, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[477, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1091, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[478, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1092, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[767, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[940, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[479, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1338, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1339, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[480, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1093, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[940, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[852, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[208, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[481, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[364, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[533, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[674, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[853, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1094, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[968, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1147, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1253, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[209, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1095, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[482, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1096, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[675, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1254, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[676, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1255, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[677, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1256, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[678, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1257, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[927, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[928, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[76, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[715, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1294, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1295, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[210, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[483, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[854, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1097, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[211, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[484, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[855, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1098, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[212, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[485, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[856, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1099, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[679, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1258, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[680, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1259, "polars.Series.str.find_many", false]], "first() (in module polars)": [[768, "polars.first", false]], "first() (in module polars.selectors)": [[940, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[312, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[486, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[365, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[534, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[857, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1100, "polars.Series.first", false]], "first() (polars.series.arr method)": [[969, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1148, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[213, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1101, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[487, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[940, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[77, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[78, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[488, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1102, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[489, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[769, "polars.fold", false]], "fold() (polars.dataframe method)": [[214, "polars.DataFrame.fold", false]], "format() (in module polars)": [[770, "polars.format", false]], "forward_fill() (polars.expr method)": [[490, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[129, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[130, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[131, "polars.from_dict", false]], "from_dicts() (in module polars)": [[132, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[771, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[491, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[133, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[134, "polars.from_pandas", false]], "from_records() (in module polars)": [[135, "polars.from_records", false]], "from_repr() (in module polars)": [[136, "polars.from_repr", false]], "gather() (polars.expr method)": [[492, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[535, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1103, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1149, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[215, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[493, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[536, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[858, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1104, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1150, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[494, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1105, "polars.Series.ge", false]], "get() (polars.expr method)": [[495, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[366, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[537, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[970, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1151, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[403, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1005, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1106, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[216, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[217, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[218, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[137, "polars.get_index_type", false]], "get_table_info() (polars.catalog method)": [[3, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[219, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[909, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[220, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[859, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[221, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[860, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[772, "polars.groups", false]], "gt() (polars.expr method)": [[496, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1107, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[574, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[497, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1108, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1109, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[498, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1110, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[222, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[773, "polars.head", false]], "head() (polars.dataframe method)": [[223, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[313, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[499, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[538, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[681, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[861, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[914, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1111, "polars.Series.head", false]], "head() (polars.series.list method)": [[1152, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1260, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[224, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[500, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1112, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[438, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1045, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[225, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[774, "polars.implode", false]], "implode() (polars.expr method)": [[501, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1113, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[502, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1114, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[226, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[503, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[862, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[79, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[80, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[81, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[82, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[83, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[775, "polars.int_range", false]], "int_ranges() (in module polars)": [[776, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[940, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[227, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[504, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[863, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1115, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[505, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1116, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[106, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[506, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1117, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[575, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[576, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[228, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[507, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1118, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[229, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1119, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[508, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1120, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[509, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1121, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[510, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1122, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[511, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1123, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[512, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1124, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[439, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1046, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[577, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1006, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[513, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1125, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[514, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1126, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[515, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1127, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[516, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1128, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[578, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[940, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1129, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[230, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[517, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1130, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[440, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1047, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[231, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1131, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[232, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[233, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[234, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[235, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[367, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[539, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[682, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[864, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[971, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1153, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1261, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[236, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[865, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[237, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[866, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[683, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1262, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[716, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1296, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[140, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[684, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1263, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[593, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[518, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1132, "polars.Series.kurtosis", false]], "last() (in module polars)": [[777, "polars.last", false]], "last() (in module polars.selectors)": [[940, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[314, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[519, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[368, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[540, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[867, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[915, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1133, "polars.Series.last", false]], "last() (polars.series.arr method)": [[972, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1154, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[238, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[868, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[520, "polars.Expr.le", false]], "le() (polars.series method)": [[1134, "polars.Series.le", false]], "len() (in module polars)": [[778, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[315, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[521, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[541, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[916, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1135, "polars.Series.len", false]], "len() (polars.series.list method)": [[1155, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[404, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[685, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1007, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1264, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[405, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[686, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1008, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1265, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[239, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[522, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[869, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1136, "polars.Series.limit", false]], "linear_space() (in module polars)": [[779, "polars.linear_space", false]], "list (class in polars.datatypes)": [[84, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[4, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[5, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[6, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[176, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[780, "polars.lit", false]], "load() (polars.config class method)": [[8, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[9, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[177, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[563, "polars.Expr.log", false]], "log() (polars.series method)": [[1177, "polars.Series.log", false]], "log10() (polars.expr method)": [[564, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1178, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[565, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1179, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[566, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1180, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[567, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1181, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[594, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[781, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[568, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[870, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[569, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1182, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[595, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[782, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[316, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[917, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[240, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[107, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[940, "polars.selectors.matches", false]], "max() (in module polars)": [[783, "polars.max", false]], "max() (polars.dataframe method)": [[241, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[317, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[570, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[369, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[542, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[871, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[918, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1183, "polars.Series.max", false]], "max() (polars.series.arr method)": [[973, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1048, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1156, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[784, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[242, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[785, "polars.mean", false]], "mean() (polars.dataframe method)": [[243, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[318, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[571, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[543, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[872, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[919, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1184, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1049, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1157, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[786, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[244, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[787, "polars.median", false]], "median() (polars.dataframe method)": [[245, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[319, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[572, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[370, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[544, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[873, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[920, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1185, "polars.Series.median", false]], "median() (polars.series.arr method)": [[974, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1050, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1158, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[246, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[874, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[247, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[875, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[441, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1051, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[442, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1052, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[443, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1053, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[788, "polars.min", false]], "min() (polars.dataframe method)": [[248, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[320, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[588, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[371, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[545, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[876, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[921, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1186, "polars.Series.min", false]], "min() (polars.series.arr method)": [[975, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1054, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1159, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[789, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[249, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[444, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1055, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[589, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[590, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1187, "polars.Series.mode", false]], "module": [[940, "module-polars.selectors", false]], "moduleupgraderequirederror": [[108, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[445, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1056, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[446, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1057, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[447, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1058, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[591, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[250, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1188, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[790, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[251, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[321, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[592, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[372, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[546, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[922, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1189, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[976, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1160, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1190, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[602, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1191, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[603, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1192, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[448, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1059, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[604, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[579, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1193, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[605, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1194, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[606, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1195, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[138, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[109, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[687, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1266, "polars.Series.str.normalize", false]], "norowsreturnederror": [[110, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[607, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1196, "polars.Series.not_", false]], "nth() (in module polars)": [[791, "polars.nth", false]], "null (class in polars.datatypes)": [[85, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[252, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[608, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[877, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1197, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[940, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[86, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[449, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1060, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[792, "polars.ones", false]], "or_() (polars.expr method)": [[609, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[450, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1061, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[111, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[580, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[610, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[688, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1267, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[689, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1268, "polars.Series.str.pad_start", false]], "panicexception": [[112, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[113, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[253, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[611, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1198, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[612, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1199, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[613, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1200, "polars.Series.peak_min", false]], "performancewarning": [[114, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[254, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[614, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[878, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[255, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[333, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1334, "polars.Series.plot", false]], "polars.selectors": [[940, "module-polars.selectors", false]], "polarserror": [[115, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[116, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[117, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[581, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[615, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1201, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[596, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[597, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[256, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[616, "polars.Expr.product", false]], "product() (polars.series method)": [[1202, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[879, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[617, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1203, "polars.Series.qcut", false]], "quantile() (in module polars)": [[793, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[257, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[322, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[618, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[880, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[923, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1204, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[451, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1062, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[619, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[620, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1205, "polars.Series.rank", false]], "read_avro() (in module polars)": [[142, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[143, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[144, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[145, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[146, "polars.read_database", false]], "read_database_uri() (in module polars)": [[147, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[148, "polars.read_delta", false]], "read_excel() (in module polars)": [[149, "polars.read_excel", false]], "read_ipc() (in module polars)": [[150, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[151, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[152, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[153, "polars.read_json", false]], "read_ndjson() (in module polars)": [[154, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[155, "polars.read_ods", false]], "read_parquet() (in module polars)": [[156, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[157, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[258, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[621, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1206, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[794, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1340, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[58, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[59, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1341, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[139, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[60, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1342, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[141, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[61, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[622, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[387, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1207, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[990, "polars.Series.bin.reinterpret", false]], "rename() (polars.dataframe method)": [[259, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[881, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1208, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[717, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1297, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[795, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[623, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[624, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[452, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[690, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1209, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1063, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1269, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[691, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1270, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[260, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[692, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1271, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[625, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1210, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[453, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1064, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[626, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1211, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[10, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[261, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[627, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[373, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[547, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[693, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[882, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1212, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[977, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1161, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1272, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[628, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1213, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[629, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1214, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[262, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[630, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[883, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[796, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[797, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[631, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1215, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[632, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1216, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[633, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[634, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1217, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[635, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[636, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1218, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[637, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[638, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1219, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[639, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[640, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1220, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[641, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[642, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1221, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[643, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1222, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[644, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[645, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1223, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[646, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[647, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1224, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[648, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[582, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[649, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[454, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1225, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1065, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[650, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1226, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[263, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[264, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[265, "polars.DataFrame.rows_by_key", false]], "rowserror": [[118, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[266, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[651, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[548, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1227, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1162, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[11, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[12, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[158, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[159, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[160, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[161, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[162, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[163, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[164, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[7, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1228, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[267, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[884, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1298, "polars.Series.struct.schema", false]], "schemaerror": [[121, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[122, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[652, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1229, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[455, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1066, "polars.Series.dt.second", false]], "select() (in module polars)": [[798, "polars.select", false]], "select() (polars.dataframe method)": [[268, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[885, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[269, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[886, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[270, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[583, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[887, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[178, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1230, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[13, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[14, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[15, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[549, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1163, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[16, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[17, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[18, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[19, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[550, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1164, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[179, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[165, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[271, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[653, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[888, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1231, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[20, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[551, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1165, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[22, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[23, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[24, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[25, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[26, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[30, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[31, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[32, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[33, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[34, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[552, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1166, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[35, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[272, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1232, "polars.Series.shape", false]], "shapeerror": [[123, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[273, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[654, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[374, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[553, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[889, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1233, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[978, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1167, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[584, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[890, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[166, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[655, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1234, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[274, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1235, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[656, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1236, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[657, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1237, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[940, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[658, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1238, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[659, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1239, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[53, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[54, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[55, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[388, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[991, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[660, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1240, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[275, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[661, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[554, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[694, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[891, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1241, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1168, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1273, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[276, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[662, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[375, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[555, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[892, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1242, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[979, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1169, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[663, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[695, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1274, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[696, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1275, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[697, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1276, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[799, "polars.sql", false]], "sql() (polars.dataframe method)": [[277, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[893, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[800, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1357, "polars.SQLContext", false]], "sqlinterfaceerror": [[119, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[120, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[664, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1243, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[940, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[389, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[406, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[698, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[992, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1009, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1277, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[36, "polars.Config.state", false]], "std() (in module polars)": [[801, "polars.std", false]], "std() (polars.dataframe method)": [[278, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[665, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[376, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[556, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[894, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1244, "polars.Series.std", false]], "std() (polars.series.arr method)": [[980, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1170, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[456, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1067, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[87, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[940, "polars.selectors.string", false]], "stringcache (class in polars)": [[56, "polars.StringCache", false]], "stringcachemismatcherror": [[124, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[699, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1278, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[700, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1279, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[701, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1280, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[702, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1281, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[703, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1282, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[704, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1283, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[88, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[802, "polars.struct", false]], "structfieldnotfounderror": [[125, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[334, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[720, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[598, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[599, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[803, "polars.sum", false]], "sum() (polars.dataframe method)": [[279, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[323, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[721, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[377, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[557, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[895, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[924, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1300, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[981, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1171, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[804, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[280, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1343, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[805, "polars.tail", false]], "tail() (polars.dataframe method)": [[281, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[324, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[722, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[558, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[705, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[896, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[925, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1301, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1172, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1284, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[723, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1302, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[724, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1303, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[940, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[180, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[181, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[89, "polars.datatypes.Time", false]], "time() (in module polars)": [[806, "polars.time", false]], "time() (in module polars.selectors)": [[940, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[457, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1068, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[807, "polars.time_range", false]], "time_ranges() (in module polars)": [[808, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[458, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1069, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[559, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1173, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[282, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1304, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[706, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1285, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[707, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1286, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[708, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1287, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[283, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[284, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[285, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1305, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1306, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[286, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1307, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[709, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1288, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[287, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1308, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[378, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1309, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[982, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1010, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[600, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[710, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1289, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[288, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1310, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[289, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1311, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[725, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1312, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[290, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[459, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1070, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[291, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[379, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[560, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[983, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1174, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[711, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1290, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[712, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1291, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[292, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1313, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[601, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[713, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1292, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[126, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[293, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[726, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[897, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1314, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[727, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[460, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1071, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[461, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1072, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[462, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1073, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[463, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1074, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[464, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1075, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[465, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1076, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[466, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1077, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[294, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[585, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[728, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[467, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1078, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[90, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[91, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[92, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[93, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[586, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[295, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[729, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[380, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[561, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[898, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1315, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[984, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1175, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[730, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1316, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[94, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[296, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[718, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[899, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1299, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[297, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[900, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1344, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[940, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[127, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[298, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[128, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[299, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[901, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[731, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1317, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[300, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1011, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[182, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[95, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[732, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1318, "polars.Series.value_counts", false]], "var() (in module polars)": [[809, "polars.var", false]], "var() (polars.dataframe method)": [[301, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[733, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[381, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[562, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[902, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1319, "polars.Series.var", false]], "var() (polars.series.arr method)": [[985, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1176, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[302, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[468, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1079, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[469, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1080, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[810, "polars.when", false]], "where() (polars.expr method)": [[734, "polars.Expr.where", false]], "width (polars.dataframe property)": [[303, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[903, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[304, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[904, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[305, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[905, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[906, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[719, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[306, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[907, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[307, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[908, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[470, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1081, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[41, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[42, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[43, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[44, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[45, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[46, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[47, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[48, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[49, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[587, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[50, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[51, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[735, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[471, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1082, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[811, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[714, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1293, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1320, "polars.Series.zip_with", false]]}, "objects": {"polars": [[2, 0, 1, "", "Catalog"], [37, 0, 1, "", "CredentialProvider"], [38, 0, 1, "", "CredentialProviderAWS"], [39, 0, 1, "", "CredentialProviderAzure"], [40, 0, 1, "", "CredentialProviderGCP"], [1357, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 4, 1, "", "align_frames"], [736, 4, 1, "", "all"], [737, 4, 1, "", "all_horizontal"], [738, 4, 1, "", "any"], [739, 4, 1, "", "any_horizontal"], [740, 4, 1, "", "approx_n_unique"], [741, 4, 1, "", "arange"], [742, 4, 1, "", "arctan2"], [743, 4, 1, "", "arctan2d"], [744, 4, 1, "", "arg_sort_by"], [745, 4, 1, "", "arg_where"], [62, 4, 1, "", "build_info"], [746, 4, 1, "", "business_day_count"], [747, 4, 1, "", "coalesce"], [63, 4, 1, "", "collect_all"], [64, 4, 1, "", "collect_all_async"], [65, 4, 1, "", "concat"], [748, 4, 1, "", "concat_arr"], [749, 4, 1, "", "concat_list"], [750, 4, 1, "", "concat_str"], [751, 4, 1, "", "corr"], [752, 4, 1, "", "count"], [753, 4, 1, "", "cov"], [754, 4, 1, "", "cum_count"], [755, 4, 1, "", "cum_fold"], [756, 4, 1, "", "cum_reduce"], [757, 4, 1, "", "cum_sum"], [758, 4, 1, "", "cum_sum_horizontal"], [759, 4, 1, "", "date"], [760, 4, 1, "", "date_range"], [761, 4, 1, "", "date_ranges"], [762, 4, 1, "", "datetime"], [763, 4, 1, "", "datetime_range"], [764, 4, 1, "", "datetime_ranges"], [96, 4, 1, "", "disable_string_cache"], [765, 4, 1, "", "duration"], [766, 4, 1, "", "element"], [97, 4, 1, "", "enable_string_cache"], [98, 4, 1, "", "escape_regex"], [767, 4, 1, "", "exclude"], [768, 4, 1, "", "first"], [769, 4, 1, "", "fold"], [770, 4, 1, "", "format"], [129, 4, 1, "", "from_arrow"], [130, 4, 1, "", "from_dataframe"], [131, 4, 1, "", "from_dict"], [132, 4, 1, "", "from_dicts"], [771, 4, 1, "", "from_epoch"], [133, 4, 1, "", "from_numpy"], [134, 4, 1, "", "from_pandas"], [135, 4, 1, "", "from_records"], [136, 4, 1, "", "from_repr"], [137, 4, 1, "", "get_index_type"], [772, 4, 1, "", "groups"], [773, 4, 1, "", "head"], [774, 4, 1, "", "implode"], [775, 4, 1, "", "int_range"], [776, 4, 1, "", "int_ranges"], [140, 4, 1, "", "json_normalize"], [777, 4, 1, "", "last"], [778, 4, 1, "", "len"], [779, 4, 1, "", "linear_space"], [780, 4, 1, "", "lit"], [781, 4, 1, "", "map_batches"], [782, 4, 1, "", "map_groups"], [783, 4, 1, "", "max"], [784, 4, 1, "", "max_horizontal"], [785, 4, 1, "", "mean"], [786, 4, 1, "", "mean_horizontal"], [787, 4, 1, "", "median"], [788, 4, 1, "", "min"], [789, 4, 1, "", "min_horizontal"], [790, 4, 1, "", "n_unique"], [791, 4, 1, "", "nth"], [792, 4, 1, "", "ones"], [793, 4, 1, "", "quantile"], [142, 4, 1, "", "read_avro"], [143, 4, 1, "", "read_clipboard"], [144, 4, 1, "", "read_csv"], [145, 4, 1, "", "read_csv_batched"], [146, 4, 1, "", "read_database"], [147, 4, 1, "", "read_database_uri"], [148, 4, 1, "", "read_delta"], [149, 4, 1, "", "read_excel"], [150, 4, 1, "", "read_ipc"], [151, 4, 1, "", "read_ipc_schema"], [152, 4, 1, "", "read_ipc_stream"], [153, 4, 1, "", "read_json"], [154, 4, 1, "", "read_ndjson"], [155, 4, 1, "", "read_ods"], [156, 4, 1, "", "read_parquet"], [157, 4, 1, "", "read_parquet_schema"], [794, 4, 1, "", "reduce"], [795, 4, 1, "", "repeat"], [796, 4, 1, "", "rolling_corr"], [797, 4, 1, "", "rolling_cov"], [158, 4, 1, "", "scan_csv"], [159, 4, 1, "", "scan_delta"], [160, 4, 1, "", "scan_iceberg"], [161, 4, 1, "", "scan_ipc"], [162, 4, 1, "", "scan_ndjson"], [163, 4, 1, "", "scan_parquet"], [164, 4, 1, "", "scan_pyarrow_dataset"], [798, 4, 1, "", "select"], [940, 6, 0, "-", "selectors"], [165, 4, 1, "", "set_random_seed"], [166, 4, 1, "", "show_versions"], [799, 4, 1, "", "sql"], [800, 4, 1, "", "sql_expr"], [801, 4, 1, "", "std"], [802, 4, 1, "", "struct"], [803, 4, 1, "", "sum"], [804, 4, 1, "", "sum_horizontal"], [805, 4, 1, "", "tail"], [180, 4, 1, "", "thread_pool_size"], [181, 4, 1, "", "threadpool_size"], [806, 4, 1, "", "time"], [807, 4, 1, "", "time_range"], [808, 4, 1, "", "time_ranges"], [182, 4, 1, "", "using_string_cache"], [809, 4, 1, "", "var"], [810, 4, 1, "", "when"], [811, 4, 1, "", "zeros"]], "polars.Catalog": [[2, 1, 1, "", "__init__"], [3, 1, 1, "", "get_table_info"], [4, 1, 1, "", "list_catalogs"], [5, 1, 1, "", "list_namespaces"], [6, 1, 1, "", "list_tables"], [7, 1, 1, "", "scan_table"]], "polars.Config": [[8, 1, 1, "", "load"], [9, 1, 1, "", "load_from_file"], [10, 1, 1, "", "restore_defaults"], [11, 1, 1, "", "save"], [12, 1, 1, "", "save_to_file"], [13, 1, 1, "", "set_ascii_tables"], [14, 1, 1, "", "set_auto_structify"], [15, 1, 1, "", "set_decimal_separator"], [16, 1, 1, "", "set_float_precision"], [17, 1, 1, "", "set_fmt_float"], [18, 1, 1, "", "set_fmt_str_lengths"], [19, 1, 1, "", "set_fmt_table_cell_list_len"], [20, 1, 1, "", "set_streaming_chunk_size"], [21, 1, 1, "", "set_tbl_cell_alignment"], [22, 1, 1, "", "set_tbl_cell_numeric_alignment"], [23, 1, 1, "", "set_tbl_cols"], [24, 1, 1, "", "set_tbl_column_data_type_inline"], [25, 1, 1, "", "set_tbl_dataframe_shape_below"], [26, 1, 1, "", "set_tbl_formatting"], [27, 1, 1, "", "set_tbl_hide_column_data_types"], [28, 1, 1, "", "set_tbl_hide_column_names"], [29, 1, 1, "", "set_tbl_hide_dataframe_shape"], [30, 1, 1, "", "set_tbl_hide_dtype_separator"], [31, 1, 1, "", "set_tbl_rows"], [32, 1, 1, "", "set_tbl_width_chars"], [33, 1, 1, "", "set_thousands_separator"], [34, 1, 1, "", "set_trim_decimal_zeros"], [35, 1, 1, "", "set_verbose"], [36, 1, 1, "", "state"]], "polars.CredentialProvider": [[37, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[38, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[39, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[40, 1, 1, "", "__init__"]], "polars.DataFrame": [[186, 1, 1, "", "__array__"], [187, 1, 1, "", "__arrow_c_stream__"], [188, 1, 1, "", "__dataframe__"], [189, 1, 1, "", "__getitem__"], [190, 1, 1, "", "approx_n_unique"], [191, 1, 1, "", "bottom_k"], [192, 1, 1, "", "cast"], [193, 1, 1, "", "clear"], [194, 1, 1, "", "clone"], [195, 1, 1, "", "collect_schema"], [196, 2, 1, "", "columns"], [197, 1, 1, "", "corr"], [198, 1, 1, "", "count"], [199, 1, 1, "", "describe"], [200, 1, 1, "", "deserialize"], [201, 1, 1, "", "drop"], [202, 1, 1, "", "drop_in_place"], [203, 1, 1, "", "drop_nans"], [204, 1, 1, "", "drop_nulls"], [205, 2, 1, "", "dtypes"], [206, 1, 1, "", "equals"], [207, 1, 1, "", "estimated_size"], [208, 1, 1, "", "explode"], [209, 1, 1, "", "extend"], [210, 1, 1, "", "fill_nan"], [211, 1, 1, "", "fill_null"], [212, 1, 1, "", "filter"], [213, 2, 1, "", "flags"], [214, 1, 1, "", "fold"], [215, 1, 1, "", "gather_every"], [216, 1, 1, "", "get_column"], [217, 1, 1, "", "get_column_index"], [218, 1, 1, "", "get_columns"], [219, 1, 1, "", "glimpse"], [220, 1, 1, "", "group_by"], [221, 1, 1, "", "group_by_dynamic"], [222, 1, 1, "", "hash_rows"], [223, 1, 1, "", "head"], [224, 2, 1, "", "height"], [225, 1, 1, "", "hstack"], [226, 1, 1, "", "insert_column"], [227, 1, 1, "", "interpolate"], [228, 1, 1, "", "is_duplicated"], [229, 1, 1, "", "is_empty"], [230, 1, 1, "", "is_unique"], [231, 1, 1, "", "item"], [232, 1, 1, "", "iter_columns"], [233, 1, 1, "", "iter_rows"], [234, 1, 1, "", "iter_slices"], [235, 1, 1, "", "join"], [236, 1, 1, "", "join_asof"], [237, 1, 1, "", "join_where"], [238, 1, 1, "", "lazy"], [239, 1, 1, "", "limit"], [240, 1, 1, "", "map_rows"], [241, 1, 1, "", "max"], [242, 1, 1, "", "max_horizontal"], [243, 1, 1, "", "mean"], [244, 1, 1, "", "mean_horizontal"], [245, 1, 1, "", "median"], [246, 1, 1, "", "melt"], [247, 1, 1, "", "merge_sorted"], [248, 1, 1, "", "min"], [249, 1, 1, "", "min_horizontal"], [250, 1, 1, "", "n_chunks"], [251, 1, 1, "", "n_unique"], [252, 1, 1, "", "null_count"], [253, 1, 1, "", "partition_by"], [254, 1, 1, "", "pipe"], [255, 1, 1, "", "pivot"], [333, 2, 1, "", "plot"], [256, 1, 1, "", "product"], [257, 1, 1, "", "quantile"], [258, 1, 1, "", "rechunk"], [259, 1, 1, "", "rename"], [260, 1, 1, "", "replace_column"], [261, 1, 1, "", "reverse"], [262, 1, 1, "", "rolling"], [263, 1, 1, "", "row"], [264, 1, 1, "", "rows"], [265, 1, 1, "", "rows_by_key"], [266, 1, 1, "", "sample"], [267, 2, 1, "", "schema"], [268, 1, 1, "", "select"], [269, 1, 1, "", "select_seq"], [270, 1, 1, "", "serialize"], [271, 1, 1, "", "set_sorted"], [272, 2, 1, "", "shape"], [273, 1, 1, "", "shift"], [274, 1, 1, "", "shrink_to_fit"], [275, 1, 1, "", "slice"], [276, 1, 1, "", "sort"], [277, 1, 1, "", "sql"], [278, 1, 1, "", "std"], [334, 2, 1, "", "style"], [279, 1, 1, "", "sum"], [280, 1, 1, "", "sum_horizontal"], [281, 1, 1, "", "tail"], [282, 1, 1, "", "to_arrow"], [283, 1, 1, "", "to_dict"], [284, 1, 1, "", "to_dicts"], [285, 1, 1, "", "to_dummies"], [286, 1, 1, "", "to_init_repr"], [287, 1, 1, "", "to_jax"], [288, 1, 1, "", "to_numpy"], [289, 1, 1, "", "to_pandas"], [290, 1, 1, "", "to_series"], [291, 1, 1, "", "to_struct"], [292, 1, 1, "", "to_torch"], [293, 1, 1, "", "top_k"], [294, 1, 1, "", "transpose"], [295, 1, 1, "", "unique"], [296, 1, 1, "", "unnest"], [297, 1, 1, "", "unpivot"], [298, 1, 1, "", "unstack"], [299, 1, 1, "", "update"], [300, 1, 1, "", "upsample"], [301, 1, 1, "", "var"], [302, 1, 1, "", "vstack"], [303, 2, 1, "", "width"], [304, 1, 1, "", "with_columns"], [305, 1, 1, "", "with_columns_seq"], [306, 1, 1, "", "with_row_count"], [307, 1, 1, "", "with_row_index"], [41, 1, 1, "", "write_avro"], [42, 1, 1, "", "write_clipboard"], [43, 1, 1, "", "write_csv"], [44, 1, 1, "", "write_database"], [45, 1, 1, "", "write_delta"], [46, 1, 1, "", "write_excel"], [47, 1, 1, "", "write_ipc"], [48, 1, 1, "", "write_ipc_stream"], [49, 1, 1, "", "write_json"], [50, 1, 1, "", "write_ndjson"], [51, 1, 1, "", "write_parquet"]], "polars.Expr": [[338, 1, 1, "", "abs"], [339, 1, 1, "", "add"], [340, 1, 1, "", "agg_groups"], [341, 1, 1, "", "alias"], [342, 1, 1, "", "all"], [343, 1, 1, "", "and_"], [344, 1, 1, "", "any"], [345, 1, 1, "", "append"], [346, 1, 1, "", "approx_n_unique"], [347, 1, 1, "", "arccos"], [348, 1, 1, "", "arccosh"], [349, 1, 1, "", "arcsin"], [350, 1, 1, "", "arcsinh"], [351, 1, 1, "", "arctan"], [352, 1, 1, "", "arctanh"], [353, 1, 1, "", "arg_max"], [354, 1, 1, "", "arg_min"], [355, 1, 1, "", "arg_sort"], [356, 1, 1, "", "arg_true"], [357, 1, 1, "", "arg_unique"], [382, 1, 1, "", "backward_fill"], [390, 1, 1, "", "bitwise_and"], [391, 1, 1, "", "bitwise_count_ones"], [392, 1, 1, "", "bitwise_count_zeros"], [393, 1, 1, "", "bitwise_leading_ones"], [394, 1, 1, "", "bitwise_leading_zeros"], [395, 1, 1, "", "bitwise_or"], [396, 1, 1, "", "bitwise_trailing_ones"], [397, 1, 1, "", "bitwise_trailing_zeros"], [398, 1, 1, "", "bitwise_xor"], [399, 1, 1, "", "bottom_k"], [400, 1, 1, "", "bottom_k_by"], [401, 1, 1, "", "cast"], [407, 1, 1, "", "cbrt"], [408, 1, 1, "", "ceil"], [409, 1, 1, "", "clip"], [410, 1, 1, "", "cos"], [411, 1, 1, "", "cosh"], [412, 1, 1, "", "cot"], [413, 1, 1, "", "count"], [414, 1, 1, "", "cum_count"], [415, 1, 1, "", "cum_max"], [416, 1, 1, "", "cum_min"], [417, 1, 1, "", "cum_prod"], [418, 1, 1, "", "cum_sum"], [419, 1, 1, "", "cumulative_eval"], [420, 1, 1, "", "cut"], [421, 1, 1, "", "degrees"], [422, 1, 1, "", "deserialize"], [423, 1, 1, "", "diff"], [424, 1, 1, "", "dot"], [425, 1, 1, "", "drop_nans"], [426, 1, 1, "", "drop_nulls"], [472, 1, 1, "", "entropy"], [473, 1, 1, "", "eq"], [474, 1, 1, "", "eq_missing"], [475, 1, 1, "", "ewm_mean"], [476, 1, 1, "", "ewm_mean_by"], [477, 1, 1, "", "ewm_std"], [478, 1, 1, "", "ewm_var"], [479, 1, 1, "", "exclude"], [480, 1, 1, "", "exp"], [481, 1, 1, "", "explode"], [482, 1, 1, "", "extend_constant"], [483, 1, 1, "", "fill_nan"], [484, 1, 1, "", "fill_null"], [485, 1, 1, "", "filter"], [486, 1, 1, "", "first"], [487, 1, 1, "", "flatten"], [488, 1, 1, "", "floor"], [489, 1, 1, "", "floordiv"], [490, 1, 1, "", "forward_fill"], [491, 1, 1, "", "from_json"], [492, 1, 1, "", "gather"], [493, 1, 1, "", "gather_every"], [494, 1, 1, "", "ge"], [495, 1, 1, "", "get"], [496, 1, 1, "", "gt"], [497, 1, 1, "", "has_nulls"], [498, 1, 1, "", "hash"], [499, 1, 1, "", "head"], [500, 1, 1, "", "hist"], [501, 1, 1, "", "implode"], [502, 1, 1, "", "index_of"], [503, 1, 1, "", "inspect"], [504, 1, 1, "", "interpolate"], [505, 1, 1, "", "interpolate_by"], [506, 1, 1, "", "is_between"], [507, 1, 1, "", "is_duplicated"], [508, 1, 1, "", "is_finite"], [509, 1, 1, "", "is_first_distinct"], [510, 1, 1, "", "is_in"], [511, 1, 1, "", "is_infinite"], [512, 1, 1, "", "is_last_distinct"], [513, 1, 1, "", "is_nan"], [514, 1, 1, "", "is_not_nan"], [515, 1, 1, "", "is_not_null"], [516, 1, 1, "", "is_null"], [517, 1, 1, "", "is_unique"], [518, 1, 1, "", "kurtosis"], [519, 1, 1, "", "last"], [520, 1, 1, "", "le"], [521, 1, 1, "", "len"], [522, 1, 1, "", "limit"], [563, 1, 1, "", "log"], [564, 1, 1, "", "log10"], [565, 1, 1, "", "log1p"], [566, 1, 1, "", "lower_bound"], [567, 1, 1, "", "lt"], [568, 1, 1, "", "map_batches"], [569, 1, 1, "", "map_elements"], [570, 1, 1, "", "max"], [571, 1, 1, "", "mean"], [572, 1, 1, "", "median"], [588, 1, 1, "", "min"], [589, 1, 1, "", "mod"], [590, 1, 1, "", "mode"], [591, 1, 1, "", "mul"], [592, 1, 1, "", "n_unique"], [602, 1, 1, "", "nan_max"], [603, 1, 1, "", "nan_min"], [604, 1, 1, "", "ne"], [605, 1, 1, "", "ne_missing"], [606, 1, 1, "", "neg"], [607, 1, 1, "", "not_"], [608, 1, 1, "", "null_count"], [609, 1, 1, "", "or_"], [610, 1, 1, "", "over"], [611, 1, 1, "", "pct_change"], [612, 1, 1, "", "peak_max"], [613, 1, 1, "", "peak_min"], [614, 1, 1, "", "pipe"], [615, 1, 1, "", "pow"], [616, 1, 1, "", "product"], [617, 1, 1, "", "qcut"], [618, 1, 1, "", "quantile"], [619, 1, 1, "", "radians"], [620, 1, 1, "", "rank"], [621, 1, 1, "", "rechunk"], [622, 1, 1, "", "reinterpret"], [623, 1, 1, "", "repeat_by"], [624, 1, 1, "", "replace"], [625, 1, 1, "", "replace_strict"], [626, 1, 1, "", "reshape"], [627, 1, 1, "", "reverse"], [628, 1, 1, "", "rle"], [629, 1, 1, "", "rle_id"], [630, 1, 1, "", "rolling"], [631, 1, 1, "", "rolling_map"], [632, 1, 1, "", "rolling_max"], [633, 1, 1, "", "rolling_max_by"], [634, 1, 1, "", "rolling_mean"], [635, 1, 1, "", "rolling_mean_by"], [636, 1, 1, "", "rolling_median"], [637, 1, 1, "", "rolling_median_by"], [638, 1, 1, "", "rolling_min"], [639, 1, 1, "", "rolling_min_by"], [640, 1, 1, "", "rolling_quantile"], [641, 1, 1, "", "rolling_quantile_by"], [642, 1, 1, "", "rolling_skew"], [643, 1, 1, "", "rolling_std"], [644, 1, 1, "", "rolling_std_by"], [645, 1, 1, "", "rolling_sum"], [646, 1, 1, "", "rolling_sum_by"], [647, 1, 1, "", "rolling_var"], [648, 1, 1, "", "rolling_var_by"], [649, 1, 1, "", "round"], [650, 1, 1, "", "round_sig_figs"], [651, 1, 1, "", "sample"], [652, 1, 1, "", "search_sorted"], [653, 1, 1, "", "set_sorted"], [654, 1, 1, "", "shift"], [655, 1, 1, "", "shrink_dtype"], [656, 1, 1, "", "shuffle"], [657, 1, 1, "", "sign"], [658, 1, 1, "", "sin"], [659, 1, 1, "", "sinh"], [660, 1, 1, "", "skew"], [661, 1, 1, "", "slice"], [662, 1, 1, "", "sort"], [663, 1, 1, "", "sort_by"], [664, 1, 1, "", "sqrt"], [665, 1, 1, "", "std"], [720, 1, 1, "", "sub"], [721, 1, 1, "", "sum"], [722, 1, 1, "", "tail"], [723, 1, 1, "", "tan"], [724, 1, 1, "", "tanh"], [725, 1, 1, "", "to_physical"], [726, 1, 1, "", "top_k"], [727, 1, 1, "", "top_k_by"], [728, 1, 1, "", "truediv"], [729, 1, 1, "", "unique"], [730, 1, 1, "", "unique_counts"], [731, 1, 1, "", "upper_bound"], [732, 1, 1, "", "value_counts"], [733, 1, 1, "", "var"], [734, 1, 1, "", "where"], [735, 1, 1, "", "xor"]], "polars.Expr.arr": [[358, 1, 1, "", "all"], [359, 1, 1, "", "any"], [360, 1, 1, "", "arg_max"], [361, 1, 1, "", "arg_min"], [362, 1, 1, "", "contains"], [363, 1, 1, "", "count_matches"], [364, 1, 1, "", "explode"], [365, 1, 1, "", "first"], [366, 1, 1, "", "get"], [367, 1, 1, "", "join"], [368, 1, 1, "", "last"], [369, 1, 1, "", "max"], [370, 1, 1, "", "median"], [371, 1, 1, "", "min"], [372, 1, 1, "", "n_unique"], [373, 1, 1, "", "reverse"], [374, 1, 1, "", "shift"], [375, 1, 1, "", "sort"], [376, 1, 1, "", "std"], [377, 1, 1, "", "sum"], [378, 1, 1, "", "to_list"], [379, 1, 1, "", "to_struct"], [380, 1, 1, "", "unique"], [381, 1, 1, "", "var"]], "polars.Expr.bin": [[383, 1, 1, "", "contains"], [384, 1, 1, "", "decode"], [385, 1, 1, "", "encode"], [386, 1, 1, "", "ends_with"], [387, 1, 1, "", "reinterpret"], [388, 1, 1, "", "size"], [389, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[402, 1, 1, "", "ends_with"], [403, 1, 1, "", "get_categories"], [404, 1, 1, "", "len_bytes"], [405, 1, 1, "", "len_chars"], [406, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[427, 1, 1, "", "add_business_days"], [428, 1, 1, "", "base_utc_offset"], [429, 1, 1, "", "cast_time_unit"], [430, 1, 1, "", "century"], [431, 1, 1, "", "combine"], [432, 1, 1, "", "convert_time_zone"], [433, 1, 1, "", "date"], [434, 1, 1, "", "datetime"], [435, 1, 1, "", "day"], [436, 1, 1, "", "dst_offset"], [437, 1, 1, "", "epoch"], [438, 1, 1, "", "hour"], [439, 1, 1, "", "is_leap_year"], [440, 1, 1, "", "iso_year"], [441, 1, 1, "", "microsecond"], [442, 1, 1, "", "millennium"], [443, 1, 1, "", "millisecond"], [444, 1, 1, "", "minute"], [445, 1, 1, "", "month"], [446, 1, 1, "", "month_end"], [447, 1, 1, "", "month_start"], [448, 1, 1, "", "nanosecond"], [449, 1, 1, "", "offset_by"], [450, 1, 1, "", "ordinal_day"], [451, 1, 1, "", "quarter"], [452, 1, 1, "", "replace"], [453, 1, 1, "", "replace_time_zone"], [454, 1, 1, "", "round"], [455, 1, 1, "", "second"], [456, 1, 1, "", "strftime"], [457, 1, 1, "", "time"], [458, 1, 1, "", "timestamp"], [459, 1, 1, "", "to_string"], [460, 1, 1, "", "total_days"], [461, 1, 1, "", "total_hours"], [462, 1, 1, "", "total_microseconds"], [463, 1, 1, "", "total_milliseconds"], [464, 1, 1, "", "total_minutes"], [465, 1, 1, "", "total_nanoseconds"], [466, 1, 1, "", "total_seconds"], [467, 1, 1, "", "truncate"], [468, 1, 1, "", "week"], [469, 1, 1, "", "weekday"], [470, 1, 1, "", "with_time_unit"], [471, 1, 1, "", "year"]], "polars.Expr.list": [[523, 1, 1, "", "all"], [524, 1, 1, "", "any"], [525, 1, 1, "", "arg_max"], [526, 1, 1, "", "arg_min"], [527, 1, 1, "", "concat"], [528, 1, 1, "", "contains"], [529, 1, 1, "", "count_matches"], [530, 1, 1, "", "diff"], [531, 1, 1, "", "drop_nulls"], [532, 1, 1, "", "eval"], [533, 1, 1, "", "explode"], [534, 1, 1, "", "first"], [535, 1, 1, "", "gather"], [536, 1, 1, "", "gather_every"], [537, 1, 1, "", "get"], [538, 1, 1, "", "head"], [539, 1, 1, "", "join"], [540, 1, 1, "", "last"], [541, 1, 1, "", "len"], [542, 1, 1, "", "max"], [543, 1, 1, "", "mean"], [544, 1, 1, "", "median"], [545, 1, 1, "", "min"], [546, 1, 1, "", "n_unique"], [547, 1, 1, "", "reverse"], [548, 1, 1, "", "sample"], [549, 1, 1, "", "set_difference"], [550, 1, 1, "", "set_intersection"], [551, 1, 1, "", "set_symmetric_difference"], [552, 1, 1, "", "set_union"], [553, 1, 1, "", "shift"], [554, 1, 1, "", "slice"], [555, 1, 1, "", "sort"], [556, 1, 1, "", "std"], [557, 1, 1, "", "sum"], [558, 1, 1, "", "tail"], [559, 1, 1, "", "to_array"], [560, 1, 1, "", "to_struct"], [561, 1, 1, "", "unique"], [562, 1, 1, "", "var"]], "polars.Expr.meta": [[573, 1, 1, "", "eq"], [574, 1, 1, "", "has_multiple_outputs"], [575, 1, 1, "", "is_column"], [576, 1, 1, "", "is_column_selection"], [577, 1, 1, "", "is_literal"], [578, 1, 1, "", "is_regex_projection"], [579, 1, 1, "", "ne"], [580, 1, 1, "", "output_name"], [581, 1, 1, "", "pop"], [582, 1, 1, "", "root_names"], [583, 1, 1, "", "serialize"], [584, 1, 1, "", "show_graph"], [585, 1, 1, "", "tree_format"], [586, 1, 1, "", "undo_aliases"], [587, 1, 1, "", "write_json"]], "polars.Expr.name": [[593, 1, 1, "", "keep"], [594, 1, 1, "", "map"], [595, 1, 1, "", "map_fields"], [596, 1, 1, "", "prefix"], [597, 1, 1, "", "prefix_fields"], [598, 1, 1, "", "suffix"], [599, 1, 1, "", "suffix_fields"], [600, 1, 1, "", "to_lowercase"], [601, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[666, 1, 1, "", "concat"], [667, 1, 1, "", "contains"], [668, 1, 1, "", "contains_any"], [669, 1, 1, "", "count_matches"], [670, 1, 1, "", "decode"], [671, 1, 1, "", "encode"], [672, 1, 1, "", "ends_with"], [673, 1, 1, "", "escape_regex"], [674, 1, 1, "", "explode"], [675, 1, 1, "", "extract"], [676, 1, 1, "", "extract_all"], [677, 1, 1, "", "extract_groups"], [678, 1, 1, "", "extract_many"], [679, 1, 1, "", "find"], [680, 1, 1, "", "find_many"], [681, 1, 1, "", "head"], [682, 1, 1, "", "join"], [683, 1, 1, "", "json_decode"], [684, 1, 1, "", "json_path_match"], [685, 1, 1, "", "len_bytes"], [686, 1, 1, "", "len_chars"], [687, 1, 1, "", "normalize"], [688, 1, 1, "", "pad_end"], [689, 1, 1, "", "pad_start"], [690, 1, 1, "", "replace"], [691, 1, 1, "", "replace_all"], [692, 1, 1, "", "replace_many"], [693, 1, 1, "", "reverse"], [694, 1, 1, "", "slice"], [695, 1, 1, "", "split"], [696, 1, 1, "", "split_exact"], [697, 1, 1, "", "splitn"], [698, 1, 1, "", "starts_with"], [699, 1, 1, "", "strip_chars"], [700, 1, 1, "", "strip_chars_end"], [701, 1, 1, "", "strip_chars_start"], [702, 1, 1, "", "strip_prefix"], [703, 1, 1, "", "strip_suffix"], [704, 1, 1, "", "strptime"], [705, 1, 1, "", "tail"], [706, 1, 1, "", "to_date"], [707, 1, 1, "", "to_datetime"], [708, 1, 1, "", "to_decimal"], [709, 1, 1, "", "to_integer"], [710, 1, 1, "", "to_lowercase"], [711, 1, 1, "", "to_time"], [712, 1, 1, "", "to_titlecase"], [713, 1, 1, "", "to_uppercase"], [714, 1, 1, "", "zfill"]], "polars.Expr.struct": [[715, 1, 1, "", "field"], [716, 1, 1, "", "json_encode"], [717, 1, 1, "", "rename_fields"], [718, 1, 1, "", "unnest"], [719, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[835, 1, 1, "", "approx_n_unique"], [836, 1, 1, "", "bottom_k"], [837, 1, 1, "", "cache"], [838, 1, 1, "", "cast"], [839, 1, 1, "", "clear"], [840, 1, 1, "", "clone"], [841, 1, 1, "", "collect"], [842, 1, 1, "", "collect_async"], [843, 1, 1, "", "collect_schema"], [844, 2, 1, "", "columns"], [845, 1, 1, "", "count"], [846, 1, 1, "", "describe"], [847, 1, 1, "", "deserialize"], [848, 1, 1, "", "drop"], [849, 1, 1, "", "drop_nans"], [850, 1, 1, "", "drop_nulls"], [851, 2, 1, "", "dtypes"], [852, 1, 1, "", "explain"], [853, 1, 1, "", "explode"], [854, 1, 1, "", "fill_nan"], [855, 1, 1, "", "fill_null"], [856, 1, 1, "", "filter"], [857, 1, 1, "", "first"], [858, 1, 1, "", "gather_every"], [859, 1, 1, "", "group_by"], [860, 1, 1, "", "group_by_dynamic"], [861, 1, 1, "", "head"], [862, 1, 1, "", "inspect"], [863, 1, 1, "", "interpolate"], [864, 1, 1, "", "join"], [865, 1, 1, "", "join_asof"], [866, 1, 1, "", "join_where"], [867, 1, 1, "", "last"], [868, 1, 1, "", "lazy"], [869, 1, 1, "", "limit"], [870, 1, 1, "", "map_batches"], [871, 1, 1, "", "max"], [872, 1, 1, "", "mean"], [873, 1, 1, "", "median"], [874, 1, 1, "", "melt"], [875, 1, 1, "", "merge_sorted"], [876, 1, 1, "", "min"], [877, 1, 1, "", "null_count"], [878, 1, 1, "", "pipe"], [879, 1, 1, "", "profile"], [880, 1, 1, "", "quantile"], [881, 1, 1, "", "rename"], [882, 1, 1, "", "reverse"], [883, 1, 1, "", "rolling"], [884, 2, 1, "", "schema"], [885, 1, 1, "", "select"], [886, 1, 1, "", "select_seq"], [887, 1, 1, "", "serialize"], [888, 1, 1, "", "set_sorted"], [889, 1, 1, "", "shift"], [890, 1, 1, "", "show_graph"], [52, 1, 1, "", "sink_csv"], [53, 1, 1, "", "sink_ipc"], [54, 1, 1, "", "sink_ndjson"], [55, 1, 1, "", "sink_parquet"], [891, 1, 1, "", "slice"], [892, 1, 1, "", "sort"], [893, 1, 1, "", "sql"], [894, 1, 1, "", "std"], [895, 1, 1, "", "sum"], [896, 1, 1, "", "tail"], [897, 1, 1, "", "top_k"], [898, 1, 1, "", "unique"], [899, 1, 1, "", "unnest"], [900, 1, 1, "", "unpivot"], [901, 1, 1, "", "update"], [902, 1, 1, "", "var"], [903, 2, 1, "", "width"], [904, 1, 1, "", "with_columns"], [905, 1, 1, "", "with_columns_seq"], [906, 1, 1, "", "with_context"], [907, 1, 1, "", "with_row_count"], [908, 1, 1, "", "with_row_index"]], "polars.SQLContext": [[1357, 1, 1, "", "__enter__"], [1357, 1, 1, "", "__exit__"], [1357, 1, 1, "", "__init__"], [1338, 1, 1, "", "execute"], [1339, 1, 1, "", "execute_global"], [1340, 1, 1, "", "register"], [1341, 1, 1, "", "register_globals"], [1342, 1, 1, "", "register_many"], [1343, 1, 1, "", "tables"], [1344, 1, 1, "", "unregister"]], "polars.Series": [[942, 1, 1, "", "__array__"], [943, 1, 1, "", "__arrow_c_stream__"], [944, 1, 1, "", "__getitem__"], [945, 1, 1, "", "abs"], [946, 1, 1, "", "alias"], [947, 1, 1, "", "all"], [948, 1, 1, "", "any"], [949, 1, 1, "", "append"], [950, 1, 1, "", "approx_n_unique"], [951, 1, 1, "", "arccos"], [952, 1, 1, "", "arccosh"], [953, 1, 1, "", "arcsin"], [954, 1, 1, "", "arcsinh"], [955, 1, 1, "", "arctan"], [956, 1, 1, "", "arctanh"], [957, 1, 1, "", "arg_max"], [958, 1, 1, "", "arg_min"], [959, 1, 1, "", "arg_sort"], [960, 1, 1, "", "arg_true"], [961, 1, 1, "", "arg_unique"], [993, 1, 1, "", "bitwise_and"], [994, 1, 1, "", "bitwise_count_ones"], [995, 1, 1, "", "bitwise_count_zeros"], [996, 1, 1, "", "bitwise_leading_ones"], [997, 1, 1, "", "bitwise_leading_zeros"], [998, 1, 1, "", "bitwise_or"], [999, 1, 1, "", "bitwise_trailing_ones"], [1000, 1, 1, "", "bitwise_trailing_zeros"], [1001, 1, 1, "", "bitwise_xor"], [1002, 1, 1, "", "bottom_k"], [1003, 1, 1, "", "cast"], [1012, 1, 1, "", "cbrt"], [1013, 1, 1, "", "ceil"], [1014, 1, 1, "", "chunk_lengths"], [1015, 1, 1, "", "clear"], [1016, 1, 1, "", "clip"], [1017, 1, 1, "", "clone"], [1018, 1, 1, "", "cos"], [1019, 1, 1, "", "cosh"], [1020, 1, 1, "", "cot"], [1021, 1, 1, "", "count"], [1022, 1, 1, "", "cum_count"], [1023, 1, 1, "", "cum_max"], [1024, 1, 1, "", "cum_min"], [1025, 1, 1, "", "cum_prod"], [1026, 1, 1, "", "cum_sum"], [1027, 1, 1, "", "cumulative_eval"], [1028, 1, 1, "", "cut"], [1029, 1, 1, "", "describe"], [1030, 1, 1, "", "diff"], [1031, 1, 1, "", "dot"], [1032, 1, 1, "", "drop_nans"], [1033, 1, 1, "", "drop_nulls"], [1083, 2, 1, "", "dtype"], [1084, 1, 1, "", "entropy"], [1085, 1, 1, "", "eq"], [1086, 1, 1, "", "eq_missing"], [1087, 1, 1, "", "equals"], [1088, 1, 1, "", "estimated_size"], [1089, 1, 1, "", "ewm_mean"], [1090, 1, 1, "", "ewm_mean_by"], [1091, 1, 1, "", "ewm_std"], [1092, 1, 1, "", "ewm_var"], [1093, 1, 1, "", "exp"], [1094, 1, 1, "", "explode"], [1095, 1, 1, "", "extend"], [1096, 1, 1, "", "extend_constant"], [1097, 1, 1, "", "fill_nan"], [1098, 1, 1, "", "fill_null"], [1099, 1, 1, "", "filter"], [1100, 1, 1, "", "first"], [1101, 2, 1, "", "flags"], [1102, 1, 1, "", "floor"], [1103, 1, 1, "", "gather"], [1104, 1, 1, "", "gather_every"], [1105, 1, 1, "", "ge"], [1106, 1, 1, "", "get_chunks"], [1107, 1, 1, "", "gt"], [1108, 1, 1, "", "has_nulls"], [1109, 1, 1, "", "has_validity"], [1110, 1, 1, "", "hash"], [1111, 1, 1, "", "head"], [1112, 1, 1, "", "hist"], [1113, 1, 1, "", "implode"], [1114, 1, 1, "", "index_of"], [1115, 1, 1, "", "interpolate"], [1116, 1, 1, "", "interpolate_by"], [1117, 1, 1, "", "is_between"], [1118, 1, 1, "", "is_duplicated"], [1119, 1, 1, "", "is_empty"], [1120, 1, 1, "", "is_finite"], [1121, 1, 1, "", "is_first_distinct"], [1122, 1, 1, "", "is_in"], [1123, 1, 1, "", "is_infinite"], [1124, 1, 1, "", "is_last_distinct"], [1125, 1, 1, "", "is_nan"], [1126, 1, 1, "", "is_not_nan"], [1127, 1, 1, "", "is_not_null"], [1128, 1, 1, "", "is_null"], [1129, 1, 1, "", "is_sorted"], [1130, 1, 1, "", "is_unique"], [1131, 1, 1, "", "item"], [1132, 1, 1, "", "kurtosis"], [1133, 1, 1, "", "last"], [1134, 1, 1, "", "le"], [1135, 1, 1, "", "len"], [1136, 1, 1, "", "limit"], [1177, 1, 1, "", "log"], [1178, 1, 1, "", "log10"], [1179, 1, 1, "", "log1p"], [1180, 1, 1, "", "lower_bound"], [1181, 1, 1, "", "lt"], [1182, 1, 1, "", "map_elements"], [1183, 1, 1, "", "max"], [1184, 1, 1, "", "mean"], [1185, 1, 1, "", "median"], [1186, 1, 1, "", "min"], [1187, 1, 1, "", "mode"], [1188, 1, 1, "", "n_chunks"], [1189, 1, 1, "", "n_unique"], [1190, 2, 1, "", "name"], [1191, 1, 1, "", "nan_max"], [1192, 1, 1, "", "nan_min"], [1193, 1, 1, "", "ne"], [1194, 1, 1, "", "ne_missing"], [1195, 1, 1, "", "new_from_index"], [1196, 1, 1, "", "not_"], [1197, 1, 1, "", "null_count"], [1198, 1, 1, "", "pct_change"], [1199, 1, 1, "", "peak_max"], [1200, 1, 1, "", "peak_min"], [1334, 2, 1, "", "plot"], [1201, 1, 1, "", "pow"], [1202, 1, 1, "", "product"], [1203, 1, 1, "", "qcut"], [1204, 1, 1, "", "quantile"], [1205, 1, 1, "", "rank"], [1206, 1, 1, "", "rechunk"], [1207, 1, 1, "", "reinterpret"], [1208, 1, 1, "", "rename"], [1209, 1, 1, "", "replace"], [1210, 1, 1, "", "replace_strict"], [1211, 1, 1, "", "reshape"], [1212, 1, 1, "", "reverse"], [1213, 1, 1, "", "rle"], [1214, 1, 1, "", "rle_id"], [1215, 1, 1, "", "rolling_map"], [1216, 1, 1, "", "rolling_max"], [1217, 1, 1, "", "rolling_mean"], [1218, 1, 1, "", "rolling_median"], [1219, 1, 1, "", "rolling_min"], [1220, 1, 1, "", "rolling_quantile"], [1221, 1, 1, "", "rolling_skew"], [1222, 1, 1, "", "rolling_std"], [1223, 1, 1, "", "rolling_sum"], [1224, 1, 1, "", "rolling_var"], [1225, 1, 1, "", "round"], [1226, 1, 1, "", "round_sig_figs"], [1227, 1, 1, "", "sample"], [1228, 1, 1, "", "scatter"], [1229, 1, 1, "", "search_sorted"], [1230, 1, 1, "", "set"], [1231, 1, 1, "", "set_sorted"], [1232, 2, 1, "", "shape"], [1233, 1, 1, "", "shift"], [1234, 1, 1, "", "shrink_dtype"], [1235, 1, 1, "", "shrink_to_fit"], [1236, 1, 1, "", "shuffle"], [1237, 1, 1, "", "sign"], [1238, 1, 1, "", "sin"], [1239, 1, 1, "", "sinh"], [1240, 1, 1, "", "skew"], [1241, 1, 1, "", "slice"], [1242, 1, 1, "", "sort"], [1243, 1, 1, "", "sqrt"], [1244, 1, 1, "", "std"], [1300, 1, 1, "", "sum"], [1301, 1, 1, "", "tail"], [1302, 1, 1, "", "tan"], [1303, 1, 1, "", "tanh"], [1304, 1, 1, "", "to_arrow"], [1305, 1, 1, "", "to_dummies"], [1306, 1, 1, "", "to_frame"], [1307, 1, 1, "", "to_init_repr"], [1308, 1, 1, "", "to_jax"], [1309, 1, 1, "", "to_list"], [1310, 1, 1, "", "to_numpy"], [1311, 1, 1, "", "to_pandas"], [1312, 1, 1, "", "to_physical"], [1313, 1, 1, "", "to_torch"], [1314, 1, 1, "", "top_k"], [1315, 1, 1, "", "unique"], [1316, 1, 1, "", "unique_counts"], [1317, 1, 1, "", "upper_bound"], [1318, 1, 1, "", "value_counts"], [1319, 1, 1, "", "var"], [1320, 1, 1, "", "zip_with"]], "polars.Series.arr": [[962, 1, 1, "", "all"], [963, 1, 1, "", "any"], [964, 1, 1, "", "arg_max"], [965, 1, 1, "", "arg_min"], [966, 1, 1, "", "contains"], [967, 1, 1, "", "count_matches"], [968, 1, 1, "", "explode"], [969, 1, 1, "", "first"], [970, 1, 1, "", "get"], [971, 1, 1, "", "join"], [972, 1, 1, "", "last"], [973, 1, 1, "", "max"], [974, 1, 1, "", "median"], [975, 1, 1, "", "min"], [976, 1, 1, "", "n_unique"], [977, 1, 1, "", "reverse"], [978, 1, 1, "", "shift"], [979, 1, 1, "", "sort"], [980, 1, 1, "", "std"], [981, 1, 1, "", "sum"], [982, 1, 1, "", "to_list"], [983, 1, 1, "", "to_struct"], [984, 1, 1, "", "unique"], [985, 1, 1, "", "var"]], "polars.Series.bin": [[986, 1, 1, "", "contains"], [987, 1, 1, "", "decode"], [988, 1, 1, "", "encode"], [989, 1, 1, "", "ends_with"], [990, 1, 1, "", "reinterpret"], [991, 1, 1, "", "size"], [992, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1004, 1, 1, "", "ends_with"], [1005, 1, 1, "", "get_categories"], [1006, 1, 1, "", "is_local"], [1007, 1, 1, "", "len_bytes"], [1008, 1, 1, "", "len_chars"], [1009, 1, 1, "", "starts_with"], [1010, 1, 1, "", "to_local"], [1011, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1034, 1, 1, "", "add_business_days"], [1035, 1, 1, "", "base_utc_offset"], [1036, 1, 1, "", "cast_time_unit"], [1037, 1, 1, "", "century"], [1038, 1, 1, "", "combine"], [1039, 1, 1, "", "convert_time_zone"], [1040, 1, 1, "", "date"], [1041, 1, 1, "", "datetime"], [1042, 1, 1, "", "day"], [1043, 1, 1, "", "dst_offset"], [1044, 1, 1, "", "epoch"], [1045, 1, 1, "", "hour"], [1046, 1, 1, "", "is_leap_year"], [1047, 1, 1, "", "iso_year"], [1048, 1, 1, "", "max"], [1049, 1, 1, "", "mean"], [1050, 1, 1, "", "median"], [1051, 1, 1, "", "microsecond"], [1052, 1, 1, "", "millennium"], [1053, 1, 1, "", "millisecond"], [1054, 1, 1, "", "min"], [1055, 1, 1, "", "minute"], [1056, 1, 1, "", "month"], [1057, 1, 1, "", "month_end"], [1058, 1, 1, "", "month_start"], [1059, 1, 1, "", "nanosecond"], [1060, 1, 1, "", "offset_by"], [1061, 1, 1, "", "ordinal_day"], [1062, 1, 1, "", "quarter"], [1063, 1, 1, "", "replace"], [1064, 1, 1, "", "replace_time_zone"], [1065, 1, 1, "", "round"], [1066, 1, 1, "", "second"], [1067, 1, 1, "", "strftime"], [1068, 1, 1, "", "time"], [1069, 1, 1, "", "timestamp"], [1070, 1, 1, "", "to_string"], [1071, 1, 1, "", "total_days"], [1072, 1, 1, "", "total_hours"], [1073, 1, 1, "", "total_microseconds"], [1074, 1, 1, "", "total_milliseconds"], [1075, 1, 1, "", "total_minutes"], [1076, 1, 1, "", "total_nanoseconds"], [1077, 1, 1, "", "total_seconds"], [1078, 1, 1, "", "truncate"], [1079, 1, 1, "", "week"], [1080, 1, 1, "", "weekday"], [1081, 1, 1, "", "with_time_unit"], [1082, 1, 1, "", "year"]], "polars.Series.list": [[1137, 1, 1, "", "all"], [1138, 1, 1, "", "any"], [1139, 1, 1, "", "arg_max"], [1140, 1, 1, "", "arg_min"], [1141, 1, 1, "", "concat"], [1142, 1, 1, "", "contains"], [1143, 1, 1, "", "count_matches"], [1144, 1, 1, "", "diff"], [1145, 1, 1, "", "drop_nulls"], [1146, 1, 1, "", "eval"], [1147, 1, 1, "", "explode"], [1148, 1, 1, "", "first"], [1149, 1, 1, "", "gather"], [1150, 1, 1, "", "gather_every"], [1151, 1, 1, "", "get"], [1152, 1, 1, "", "head"], [1153, 1, 1, "", "join"], [1154, 1, 1, "", "last"], [1155, 1, 1, "", "len"], [1156, 1, 1, "", "max"], [1157, 1, 1, "", "mean"], [1158, 1, 1, "", "median"], [1159, 1, 1, "", "min"], [1160, 1, 1, "", "n_unique"], [1161, 1, 1, "", "reverse"], [1162, 1, 1, "", "sample"], [1163, 1, 1, "", "set_difference"], [1164, 1, 1, "", "set_intersection"], [1165, 1, 1, "", "set_symmetric_difference"], [1166, 1, 1, "", "set_union"], [1167, 1, 1, "", "shift"], [1168, 1, 1, "", "slice"], [1169, 1, 1, "", "sort"], [1170, 1, 1, "", "std"], [1171, 1, 1, "", "sum"], [1172, 1, 1, "", "tail"], [1173, 1, 1, "", "to_array"], [1174, 1, 1, "", "to_struct"], [1175, 1, 1, "", "unique"], [1176, 1, 1, "", "var"]], "polars.Series.str": [[1245, 1, 1, "", "concat"], [1246, 1, 1, "", "contains"], [1247, 1, 1, "", "contains_any"], [1248, 1, 1, "", "count_matches"], [1249, 1, 1, "", "decode"], [1250, 1, 1, "", "encode"], [1251, 1, 1, "", "ends_with"], [1252, 1, 1, "", "escape_regex"], [1253, 1, 1, "", "explode"], [1254, 1, 1, "", "extract"], [1255, 1, 1, "", "extract_all"], [1256, 1, 1, "", "extract_groups"], [1257, 1, 1, "", "extract_many"], [1258, 1, 1, "", "find"], [1259, 1, 1, "", "find_many"], [1260, 1, 1, "", "head"], [1261, 1, 1, "", "join"], [1262, 1, 1, "", "json_decode"], [1263, 1, 1, "", "json_path_match"], [1264, 1, 1, "", "len_bytes"], [1265, 1, 1, "", "len_chars"], [1266, 1, 1, "", "normalize"], [1267, 1, 1, "", "pad_end"], [1268, 1, 1, "", "pad_start"], [1269, 1, 1, "", "replace"], [1270, 1, 1, "", "replace_all"], [1271, 1, 1, "", "replace_many"], [1272, 1, 1, "", "reverse"], [1273, 1, 1, "", "slice"], [1274, 1, 1, "", "split"], [1275, 1, 1, "", "split_exact"], [1276, 1, 1, "", "splitn"], [1277, 1, 1, "", "starts_with"], [1278, 1, 1, "", "strip_chars"], [1279, 1, 1, "", "strip_chars_end"], [1280, 1, 1, "", "strip_chars_start"], [1281, 1, 1, "", "strip_prefix"], [1282, 1, 1, "", "strip_suffix"], [1283, 1, 1, "", "strptime"], [1284, 1, 1, "", "tail"], [1285, 1, 1, "", "to_date"], [1286, 1, 1, "", "to_datetime"], [1287, 1, 1, "", "to_decimal"], [1288, 1, 1, "", "to_integer"], [1289, 1, 1, "", "to_lowercase"], [1290, 1, 1, "", "to_time"], [1291, 1, 1, "", "to_titlecase"], [1292, 1, 1, "", "to_uppercase"], [1293, 1, 1, "", "zfill"]], "polars.Series.struct": [[1294, 1, 1, "", "field"], [1295, 3, 1, "", "fields"], [1296, 1, 1, "", "json_encode"], [1297, 1, 1, "", "rename_fields"], [1298, 3, 1, "", "schema"], [1299, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.api": [[58, 4, 1, "", "register_dataframe_namespace"], [59, 4, 1, "", "register_expr_namespace"], [60, 4, 1, "", "register_lazyframe_namespace"], [61, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[308, 1, 1, "", "__iter__"], [309, 1, 1, "", "agg"], [310, 1, 1, "", "all"], [311, 1, 1, "", "count"], [312, 1, 1, "", "first"], [313, 1, 1, "", "head"], [314, 1, 1, "", "last"], [315, 1, 1, "", "len"], [316, 1, 1, "", "map_groups"], [317, 1, 1, "", "max"], [318, 1, 1, "", "mean"], [319, 1, 1, "", "median"], [320, 1, 1, "", "min"], [321, 1, 1, "", "n_unique"], [322, 1, 1, "", "quantile"], [323, 1, 1, "", "sum"], [324, 1, 1, "", "tail"]], "polars.datatypes": [[66, 0, 1, "", "Array"], [67, 0, 1, "", "Binary"], [68, 0, 1, "", "Boolean"], [69, 0, 1, "", "Categorical"], [70, 0, 1, "", "DataType"], [71, 0, 1, "", "Date"], [72, 0, 1, "", "Datetime"], [73, 0, 1, "", "Decimal"], [74, 0, 1, "", "Duration"], [75, 0, 1, "", "Enum"], [76, 0, 1, "", "Field"], [77, 0, 1, "", "Float32"], [78, 0, 1, "", "Float64"], [79, 0, 1, "", "Int128"], [80, 0, 1, "", "Int16"], [81, 0, 1, "", "Int32"], [82, 0, 1, "", "Int64"], [83, 0, 1, "", "Int8"], [84, 0, 1, "", "List"], [85, 0, 1, "", "Null"], [86, 0, 1, "", "Object"], [87, 0, 1, "", "String"], [88, 0, 1, "", "Struct"], [89, 0, 1, "", "Time"], [90, 0, 1, "", "UInt16"], [91, 0, 1, "", "UInt32"], [92, 0, 1, "", "UInt64"], [93, 0, 1, "", "UInt8"], [94, 0, 1, "", "Unknown"], [95, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[69, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[83, 1, 1, "", "__init__"]], "polars.datatypes.List": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[86, 1, 1, "", "__init__"]], "polars.datatypes.String": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[93, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[94, 1, 1, "", "__init__"]], "polars.exceptions": [[99, 5, 1, "", "CategoricalRemappingWarning"], [100, 5, 1, "", "ChronoFormatWarning"], [101, 5, 1, "", "ColumnNotFoundError"], [102, 5, 1, "", "ComputeError"], [103, 5, 1, "", "CustomUFuncWarning"], [104, 5, 1, "", "DataOrientationWarning"], [105, 5, 1, "", "DuplicateError"], [106, 5, 1, "", "InvalidOperationError"], [107, 5, 1, "", "MapWithoutReturnDtypeWarning"], [108, 5, 1, "", "ModuleUpgradeRequiredError"], [109, 5, 1, "", "NoDataError"], [110, 5, 1, "", "NoRowsReturnedError"], [111, 5, 1, "", "OutOfBoundsError"], [112, 5, 1, "", "PanicException"], [113, 5, 1, "", "ParameterCollisionError"], [114, 5, 1, "", "PerformanceWarning"], [115, 5, 1, "", "PolarsError"], [116, 5, 1, "", "PolarsInefficientMapWarning"], [117, 5, 1, "", "PolarsWarning"], [118, 5, 1, "", "RowsError"], [119, 5, 1, "", "SQLInterfaceError"], [120, 5, 1, "", "SQLSyntaxError"], [121, 5, 1, "", "SchemaError"], [122, 5, 1, "", "SchemaFieldNotFoundError"], [123, 5, 1, "", "ShapeError"], [124, 5, 1, "", "StringCacheMismatchError"], [125, 5, 1, "", "StructFieldNotFoundError"], [126, 5, 1, "", "TooManyRowsReturnedError"], [127, 5, 1, "", "UnstableWarning"], [128, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[138, 1, 1, "", "next_batches"]], "polars.io.plugins": [[139, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[909, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[909, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[910, 1, 1, "", "agg"], [911, 1, 1, "", "all"], [912, 1, 1, "", "count"], [913, 1, 1, "", "first"], [914, 1, 1, "", "head"], [915, 1, 1, "", "last"], [916, 1, 1, "", "len"], [917, 1, 1, "", "map_groups"], [918, 1, 1, "", "max"], [919, 1, 1, "", "mean"], [920, 1, 1, "", "median"], [921, 1, 1, "", "min"], [922, 1, 1, "", "n_unique"], [923, 1, 1, "", "quantile"], [924, 1, 1, "", "sum"], [925, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[926, 1, 1, "", "cancel"], [927, 1, 1, "", "fetch"], [928, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[141, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[940, 4, 1, "", "all"], [940, 4, 1, "", "alpha"], [940, 4, 1, "", "alphanumeric"], [940, 4, 1, "", "binary"], [940, 4, 1, "", "boolean"], [940, 4, 1, "", "by_dtype"], [940, 4, 1, "", "by_index"], [940, 4, 1, "", "by_name"], [940, 4, 1, "", "categorical"], [940, 4, 1, "", "contains"], [940, 4, 1, "", "date"], [940, 4, 1, "", "datetime"], [940, 4, 1, "", "decimal"], [940, 4, 1, "", "digit"], [940, 4, 1, "", "duration"], [940, 4, 1, "", "ends_with"], [940, 4, 1, "", "exclude"], [940, 4, 1, "", "expand_selector"], [940, 4, 1, "", "first"], [940, 4, 1, "", "float"], [940, 4, 1, "", "integer"], [940, 4, 1, "", "is_selector"], [940, 4, 1, "", "last"], [940, 4, 1, "", "matches"], [940, 4, 1, "", "numeric"], [940, 4, 1, "", "signed_integer"], [940, 4, 1, "", "starts_with"], [940, 4, 1, "", "string"], [940, 4, 1, "", "temporal"], [940, 4, 1, "", "time"], [940, 4, 1, "", "unsigned_integer"]], "polars.testing": [[167, 4, 1, "", "assert_frame_equal"], [168, 4, 1, "", "assert_frame_not_equal"], [169, 4, 1, "", "assert_series_equal"], [170, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[171, 0, 1, "", "column"], [172, 4, 1, "", "columns"], [173, 4, 1, "", "create_list_strategy"], [174, 4, 1, "", "dataframes"], [175, 4, 1, "", "dtypes"], [176, 4, 1, "", "lists"], [177, 4, 1, "", "load_profile"], [178, 4, 1, "", "series"], [179, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[171, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 17, 43, 44, 45, 46, 51, 52, 61, 66, 76, 88, 98, 100, 106, 129, 136, 139, 144, 145, 146, 147, 149, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 178, 191, 192, 203, 204, 207, 212, 215, 220, 221, 226, 232, 235, 236, 246, 253, 255, 260, 262, 265, 268, 269, 276, 285, 288, 293, 295, 296, 297, 298, 299, 304, 305, 330, 367, 400, 432, 437, 456, 459, 479, 485, 489, 502, 518, 539, 568, 569, 581, 590, 595, 602, 603, 610, 611, 622, 629, 663, 667, 675, 676, 677, 679, 681, 690, 691, 694, 695, 697, 704, 705, 706, 707, 711, 715, 717, 719, 727, 736, 737, 738, 739, 744, 751, 754, 757, 758, 767, 768, 770, 771, 777, 781, 782, 783, 784, 786, 788, 789, 791, 798, 800, 802, 803, 804, 810, 816, 820, 836, 838, 849, 850, 859, 860, 864, 865, 874, 885, 886, 892, 897, 898, 899, 900, 901, 904, 905, 917, 934, 939, 940, 944, 945, 946, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1057, 1058, 1061, 1063, 1065, 1066, 1067, 1070, 1078, 1080, 1081, 1082, 1083, 1088, 1089, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1106, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1329, 1334, 1338, 1342, 1345, 1352, 1353], "0": [1, 13, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 44, 45, 46, 51, 55, 57, 58, 59, 61, 65, 66, 73, 84, 130, 140, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 166, 171, 172, 173, 174, 175, 176, 178, 181, 188, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 226, 227, 231, 233, 234, 235, 238, 240, 242, 243, 244, 245, 246, 249, 250, 251, 252, 255, 256, 257, 260, 262, 264, 265, 266, 267, 268, 275, 276, 277, 278, 280, 285, 286, 287, 288, 289, 290, 292, 294, 298, 300, 301, 304, 306, 307, 309, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 330, 333, 334, 338, 340, 341, 343, 347, 348, 349, 350, 351, 352, 355, 356, 357, 360, 361, 363, 366, 376, 379, 381, 388, 390, 395, 398, 401, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 426, 427, 433, 434, 438, 441, 443, 444, 448, 452, 455, 457, 459, 462, 463, 465, 466, 470, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 488, 489, 491, 493, 494, 496, 498, 500, 504, 505, 508, 511, 513, 514, 515, 516, 518, 520, 525, 526, 529, 532, 535, 536, 537, 543, 544, 556, 560, 562, 563, 564, 565, 567, 568, 570, 571, 572, 576, 581, 584, 587, 588, 589, 591, 593, 602, 603, 604, 605, 606, 608, 609, 611, 614, 615, 617, 618, 619, 620, 624, 625, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 657, 658, 659, 660, 664, 665, 666, 669, 674, 675, 676, 679, 680, 719, 720, 721, 723, 724, 725, 728, 733, 734, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 755, 762, 766, 769, 775, 776, 778, 779, 782, 785, 786, 787, 791, 793, 794, 798, 799, 806, 807, 808, 809, 810, 811, 816, 820, 835, 838, 839, 840, 843, 845, 846, 848, 849, 851, 852, 854, 855, 856, 858, 859, 860, 863, 864, 868, 870, 873, 874, 877, 879, 880, 884, 885, 890, 892, 893, 894, 902, 904, 906, 907, 908, 910, 912, 913, 915, 917, 918, 919, 920, 921, 922, 923, 924, 934, 939, 940, 944, 951, 952, 953, 954, 955, 956, 957, 959, 961, 964, 970, 980, 983, 985, 991, 1003, 1010, 1012, 1013, 1015, 1018, 1019, 1020, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1041, 1045, 1049, 1050, 1051, 1053, 1055, 1059, 1063, 1066, 1070, 1073, 1074, 1076, 1077, 1081, 1084, 1089, 1090, 1091, 1092, 1097, 1102, 1104, 1109, 1110, 1112, 1115, 1116, 1120, 1123, 1125, 1126, 1127, 1128, 1131, 1132, 1139, 1140, 1143, 1146, 1149, 1150, 1151, 1157, 1158, 1170, 1174, 1176, 1177, 1178, 1179, 1180, 1184, 1185, 1191, 1192, 1198, 1201, 1203, 1204, 1205, 1209, 1210, 1214, 1215, 1217, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1229, 1237, 1238, 1239, 1240, 1243, 1244, 1245, 1248, 1253, 1254, 1255, 1258, 1259, 1263, 1269, 1302, 1303, 1305, 1308, 1310, 1311, 1312, 1313, 1317, 1319, 1329, 1334, 1338, 1344, 1346, 1347, 1348, 1351, 1354, 1355, 1357, 1359, 1360], "00": [33, 46, 72, 192, 199, 221, 300, 330, 428, 429, 432, 436, 446, 447, 449, 453, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 633, 635, 637, 639, 641, 644, 646, 648, 704, 707, 711, 762, 763, 764, 765, 779, 806, 807, 808, 820, 838, 846, 860, 934, 940, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1050, 1051, 1055, 1057, 1058, 1059, 1060, 1064, 1065, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1081, 1269, 1283, 1286, 1290, 1352], "000": [15, 16, 33, 46, 330, 1269, 1360], "0000": [292, 330, 1313, 1329, 1360], "000000": [384, 385, 459, 670, 987, 988, 1249], "00000001": [17, 735, 820], "00000010": [735, 820], "00000011": [735, 820], "00000100": [735, 820], "00001000": [735, 820], "00001010": [735, 820], "00001011": [735, 820], "0000e": 17, "0000ff": [384, 385, 670, 987, 988, 1249], "0001": 459, "000100": 459, "000101": 459, "0005": 940, "00050": 940, "000800": 1070, "001": [59, 714, 765, 1073, 1074, 1076, 1293], "002": [765, 1073, 1074, 1076], "005": [1084, 1329], "00prefix": 940, "00z": [704, 707, 1283, 1286], "01": [34, 57, 71, 72, 174, 192, 199, 219, 221, 236, 262, 300, 330, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 704, 706, 707, 711, 746, 759, 760, 761, 762, 763, 764, 765, 779, 820, 838, 846, 860, 865, 883, 934, 940, 1034, 1036, 1038, 1039, 1040, 1041, 1044, 1045, 1050, 1051, 1055, 1057, 1058, 1059, 1060, 1063, 1064, 1065, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1081, 1283, 1285, 1286, 1290, 1352, 1355], "010": [15, 709, 1288], "01000": 34, "01000010": [735, 820], "01000110": [735, 820], "012": [650, 687, 820, 1226, 1266, 1329], "0123": [714, 1293], "01234": [650, 820, 1226, 1329], "012345": 1070, "015625": [1201, 1329], "01\u00b2": [687, 1266], "02": [57, 192, 199, 219, 221, 262, 300, 330, 427, 429, 431, 437, 446, 447, 449, 453, 458, 459, 461, 464, 466, 470, 630, 633, 635, 637, 639, 641, 644, 646, 648, 649, 704, 706, 707, 711, 746, 759, 760, 761, 762, 763, 764, 765, 779, 820, 838, 846, 860, 883, 934, 940, 983, 1036, 1038, 1040, 1041, 1044, 1045, 1050, 1051, 1055, 1057, 1058, 1059, 1063, 1064, 1065, 1068, 1069, 1072, 1075, 1077, 1078, 1174, 1283, 1285, 1286, 1290, 1352, 1353], "03": [57, 136, 144, 192, 221, 236, 262, 300, 330, 429, 431, 432, 437, 446, 447, 449, 452, 453, 454, 456, 458, 459, 460, 461, 464, 466, 467, 470, 476, 489, 630, 633, 635, 637, 639, 641, 644, 646, 648, 706, 711, 759, 760, 761, 762, 763, 764, 765, 820, 838, 860, 865, 883, 934, 940, 1036, 1038, 1039, 1044, 1045, 1050, 1051, 1057, 1058, 1059, 1064, 1065, 1067, 1069, 1071, 1072, 1075, 1077, 1285, 1290], "037037": [1201, 1329], "04": [164, 192, 199, 221, 300, 330, 431, 432, 446, 447, 452, 453, 454, 456, 460, 461, 464, 466, 470, 633, 635, 637, 639, 641, 644, 646, 648, 704, 746, 759, 762, 763, 765, 820, 838, 846, 860, 934, 940, 1039, 1051, 1055, 1057, 1058, 1059, 1064, 1067, 1071, 1072, 1075, 1077, 1081, 1283, 1352], "047198": 1354, "05": [22, 164, 167, 168, 169, 170, 174, 192, 199, 300, 330, 427, 430, 431, 432, 433, 434, 438, 441, 442, 443, 444, 446, 447, 448, 453, 455, 456, 457, 459, 460, 746, 759, 760, 762, 763, 838, 846, 934, 940, 1038, 1039, 1040, 1041, 1064, 1065, 1067, 1068, 1070, 1071, 1078, 1352, 1353, 1355], "050545": 136, "0522623626787952": [1132, 1329], "0545": [1040, 1041, 1068], "05t10": 1070, "06": [174, 192, 300, 330, 427, 431, 445, 451, 453, 454, 455, 467, 468, 759, 762, 779, 838, 934, 940, 1034, 1064, 1065, 1070, 1078], "060": [433, 434, 438, 441, 443, 444, 448, 455, 457], "0601749420166": [207, 330], "06293300616044681": [1084, 1329], "07": [22, 144, 174, 199, 330, 427, 430, 431, 442, 453, 454, 459, 467, 704, 759, 760, 762, 763, 771, 846, 934, 940, 1034, 1038, 1064, 1070, 1283, 1352, 1355], "071068": [199, 330, 846, 934], "08": [144, 167, 168, 169, 170, 199, 236, 262, 277, 330, 427, 431, 446, 447, 454, 459, 630, 704, 763, 765, 779, 820, 846, 865, 883, 934, 940, 1034, 1065, 1078, 1283, 1352, 1353], "085537": [1093, 1329], "09": [57, 144, 199, 262, 330, 427, 431, 446, 447, 459, 610, 630, 708, 759, 760, 762, 808, 820, 846, 883, 934, 940, 1034, 1287], "090909": [611, 820], "094395": 1354, "098612": [565, 820, 1177, 1179, 1329, 1351], "0999": [430, 442], "0_": [46, 330], "0m": [436, 1043], "0x11bc0ad80": 939, "0\u00b5": 459, "1": [1, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 61, 65, 66, 84, 88, 101, 104, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 145, 148, 149, 150, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 174, 178, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 388, 390, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 577, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 690, 691, 692, 696, 697, 698, 699, 700, 701, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 816, 820, 835, 836, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 940, 944, 945, 946, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 991, 1002, 1003, 1007, 1008, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1106, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1254, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1269, 1270, 1271, 1275, 1276, 1293, 1294, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1329, 1334, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1358, 1359, 1360], "10": [19, 22, 23, 33, 41, 43, 45, 46, 47, 48, 51, 55, 57, 65, 136, 144, 145, 147, 158, 166, 194, 199, 203, 209, 218, 219, 221, 223, 225, 226, 227, 232, 236, 239, 250, 254, 256, 260, 262, 268, 277, 281, 304, 309, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 341, 345, 353, 354, 355, 357, 409, 415, 418, 423, 427, 428, 430, 431, 433, 434, 436, 438, 441, 442, 443, 444, 446, 447, 448, 452, 453, 454, 455, 457, 459, 467, 470, 476, 497, 498, 499, 504, 510, 522, 530, 536, 538, 544, 554, 556, 558, 562, 564, 580, 582, 593, 608, 610, 611, 614, 624, 625, 630, 661, 709, 719, 722, 735, 746, 747, 755, 760, 762, 763, 766, 769, 771, 773, 780, 781, 805, 808, 820, 841, 842, 846, 849, 860, 861, 863, 865, 869, 878, 879, 883, 885, 895, 896, 904, 910, 913, 915, 918, 919, 920, 921, 922, 923, 924, 934, 940, 1016, 1030, 1034, 1035, 1037, 1038, 1043, 1052, 1064, 1070, 1078, 1081, 1084, 1090, 1111, 1122, 1136, 1144, 1152, 1158, 1168, 1170, 1172, 1176, 1178, 1182, 1198, 1210, 1228, 1230, 1288, 1301, 1308, 1310, 1313, 1329, 1338, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1355, 1360], "100": [16, 23, 33, 46, 132, 135, 140, 144, 145, 146, 149, 153, 154, 155, 158, 162, 237, 255, 273, 330, 459, 624, 625, 654, 668, 678, 680, 683, 692, 708, 764, 820, 866, 889, 934, 940, 1086, 1178, 1194, 1209, 1210, 1216, 1217, 1219, 1233, 1247, 1259, 1262, 1271, 1287, 1329, 1349, 1360], "1000": [146, 207, 286, 307, 330, 346, 820, 908, 934, 1073, 1178, 1307, 1329, 1360], "10000": [144, 234, 330], "100000": [16, 33], "1000000": [17, 1076], "1001": [307, 330, 908, 934], "1002": [307, 330, 908, 934], "10047419486152048166": [222, 330], "1005": [346, 820], "100_000": [798, 870, 934], "100\u00b5": 459, "101": [15, 33, 237, 330, 431, 459, 709, 866, 934, 940, 1288, 1360], "101000": 431, "10101": [33, 1355], "1010101": 15, "101514": [199, 330, 846, 934], "102": [237, 330, 866, 934], "1024": [43, 51, 52, 55, 144, 145, 146, 154, 162, 330, 388, 934, 991], "1040361802642726": [1132, 1329], "107149": 1354, "10734580197236529959": [1110, 1329], "1073741824": [655, 820], "10783150408545073287": [222, 330], "107_930_000": 1338, "10_000": [46, 330], "10i": [221, 330, 860, 934], "10m": [454, 467, 1065, 1078], "10t00": 459, "11": [16, 22, 51, 55, 166, 174, 190, 199, 236, 262, 330, 341, 446, 447, 449, 454, 467, 491, 504, 536, 587, 611, 620, 630, 631, 645, 661, 735, 779, 803, 808, 816, 820, 835, 841, 842, 846, 861, 865, 869, 879, 883, 896, 934, 940, 1060, 1065, 1078, 1182, 1215, 1329, 1347], "110": [203, 330, 692, 709, 849, 934, 1288], "1101441246220388612": [498, 820], "111": [16, 1349], "11111": 1066, "111110": 1066, "11111001": [735, 820], "11111010": [735, 820], "11111111": 16, "112": [655, 820, 1360], "11330": 173, "1152921504606846976": [1207, 1329], "116": 173, "11638928888656214026": [498, 820], "118034": [894, 934], "11aa": 1352, "11aabb": 1352, "11h": [428, 1035], "12": [32, 46, 57, 136, 144, 166, 174, 199, 221, 232, 236, 237, 262, 277, 300, 330, 341, 417, 428, 430, 431, 435, 442, 445, 446, 447, 449, 450, 451, 452, 454, 459, 467, 468, 469, 476, 504, 536, 568, 584, 611, 619, 630, 645, 655, 669, 690, 708, 756, 759, 762, 763, 764, 779, 781, 806, 807, 808, 820, 846, 860, 861, 865, 866, 869, 883, 890, 896, 934, 940, 1035, 1037, 1038, 1049, 1050, 1052, 1056, 1063, 1065, 1070, 1078, 1090, 1182, 1225, 1248, 1270, 1287, 1329, 1351, 1352, 1353, 1355, 1357, 1360], "120": [237, 330, 765, 866, 934, 1354], "1200": [650, 820], "120134": [708, 1287], "121": 1360, "123": [15, 577, 669, 676, 691, 714, 810, 940, 1248, 1255, 1293, 1306, 1329], "123000": 940, "1232e": [1018, 1020, 1329], "1234": [33, 650, 820], "12345": [771, 1013, 1070, 1102, 1225, 1329], "1234500": 940, "123456": [15, 940], "1234567": 33, "123456780": 136, "12346": 771, "123465": 940, "123a123": 691, "123abc": [690, 1269, 1270], "125": [1, 46, 61, 330, 339, 615, 799, 820, 893, 934, 1198, 1201, 1329], "127": [1317, 1329, 1348], "128": [59, 73, 79, 1198, 1329], "129": [655, 820], "13": [193, 194, 199, 210, 211, 218, 226, 237, 238, 250, 262, 304, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 341, 427, 433, 434, 438, 441, 443, 444, 448, 455, 457, 580, 582, 630, 708, 749, 755, 758, 762, 769, 804, 806, 809, 820, 839, 840, 846, 854, 855, 866, 868, 883, 904, 913, 915, 918, 919, 920, 921, 922, 923, 924, 934, 1034, 1065, 1078, 1079, 1182, 1287, 1329, 1348], "130": [237, 330, 866, 934], "13382926553367784577": [498, 820], "134821952": 1338, "134_821_952": 1338, "135": [743, 1354], "13614470193936745724": [498, 820], "13756996518000038261": [1110, 1329], "13d": 459, "13h": [428, 1035], "14": [45, 166, 199, 237, 240, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 428, 433, 434, 438, 441, 443, 444, 448, 455, 457, 459, 504, 577, 620, 762, 806, 807, 820, 846, 866, 913, 915, 918, 919, 920, 921, 922, 923, 924, 934, 940, 1035, 1065, 1070], "140": [237, 330, 866, 934], "141592653589793": 16, "141593": [619, 820, 951, 1329, 1351, 1354], "142857": [1198, 1329], "143": [708, 1287, 1360], "1433": [44, 330], "1436e16": 174, "1438741209321515184": [222, 330], "1440": [464, 1075], "1443e235": 1360, "149": 1360, "14d": 940, "14h": 459, "15": [16, 46, 166, 199, 221, 226, 237, 240, 262, 330, 419, 423, 447, 452, 454, 459, 467, 476, 614, 630, 645, 687, 756, 762, 806, 807, 820, 846, 860, 866, 883, 934, 940, 1027, 1030, 1065, 1070, 1078, 1090, 1266, 1329, 1348, 1352], "150": [237, 330, 866, 934, 1217, 1329], "1500": [166, 177], "15000": [234, 330], "153061": [518, 820], "155": 140, "15836": 174, "15_000": [234, 330], "16": [1, 46, 59, 80, 90, 166, 180, 199, 221, 237, 262, 304, 330, 415, 418, 452, 459, 504, 584, 591, 610, 615, 630, 709, 719, 755, 765, 766, 769, 779, 820, 846, 860, 866, 883, 890, 904, 934, 940, 1065, 1078, 1198, 1238, 1288, 1302, 1329, 1348, 1351, 1352, 1357], "160": [237, 330, 866, 934], "165": [1065, 1078], "1656e15": [1020, 1329], "166667": [1198, 1329], "1666683077": 771, "1666683099": 771, "167": 57, "16996": 1360, "16h": 940, "17": [166, 174, 207, 236, 309, 330, 476, 502, 610, 631, 649, 751, 771, 807, 820, 865, 910, 934, 1018, 1020, 1065, 1090, 1114, 1215, 1329, 1360], "170": [140, 237, 330, 866, 934], "17293822569102704640": [1207, 1329], "174": 1360, "175201": [659, 820, 1239, 1329], "1755e": [171, 174], "1764": 61, "17888890": [207, 330], "179": 1360, "17_500": [234, 330], "18": [44, 136, 149, 199, 247, 262, 330, 418, 454, 467, 470, 504, 593, 610, 630, 719, 820, 846, 875, 879, 883, 934, 940, 1070, 1081, 1346, 1357], "180": [140, 421, 619, 820, 1354], "1800": [452, 1063], "1844": 174, "18446744073709551614": [1207, 1329], "185_000_000": 1338, "186": 1360, "1875": [647, 820, 902, 934], "1897": [430, 442, 1037, 1052], "18d": 940, "19": [174, 236, 262, 330, 430, 454, 630, 635, 637, 639, 641, 708, 820, 865, 883, 934, 1037, 1065, 1078, 1287], "1920": 1352, "196": 1353, "1964": [879, 934], "1969": [1352, 1353], "1970": [71, 72, 164, 1338], "1972": 1338, "1976": [440, 471], "1977": [440, 471], "1978": [433, 434, 438, 440, 441, 443, 444, 448, 455, 457, 471, 1353], "1979": [440, 471], "1980": 459, "1985": [760, 763], "1990": [144, 1338], "1993": 1338, "1994": 1338, "1995": 144, "1998": [449, 1060], "1999": [277, 330, 449, 459, 940, 1060, 1070, 1355], "199992": [870, 934], "199994": [870, 934], "199996": [870, 934], "199998": [870, 934], "1_000_000": [207, 330, 1088, 1329], "1_234_500": 940, "1d": [221, 236, 262, 300, 330, 429, 449, 454, 459, 461, 464, 467, 470, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 765, 780, 807, 808, 820, 860, 865, 883, 934, 940, 1036, 1044, 1050, 1060, 1065, 1069, 1072, 1075, 1078, 1090, 1329], "1e": [17, 167, 168, 169, 170], "1e6": 17, "1h": [221, 236, 262, 300, 330, 436, 449, 454, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1043, 1045, 1060, 1065, 1078, 1090, 1329], "1i": [221, 262, 300, 330, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 820, 860, 883, 934, 1090, 1329], "1m": [221, 236, 262, 300, 330, 449, 454, 466, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1073, 1074, 1076, 1077, 1078, 1090, 1329], "1mo": [221, 236, 262, 300, 330, 432, 446, 447, 449, 453, 454, 460, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1039, 1056, 1057, 1058, 1060, 1061, 1062, 1064, 1065, 1071, 1078, 1079, 1090, 1329], "1n": [221, 236, 262, 300, 330, 449, 454, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078, 1090, 1329], "1q": [221, 236, 262, 300, 330, 449, 454, 467, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078], "1st_col": 940, "1u": [221, 236, 262, 300, 330, 449, 454, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078, 1090, 1329], "1w": [221, 236, 262, 300, 330, 449, 454, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078, 1090, 1329], "1w2d": [760, 761], "1y": [221, 236, 262, 300, 330, 449, 454, 467, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078], "1y2mo": [449, 1060], "1zy3": [669, 1248], "2": [1, 7, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 65, 66, 84, 88, 101, 104, 106, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 147, 153, 154, 156, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 338, 339, 340, 341, 343, 345, 346, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 387, 388, 390, 395, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 439, 442, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 790, 791, 794, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 816, 820, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 939, 940, 944, 945, 946, 949, 952, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 990, 991, 1002, 1008, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1038, 1040, 1041, 1043, 1045, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1062, 1063, 1064, 1065, 1068, 1078, 1080, 1081, 1082, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1106, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1135, 1136, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1248, 1254, 1256, 1258, 1259, 1260, 1262, 1263, 1265, 1266, 1269, 1270, 1275, 1276, 1278, 1279, 1280, 1283, 1284, 1286, 1287, 1288, 1289, 1292, 1294, 1296, 1297, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1329, 1334, 1338, 1339, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1358, 1359, 1360], "20": [44, 45, 46, 66, 144, 149, 166, 171, 172, 173, 174, 178, 181, 190, 199, 203, 209, 225, 226, 247, 254, 256, 260, 277, 287, 288, 292, 306, 311, 330, 353, 354, 355, 409, 423, 430, 433, 434, 438, 441, 442, 443, 444, 448, 454, 455, 457, 459, 467, 470, 491, 498, 504, 568, 576, 587, 614, 633, 635, 637, 639, 641, 644, 646, 648, 674, 719, 734, 762, 771, 780, 799, 807, 820, 835, 846, 849, 852, 875, 878, 893, 907, 912, 934, 940, 1030, 1037, 1041, 1052, 1065, 1070, 1078, 1081, 1093, 1109, 1209, 1253, 1308, 1310, 1313, 1329, 1345, 1346, 1349, 1355], "200": [462, 463, 465, 624, 625, 820, 940, 1086, 1194, 1209, 1210, 1216, 1217, 1219, 1329, 1349], "2000": [430, 439, 442, 446, 447, 449, 940, 1037, 1046, 1052, 1057, 1058, 1060, 1066, 1338, 1352], "200000": [462, 870, 934], "200000000": 465, "2001": [22, 429, 430, 435, 437, 439, 442, 445, 449, 450, 451, 454, 458, 467, 468, 469, 470, 633, 635, 637, 639, 641, 644, 646, 648, 704, 820, 940, 1036, 1037, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1065, 1069, 1078, 1079, 1080, 1081, 1082, 1283], "2002": [144, 439, 449, 1046, 1060, 1082], "2003": [449, 771, 1060], "2004": [449, 1060], "2005": [449, 1060], "2006": [449, 1060], "2008": 1338, "200m": [462, 463, 465], "2010": [277, 330, 459, 940], "2011": [428, 1035], "2012": [428, 1035, 1355], "2013": 1063, "2016": [236, 330, 865, 934], "2017": [236, 330, 865, 934], "2018": [236, 330, 453, 865, 934, 1064], "2019": [236, 330, 865, 934], "202": 1353, "2020": [148, 159, 192, 199, 219, 236, 262, 330, 333, 427, 432, 436, 453, 456, 459, 460, 461, 462, 463, 464, 465, 466, 476, 630, 704, 706, 707, 746, 820, 838, 846, 865, 883, 934, 940, 1034, 1039, 1043, 1064, 1067, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1090, 1283, 1285, 1286, 1329, 1353], "2021": [192, 199, 219, 221, 300, 330, 704, 780, 838, 846, 860, 934, 940, 1040, 1041, 1047, 1068, 1283, 1352], "2022": [57, 192, 199, 219, 330, 431, 454, 467, 704, 760, 761, 763, 764, 765, 771, 838, 846, 934, 940, 1038, 1047, 1065, 1078, 1283], "2023": [22, 46, 136, 166, 234, 330, 431, 765, 780, 940, 1038], "2024": [166, 427, 433, 434, 438, 441, 443, 444, 448, 452, 455, 457, 610, 746, 759, 760, 762, 763, 765, 820, 940, 1034, 1063, 1352, 1355], "2025": [427, 452, 746, 779, 940, 1034], "2026": 1353, "2030": 1352, "2031": 940, "2040": 459, "2047317070637311557": [222, 330], "2055938745": 136, "2065": [433, 434, 438, 441, 443, 444, 448, 455, 457], "2068": 174, "207": 1353, "2077": [277, 330, 459, 940, 1070, 1352, 1353], "2095": 174, "20_000": [46, 330], "20t08": 459, "20t18": 1070, "20word": 147, "21": [166, 199, 247, 279, 330, 430, 633, 635, 637, 639, 641, 644, 646, 648, 762, 771, 779, 820, 846, 875, 934, 940, 1037, 1346], "213": 1360, "2147483647": 1360, "2147483648": [1180, 1329], "21d": 940, "22": [51, 55, 166, 174, 330, 435, 450, 454, 467, 469, 470, 631, 633, 635, 637, 639, 641, 644, 646, 648, 704, 762, 816, 820, 934, 940, 1065, 1078, 1081, 1215, 1283, 1329, 1352, 1353, 1360], "221": 1360, "2246e": [1238, 1302, 1329], "225": [454, 467, 1354], "22500": 798, "22_000_000": 1338, "22_500": 798, "23": [16, 174, 199, 221, 262, 292, 330, 431, 435, 438, 450, 452, 454, 459, 469, 630, 633, 635, 637, 639, 641, 644, 646, 648, 762, 765, 806, 807, 808, 820, 846, 860, 883, 893, 934, 940, 1038, 1045, 1063, 1313, 1329, 1359, 1360], "230498": 17, "230498095872587": 17, "2304980958725870923": 17, "232338648": 1338, "2337": [46, 330], "234": 33, "2345": 940, "23456789": 16, "235": 1360, "23h": 940, "24": [59, 166, 221, 236, 240, 262, 277, 300, 330, 417, 419, 435, 449, 450, 454, 461, 467, 469, 591, 630, 633, 635, 637, 639, 641, 644, 646, 648, 687, 760, 761, 763, 764, 765, 807, 808, 820, 860, 865, 883, 934, 1027, 1060, 1065, 1072, 1078, 1131, 1329, 1352, 1359], "24030": 173, "249": [735, 820], "25": [1, 33, 46, 61, 136, 199, 203, 221, 236, 262, 287, 292, 300, 304, 330, 388, 423, 435, 436, 450, 454, 459, 467, 469, 476, 615, 617, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 728, 762, 763, 764, 765, 771, 779, 782, 807, 808, 820, 846, 849, 860, 865, 872, 883, 902, 904, 934, 940, 991, 1029, 1030, 1043, 1065, 1070, 1078, 1084, 1090, 1112, 1198, 1203, 1269, 1329, 1346, 1351, 1357, 1358], "250": [735, 820, 1217, 1329, 1349, 1360], "2500": [234, 292, 330], "254508": [476, 820, 1090, 1329], "255": 1360, "256": [240, 330, 388, 991, 1198, 1329, 1351], "2560": 991, "259921": [407, 820, 1012, 1329, 1351], "25_000_000": 1338, "26": [44, 46, 166, 171, 172, 173, 174, 178, 199, 330, 436, 468, 846, 934, 1043], "266667": [199, 330, 846, 934], "27": [1, 61, 287, 323, 330, 418, 445, 451, 468, 719, 820, 924, 940, 1201, 1308, 1329, 1359, 1360], "270": 1354, "28": [283, 288, 330, 339, 453, 470, 820, 1064, 1081, 1310, 1329, 1352, 1354, 1359, 1360], "283185": [619, 820], "2846": 330, "285714": [505, 820, 1116, 1329], "289962": 1354, "28_341_469": 1338, "29": [22, 166, 428, 446, 1035, 1057], "29096": 1360, "290994": [894, 934], "292432": [952, 1329], "292893": [476, 820, 1090, 1329], "2_color_scal": [46, 330], "2d": [262, 287, 288, 330, 449, 630, 780, 820, 883, 934, 1035, 1042], "2h": [633, 635, 637, 639, 641, 644, 646, 648, 820], "2i": [221, 330, 860, 934], "2m": [940, 1055], "2x": 173, "3": [1, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 41, 43, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 60, 61, 65, 66, 84, 101, 104, 106, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 147, 149, 153, 154, 155, 158, 164, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 339, 340, 341, 342, 344, 355, 356, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 589, 590, 591, 592, 593, 594, 596, 598, 600, 601, 604, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 662, 663, 664, 667, 668, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 705, 706, 711, 712, 715, 716, 717, 718, 719, 720, 722, 726, 727, 730, 731, 732, 734, 735, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 820, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 939, 940, 945, 946, 949, 951, 953, 954, 955, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1061, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1073, 1074, 1076, 1078, 1080, 1081, 1083, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1106, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1135, 1136, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1249, 1250, 1251, 1254, 1255, 1256, 1259, 1260, 1261, 1262, 1264, 1265, 1269, 1270, 1271, 1272, 1273, 1277, 1284, 1285, 1290, 1291, 1294, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1309, 1310, 1311, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1329, 1334, 1338, 1339, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1358, 1359, 1360], "30": [46, 199, 209, 221, 225, 254, 260, 283, 304, 330, 333, 353, 354, 355, 423, 431, 433, 434, 438, 441, 443, 444, 445, 446, 448, 451, 453, 454, 455, 457, 459, 460, 467, 468, 498, 576, 655, 762, 779, 780, 806, 807, 820, 846, 852, 860, 878, 904, 934, 940, 1030, 1038, 1057, 1064, 1065, 1070, 1071, 1078, 1109, 1329, 1334, 1345, 1346, 1349, 1351, 1352, 1354, 1355, 1358, 1360], "300": [283, 330, 497, 608, 625, 820, 940, 1210, 1216, 1217, 1219, 1329, 1349], "3000": 940, "3002": [430, 442, 1037, 1052], "30103": [564, 820, 1351], "3022416320763508302": [1110, 1329], "30_000": [46, 330], "30m": [221, 330, 454, 467, 860, 934, 1065, 1078], "30t16": 459, "31": [61, 66, 199, 277, 330, 430, 431, 435, 442, 446, 449, 452, 460, 674, 704, 759, 762, 771, 780, 799, 846, 934, 940, 1035, 1037, 1038, 1042, 1052, 1057, 1063, 1070, 1071, 1209, 1253, 1283, 1329, 1353, 1355, 1360], "31t06": 1070, "32": [59, 71, 77, 81, 91, 231, 236, 262, 330, 591, 630, 655, 820, 865, 883, 934, 1031, 1061, 1198, 1220, 1329, 1346, 1352], "321": [33, 1360], "3212": [708, 1287], "321cba": 1352, "3265500": 940, "32971": [470, 1081], "32974": [470, 1081], "32976": [470, 1081], "32bit": [287, 330], "33": [199, 247, 330, 649, 820, 846, 875, 934, 1220, 1329, 1353], "333": [22, 650, 820, 1086, 1194, 1226, 1329], "33333": 1355, "333333": [227, 330, 593, 779, 863, 934, 1198, 1224, 1329, 1346], "34": [199, 330, 690, 704, 846, 934, 1270, 1283], "3420": [708, 1287], "343622": [660, 820], "345": [404, 405, 685, 686, 1007, 1008, 1264, 1265], "3450": [1226, 1329], "3456": 940, "34776706224699483": [1240, 1329], "35": [46, 330, 423, 459, 762, 820, 1030, 1329], "350": [330, 333, 497, 608, 820, 1217, 1329, 1334], "3500": [1226, 1329], "356": [435, 450, 469], "356194": [742, 743, 1354], "357": [435, 450, 469], "358": [435, 450, 469], "359": [435, 450, 469], "36": [199, 330, 846, 934, 1357], "360": [421, 619, 820, 1354], "361": 1360, "363961": [556, 1170], "366": [450, 1061], "37": [18, 940], "370h": [476, 820, 1090, 1329], "37338": 1360, "38": [46, 136, 171, 174, 330], "38180177416060584": [642, 820, 1221, 1329], "381802": [642, 820, 1221, 1329], "386294": [565, 820, 1179, 1329, 1351], "389056": [480, 820, 1093, 1329, 1351], "39": [646, 771, 820], "39m": 940, "3_color_scal": [46, 330], "3d12h4m25": [221, 236, 262, 300, 330, 454, 467, 476, 630, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1065, 1078, 1090, 1329], "3f": [147, 704, 707, 1283, 1286], "3i": [221, 262, 330, 860, 934], "3rd": [1260, 1284], "3xy": [669, 1248], "4": [1, 14, 19, 23, 31, 41, 43, 45, 46, 47, 48, 51, 57, 58, 59, 60, 61, 65, 66, 84, 104, 129, 130, 131, 132, 133, 134, 135, 136, 140, 158, 166, 178, 188, 189, 190, 191, 192, 193, 194, 198, 200, 204, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 249, 250, 251, 253, 254, 255, 256, 262, 264, 265, 272, 273, 276, 280, 281, 282, 283, 284, 285, 288, 291, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 338, 339, 340, 341, 343, 345, 357, 364, 365, 366, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 381, 382, 388, 399, 400, 401, 404, 405, 407, 408, 409, 413, 414, 417, 418, 419, 421, 424, 431, 434, 435, 442, 450, 451, 452, 453, 454, 455, 456, 459, 461, 464, 466, 467, 469, 473, 474, 476, 480, 481, 483, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496, 499, 501, 503, 504, 505, 506, 515, 516, 520, 521, 522, 529, 530, 531, 532, 533, 535, 536, 538, 546, 548, 549, 550, 551, 552, 553, 554, 558, 559, 564, 567, 568, 569, 589, 591, 593, 594, 596, 598, 600, 601, 604, 605, 606, 609, 610, 612, 613, 614, 615, 618, 620, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 657, 661, 662, 663, 664, 667, 669, 673, 676, 679, 681, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 702, 703, 704, 705, 709, 714, 715, 717, 718, 719, 720, 722, 725, 726, 727, 728, 734, 735, 737, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 755, 756, 757, 758, 759, 762, 763, 764, 766, 768, 769, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 816, 820, 835, 836, 838, 839, 840, 841, 842, 845, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 883, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 907, 908, 910, 911, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 939, 940, 944, 949, 952, 959, 966, 968, 969, 970, 972, 973, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 991, 1002, 1007, 1008, 1013, 1014, 1016, 1022, 1027, 1029, 1031, 1041, 1045, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1062, 1064, 1065, 1067, 1072, 1075, 1077, 1078, 1079, 1080, 1087, 1090, 1094, 1095, 1097, 1098, 1103, 1104, 1106, 1111, 1112, 1115, 1116, 1117, 1118, 1122, 1125, 1126, 1127, 1128, 1130, 1136, 1143, 1144, 1145, 1146, 1147, 1152, 1156, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1172, 1173, 1188, 1191, 1192, 1195, 1198, 1199, 1200, 1201, 1205, 1206, 1209, 1210, 1211, 1214, 1218, 1220, 1221, 1222, 1223, 1224, 1227, 1229, 1233, 1234, 1237, 1240, 1241, 1242, 1246, 1248, 1252, 1255, 1258, 1260, 1264, 1265, 1267, 1268, 1273, 1275, 1276, 1281, 1282, 1283, 1284, 1288, 1293, 1294, 1297, 1299, 1301, 1307, 1310, 1312, 1314, 1320, 1329, 1334, 1338, 1339, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1357, 1358, 1359, 1360], "40": [46, 199, 209, 236, 254, 330, 454, 459, 467, 498, 562, 708, 719, 820, 846, 865, 878, 934, 940, 1047, 1078, 1176, 1287, 1345, 1346, 1349, 1352], "400": [299, 330, 462, 463, 465, 901, 934, 1216, 1217, 1219, 1329, 1349], "4000000": [1088, 1329], "404": [237, 330, 675, 677, 866, 934, 1254, 1256], "4096": 1351, "41": [199, 330, 646, 820, 846, 934, 1346, 1360], "412277": 174, "414214": [664, 820, 1243, 1329, 1351], "4160": 61, "416147": 1354, "4164": [236, 330, 865, 934], "42": [61, 199, 222, 247, 262, 330, 459, 630, 820, 846, 875, 883, 934, 1110, 1329, 1345, 1359], "424778": [619, 820], "428571": [475, 820, 1089, 1329], "429101": 1346, "4294967296": [51, 330], "43": [199, 262, 330, 418, 630, 646, 820, 846, 883, 934], "4321": 940, "433013": [643, 820, 894, 934], "44": [16, 247, 330, 424, 820, 875, 934], "4411": [236, 330, 865, 934], "44225": [1012, 1329], "444": 16, "44444444444": 16, "45": [46, 199, 262, 330, 431, 454, 467, 630, 646, 669, 676, 716, 743, 762, 780, 806, 807, 820, 846, 883, 934, 940, 1038, 1065, 1070, 1078, 1248, 1255, 1296, 1351, 1352, 1354, 1358, 1360], "450": [1217, 1329], "45000": 798, "4500000": 940, "456": [15, 16, 431, 940, 1038, 1306, 1329], "456000": [431, 1038], "456001\u00b5": 940, "4566": [236, 330, 865, 934], "456789": [459, 940, 1066], "456789\u00b5": 940, "456m": 940, "457658": 1354, "459148": [472, 820], "46": 940, "4696": [236, 330, 865, 934], "47": [57, 199, 330, 646, 820, 846, 934, 940, 1346], "470": [879, 934], "47033": [642, 820, 1221, 1329], "47033046033698594": [642, 820, 1221, 1329], "475": [879, 934], "48": [18, 174, 262, 330, 630, 719, 820, 883, 934, 940], "4827": [236, 330, 865, 934], "485": 1360, "49": [199, 330, 846, 934, 940], "492474": [476, 820, 1090, 1329], "498": [237, 330, 866, 934], "4_500_000": 940, "4ab4a": 1352, "4d": [476, 820, 1090, 1329], "4f6228": [46, 330], "4f71": [46, 330], "4x": [233, 330], "5": [1, 13, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 41, 43, 45, 47, 48, 51, 57, 58, 60, 61, 65, 104, 129, 132, 133, 134, 135, 136, 138, 145, 166, 167, 169, 172, 174, 178, 189, 192, 193, 194, 199, 200, 203, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 220, 221, 223, 224, 226, 227, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 249, 250, 251, 253, 255, 256, 257, 262, 265, 272, 273, 276, 277, 280, 281, 282, 283, 284, 285, 287, 288, 291, 292, 294, 297, 298, 299, 300, 303, 304, 306, 307, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 339, 340, 343, 358, 359, 364, 365, 366, 368, 370, 374, 379, 381, 387, 388, 399, 400, 401, 404, 405, 408, 409, 419, 420, 421, 423, 424, 427, 430, 431, 432, 433, 434, 438, 441, 442, 443, 444, 448, 453, 455, 456, 457, 459, 460, 466, 470, 474, 476, 478, 479, 482, 484, 488, 489, 493, 494, 496, 499, 501, 504, 506, 509, 512, 513, 514, 515, 516, 520, 522, 529, 532, 533, 535, 536, 538, 541, 543, 544, 548, 549, 550, 551, 552, 553, 557, 558, 562, 568, 589, 591, 593, 605, 609, 610, 611, 612, 613, 614, 615, 617, 618, 620, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 652, 663, 669, 679, 680, 681, 684, 685, 686, 705, 709, 720, 722, 726, 727, 728, 740, 742, 743, 745, 746, 747, 748, 749, 751, 753, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 768, 769, 773, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 798, 799, 801, 803, 804, 805, 809, 816, 820, 838, 839, 840, 841, 842, 846, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 872, 873, 879, 883, 889, 890, 891, 892, 893, 894, 895, 896, 900, 901, 903, 904, 907, 908, 910, 912, 913, 914, 915, 918, 919, 920, 921, 922, 923, 924, 925, 934, 940, 949, 952, 956, 959, 962, 963, 966, 968, 969, 970, 972, 974, 978, 983, 984, 985, 990, 991, 1002, 1007, 1014, 1016, 1023, 1027, 1028, 1029, 1030, 1031, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1052, 1064, 1066, 1067, 1068, 1070, 1071, 1077, 1079, 1080, 1081, 1087, 1090, 1092, 1094, 1095, 1096, 1106, 1111, 1112, 1115, 1117, 1121, 1124, 1136, 1143, 1146, 1147, 1152, 1155, 1158, 1162, 1163, 1164, 1165, 1166, 1167, 1171, 1172, 1176, 1180, 1188, 1195, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1210, 1211, 1214, 1215, 1216, 1217, 1219, 1220, 1223, 1227, 1229, 1234, 1240, 1243, 1248, 1258, 1259, 1260, 1263, 1264, 1284, 1288, 1301, 1308, 1310, 1313, 1314, 1317, 1320, 1329, 1334, 1339, 1342, 1344, 1346, 1347, 1348, 1351, 1352, 1353, 1354, 1357, 1359, 1360], "50": [18, 33, 46, 199, 209, 219, 330, 409, 454, 459, 467, 760, 761, 820, 846, 934, 940, 1016, 1029, 1078, 1269, 1329, 1345, 1346], "500": [46, 299, 330, 333, 433, 434, 438, 441, 443, 444, 448, 455, 457, 901, 934, 1051, 1053, 1059, 1216, 1217, 1219, 1329, 1334], "5000": [292, 330, 1313, 1329], "50000": 145, "500000": [441, 1051], "500000000": [448, 1059], "5000555": 940, "500_000": [433, 434, 438, 441, 443, 444, 448, 455, 457], "500m": [1051, 1053, 1059], "51": 940, "512": [51, 146, 233, 330, 388, 615, 820, 991, 1198, 1329], "51966": [709, 1288], "52": [304, 330, 468, 649, 820, 904, 934], "523599": 1354, "527525": [1222, 1329], "53": [468, 1079, 1357], "533316061": 1338, "533_316_061": 1338, "54": [480, 820, 1132, 1329, 1351, 1360], "540": [421, 619, 820], "540302": 1354, "543": 15, "543081": [411, 820, 1019, 1329], "5432": 146, "54321": 15, "544": 1360, "544705": 751, "549306": [956, 1329], "55": [46, 59, 330, 502, 820, 1114, 1329, 1348, 1352, 1353], "5555": 940, "55550": 940, "56": [136, 690, 723, 820, 1270], "566371": [619, 820], "567": 33, "56789": [1013, 1102, 1225, 1329], "57": [646, 820, 1225, 1329, 1354, 1360], "570796": [347, 349, 820, 951, 953, 1329, 1354], "575050513": [171, 174], "58": [140, 255, 330], "581139": [1029, 1329], "584963": [563, 820], "587401": [407, 820, 1351], "59": [136, 199, 330, 431, 444, 452, 455, 459, 489, 762, 806, 807, 808, 820, 846, 934, 940, 1038, 1055, 1063, 1066], "59815": [480, 820, 1351], "5_000_555": 940, "5th": [46, 330], "6": [1, 14, 19, 41, 43, 45, 46, 47, 48, 49, 50, 51, 56, 58, 60, 65, 96, 97, 104, 129, 132, 133, 134, 135, 153, 154, 166, 189, 192, 195, 196, 200, 201, 202, 204, 205, 206, 208, 209, 212, 215, 216, 217, 218, 219, 221, 223, 225, 226, 227, 229, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 244, 245, 248, 249, 252, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 273, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 313, 323, 324, 330, 333, 334, 339, 343, 364, 365, 366, 368, 374, 382, 400, 401, 404, 405, 417, 418, 424, 427, 431, 435, 445, 449, 450, 451, 462, 463, 465, 468, 469, 472, 474, 483, 484, 489, 490, 493, 499, 501, 504, 522, 523, 524, 533, 536, 549, 550, 551, 552, 556, 568, 569, 605, 609, 616, 619, 620, 621, 626, 628, 630, 632, 634, 636, 638, 640, 643, 645, 646, 647, 652, 657, 663, 669, 674, 685, 686, 709, 720, 722, 727, 735, 737, 739, 746, 748, 755, 756, 757, 759, 762, 766, 769, 775, 781, 782, 786, 799, 803, 816, 820, 838, 841, 842, 843, 844, 847, 848, 850, 851, 852, 853, 856, 857, 858, 860, 861, 863, 864, 865, 867, 869, 870, 877, 879, 881, 883, 884, 885, 887, 889, 890, 891, 892, 893, 896, 899, 900, 903, 904, 907, 908, 914, 924, 925, 934, 940, 966, 968, 969, 970, 972, 978, 1007, 1014, 1018, 1020, 1025, 1026, 1031, 1034, 1060, 1070, 1080, 1087, 1094, 1106, 1112, 1137, 1138, 1147, 1150, 1163, 1164, 1165, 1166, 1170, 1188, 1202, 1205, 1206, 1211, 1213, 1218, 1220, 1222, 1224, 1229, 1234, 1237, 1248, 1253, 1264, 1288, 1300, 1310, 1329, 1334, 1339, 1342, 1344, 1346, 1347, 1351, 1357, 1358, 1360], "60": [46, 209, 255, 330, 438, 443, 444, 455, 466, 489, 646, 704, 820, 1061, 1066, 1077, 1207, 1283, 1329, 1354], "600": [299, 330, 462, 463, 465, 901, 934, 940], "60000": 441, "600000": 940, "60000000": 448, "60206": [564, 820, 1351], "605551": 801, "605551275463989": 801, "609438": 1351, "60_000": [433, 434, 438, 441, 443, 444, 448, 455, 457], "61": [255, 330], "625": [640, 820], "626172": [671, 1250], "63": [646, 820], "63204": 1360, "6331e16": [1302, 1329, 1354], "636253": 1354, "64": [1, 59, 61, 72, 74, 78, 82, 89, 92, 165, 188, 292, 330, 412, 591, 615, 820, 1198, 1201, 1329, 1351], "64030": [709, 1288], "642093": 1354, "647961": 174, "64bit": [166, 622, 820, 1207, 1329], "65": [203, 330, 849, 934, 1084, 1329], "650": [497, 608, 820], "65280": [709, 1288], "654": [33, 799, 893, 934], "65432": 1355, "654321": 577, "65536": 1351, "65552": [387, 990], "66": [236, 299, 330, 646, 735, 820, 865, 901, 934, 1132, 1220, 1329], "663053": 136, "666": 940, "666000": 940, "666667": [199, 227, 301, 318, 330, 475, 779, 785, 820, 846, 863, 902, 919, 934, 1089, 1329], "666f6f": [671, 1250], "67500": 798, "676": [237, 330, 866, 934], "678": [669, 676, 1248, 1255], "6789": [34, 940], "67890": 34, "686241": 1346, "69": [646, 820, 1132, 1329], "693147": [565, 820, 1177, 1179, 1329, 1351], "6_000_000": 1338, "7": [1, 22, 33, 41, 43, 45, 46, 47, 48, 49, 50, 51, 58, 60, 65, 153, 154, 166, 181, 189, 192, 195, 196, 197, 199, 201, 202, 205, 206, 208, 212, 215, 217, 221, 223, 225, 227, 235, 239, 241, 243, 245, 247, 248, 252, 255, 257, 259, 260, 262, 263, 265, 266, 267, 268, 270, 273, 275, 278, 279, 280, 281, 286, 288, 289, 290, 298, 300, 301, 302, 330, 333, 334, 339, 343, 365, 366, 368, 377, 418, 430, 431, 435, 442, 450, 453, 454, 459, 467, 469, 480, 493, 499, 504, 505, 522, 536, 549, 550, 551, 552, 609, 610, 620, 626, 630, 645, 646, 663, 679, 708, 722, 746, 755, 756, 759, 762, 763, 769, 774, 781, 782, 799, 803, 820, 838, 843, 844, 846, 848, 851, 853, 856, 858, 860, 861, 863, 864, 869, 875, 877, 880, 881, 883, 884, 885, 889, 893, 896, 934, 940, 956, 969, 970, 972, 981, 1037, 1038, 1042, 1047, 1052, 1064, 1065, 1070, 1078, 1080, 1093, 1116, 1131, 1150, 1163, 1164, 1165, 1166, 1210, 1211, 1223, 1229, 1258, 1287, 1329, 1334, 1339, 1344, 1346, 1347, 1348, 1351, 1353, 1357, 1360], "70": [199, 330, 735, 763, 820, 846, 934, 1132, 1329, 1346], "700": [299, 330, 901, 934], "702963": [46, 330], "7051579356916758811": 160, "707107": [376, 477, 643, 644, 742, 820, 980, 1091, 1329, 1354], "712389": 1354, "714": 1360, "714286": [505, 820, 1116, 1329], "718281828459045": [16, 472, 563, 820, 1084, 1177, 1329], "718282": [480, 820, 1093, 1329, 1351], "720": [421, 619, 820], "7264": 1360, "732051": [1243, 1329], "7415e16": 174, "742": [237, 330, 866, 934], "75": [46, 199, 203, 330, 343, 609, 617, 632, 634, 636, 638, 643, 645, 647, 779, 782, 820, 846, 849, 934, 940, 1029, 1112, 1132, 1203, 1269, 1329, 1346, 1354, 1360], "7500": [234, 330], "7508": 1360, "754": [728, 820], "754888": [472, 820], "761594": [724, 820, 1303, 1329], "7654": 940, "765431": 1066, "7654321": 33, "76933c": [46, 330], "77": 1070, "78": [15, 140, 690, 1270], "780": 15, "784": [236, 330, 865, 934], "785398": [351, 742, 743, 820, 955, 1329, 1354], "789": [16, 940], "79": [1132, 1329], "7d": 940, "8": [1, 17, 41, 43, 45, 47, 48, 49, 50, 51, 52, 57, 58, 60, 61, 65, 83, 87, 93, 153, 154, 166, 189, 192, 195, 196, 197, 199, 201, 202, 204, 205, 206, 208, 212, 215, 217, 219, 223, 225, 232, 235, 236, 237, 239, 240, 241, 243, 245, 248, 257, 259, 260, 262, 263, 265, 266, 267, 268, 270, 273, 275, 277, 278, 279, 281, 286, 288, 289, 290, 298, 301, 302, 304, 330, 343, 345, 357, 365, 366, 368, 415, 418, 419, 431, 459, 493, 500, 504, 505, 530, 532, 536, 549, 550, 551, 552, 591, 609, 610, 615, 626, 627, 631, 655, 661, 663, 687, 688, 689, 704, 735, 740, 746, 751, 753, 756, 758, 766, 768, 773, 774, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 799, 801, 804, 805, 809, 820, 838, 843, 844, 846, 848, 850, 851, 853, 856, 858, 861, 864, 865, 866, 869, 870, 879, 881, 884, 885, 889, 893, 896, 904, 934, 940, 969, 970, 972, 1020, 1027, 1047, 1112, 1116, 1131, 1144, 1146, 1150, 1163, 1164, 1165, 1166, 1198, 1201, 1211, 1214, 1215, 1218, 1220, 1222, 1224, 1267, 1268, 1283, 1329, 1338, 1339, 1344, 1346, 1347, 1348, 1351, 1352, 1353, 1357, 1360], "80": [46, 203, 330, 849, 934], "800": [462, 463, 465, 1070], "8000": 146, "803065983": 136, "81": 1351, "814697265625": [1088, 1329], "816497": [278, 330], "8192": 144, "82": [236, 330, 865, 934], "8257e14": 1360, "83": [236, 330, 865, 934], "833": [236, 330, 865, 934], "833333": [318, 919], "848062": 1354, "848808": 174, "85": [46, 140, 330, 1132, 1329, 1360], "850": [497, 608, 820], "8568409950394724": [1084, 1329], "8589934592": [655, 820], "86": 1360, "8601": 1352, "87": 1360, "876": 15, "88": [199, 330, 846, 934], "881374": [350, 820, 954, 1329], "888": [799, 893, 934], "8_000_000": 1338, "8a": [987, 988], "8nin": 1360, "9": [1, 15, 41, 43, 45, 46, 47, 48, 51, 57, 65, 189, 197, 199, 212, 214, 223, 227, 235, 237, 239, 240, 255, 262, 264, 265, 268, 280, 281, 298, 302, 304, 323, 330, 339, 343, 345, 357, 365, 366, 368, 373, 375, 415, 418, 421, 431, 459, 485, 493, 504, 510, 530, 536, 547, 555, 593, 609, 610, 619, 626, 630, 631, 642, 645, 646, 657, 661, 676, 708, 716, 719, 749, 755, 756, 759, 762, 774, 808, 820, 846, 856, 861, 863, 864, 866, 869, 883, 885, 896, 904, 924, 934, 940, 964, 965, 969, 970, 972, 977, 979, 1029, 1042, 1051, 1053, 1059, 1065, 1078, 1079, 1122, 1131, 1144, 1150, 1161, 1169, 1211, 1215, 1221, 1223, 1225, 1237, 1255, 1287, 1296, 1329, 1338, 1339, 1344, 1347, 1348, 1357], "90": [199, 237, 330, 708, 846, 866, 934, 1287, 1346, 1354], "90000": 798, "901234": [1013, 1102, 1225, 1329], "909": [236, 330, 865, 934], "910": [236, 330, 676, 865, 934, 1255], "910t": [669, 676, 1248, 1255], "914": [236, 330, 865, 934], "9223372036854775807": [731, 820], "9223372036854775808": [566, 820], "927295": 1354, "928571": [478, 820, 1092, 1329], "93": [1132, 1329], "94": [340, 820], "9477376373212048": [1132, 1329], "95": [23, 340, 820, 940], "95b3d7": [46, 330], "96": [23, 199, 330, 340, 820, 846, 934, 1132, 1329], "961": 61, "963624": [477, 820, 1091, 1329], "964028": [255, 330], "96_067_179": 1338, "97": [23, 226, 330, 340, 820, 1132, 1329], "9774092659964970114": [498, 820], "978307200": [437, 1044], "978307200000": 458, "978307200000000": [437, 458, 1044, 1069], "978307200000000000": 1069, "978393600": [437, 1044], "978393600000": 458, "978393600000000": [437, 458, 1044, 1069], "978393600000000000": 1069, "978480000": [437, 1044], "978480000000": 458, "978480000000000": [437, 458, 1044, 1069], "978480000000000000": 1069, "98": [23, 226, 255, 330, 399, 492, 495, 662, 708, 726, 820, 1287], "987": [33, 577], "987000": 940, "9876": 15, "987654": [33, 940], "987654321": 16, "9876543210": 136, "987m": 940, "988": 16, "99": [23, 46, 210, 211, 226, 229, 255, 299, 330, 340, 399, 482, 484, 492, 495, 662, 726, 810, 820, 854, 855, 901, 934, 1070, 1084, 1096, 1329, 1351], "9914e218": 174, "993": [1112, 1329], "998347": [255, 330], "999": [430, 442, 940, 1037, 1052, 1349, 1360], "999000": 940, "999954": [255, 330], "999999": [452, 714, 762, 806, 807, 808, 940, 1063, 1070, 1293], "999999\u00b5": 940, "9bbb59": [46, 330], "A": [19, 43, 46, 51, 52, 63, 64, 69, 75, 136, 139, 144, 145, 146, 147, 158, 160, 165, 180, 196, 205, 214, 221, 236, 242, 244, 249, 255, 280, 283, 298, 299, 300, 304, 305, 330, 338, 405, 425, 426, 431, 456, 459, 473, 474, 482, 494, 496, 508, 511, 513, 514, 520, 560, 567, 568, 581, 595, 604, 605, 627, 632, 634, 636, 638, 640, 643, 645, 647, 667, 668, 669, 675, 676, 677, 678, 679, 680, 681, 684, 686, 690, 691, 692, 694, 705, 714, 749, 765, 766, 770, 820, 844, 851, 860, 865, 881, 901, 904, 905, 934, 940, 1008, 1032, 1033, 1038, 1067, 1070, 1086, 1096, 1194, 1216, 1217, 1219, 1222, 1223, 1224, 1246, 1247, 1248, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1263, 1265, 1269, 1270, 1271, 1273, 1284, 1293, 1329, 1338, 1339, 1342, 1355, 1357], "AND": [736, 737, 799, 940, 1348], "ANDs": [390, 820, 993, 1329], "AS": [277, 330, 799, 800, 893, 934, 1338, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1359], "And": [712, 1291], "As": [18, 56, 96, 97, 129, 131, 132, 133, 135, 149, 153, 154, 162, 212, 287, 292, 330, 560, 810, 856, 934], "At": [51, 255, 330], "BY": [799, 893, 934, 1338, 1341, 1347, 1356, 1357], "Be": 934, "By": [11, 18, 20, 36, 57, 144, 145, 158, 221, 235, 236, 262, 264, 273, 278, 300, 301, 330, 374, 449, 454, 467, 553, 556, 562, 610, 625, 630, 633, 635, 637, 639, 641, 644, 646, 648, 654, 665, 733, 753, 760, 761, 763, 764, 765, 780, 801, 807, 808, 809, 820, 841, 860, 864, 865, 883, 889, 894, 902, 934, 978, 1060, 1065, 1078, 1167, 1210, 1233, 1244, 1319, 1329], "For": [20, 45, 46, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 203, 204, 209, 235, 236, 255, 262, 287, 316, 330, 333, 446, 447, 459, 475, 477, 478, 489, 560, 569, 581, 622, 660, 667, 675, 676, 677, 679, 681, 705, 755, 765, 769, 770, 816, 820, 849, 850, 865, 883, 917, 934, 1070, 1089, 1091, 1092, 1095, 1182, 1207, 1240, 1246, 1254, 1255, 1256, 1258, 1260, 1284, 1308, 1329, 1334], "IF": 1350, "If": [7, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 64, 73, 129, 130, 131, 132, 133, 134, 135, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 175, 176, 177, 188, 192, 204, 209, 212, 219, 221, 223, 231, 232, 233, 235, 236, 239, 240, 244, 251, 255, 262, 264, 265, 266, 270, 273, 275, 277, 280, 281, 284, 285, 287, 288, 294, 295, 297, 298, 299, 330, 333, 342, 344, 367, 374, 379, 387, 401, 427, 431, 432, 446, 447, 456, 459, 485, 500, 506, 518, 539, 548, 553, 554, 560, 568, 569, 576, 577, 583, 585, 610, 615, 617, 620, 622, 624, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 654, 656, 660, 661, 666, 676, 677, 679, 681, 682, 683, 694, 695, 696, 697, 699, 700, 701, 704, 705, 706, 707, 711, 714, 732, 736, 738, 741, 745, 746, 750, 751, 755, 760, 761, 763, 764, 765, 768, 769, 775, 776, 777, 779, 780, 782, 786, 792, 795, 796, 797, 802, 804, 807, 808, 810, 811, 820, 841, 842, 850, 852, 856, 860, 864, 865, 870, 874, 881, 883, 887, 889, 891, 893, 898, 900, 901, 909, 917, 927, 934, 939, 940, 947, 948, 971, 978, 983, 990, 1003, 1016, 1034, 1038, 1039, 1057, 1058, 1067, 1070, 1095, 1111, 1112, 1117, 1131, 1132, 1136, 1153, 1162, 1167, 1168, 1174, 1182, 1201, 1203, 1205, 1207, 1209, 1210, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1229, 1231, 1233, 1236, 1240, 1241, 1245, 1255, 1256, 1258, 1260, 1261, 1262, 1269, 1273, 1274, 1275, 1276, 1278, 1279, 1280, 1283, 1284, 1285, 1286, 1290, 1293, 1301, 1304, 1308, 1310, 1318, 1329, 1334, 1338, 1339, 1341, 1349, 1352, 1357], "In": [57, 64, 146, 148, 159, 160, 163, 174, 178, 184, 189, 207, 209, 212, 221, 236, 237, 240, 251, 255, 262, 288, 297, 330, 333, 568, 569, 610, 630, 690, 691, 820, 842, 856, 860, 865, 866, 883, 900, 934, 1088, 1095, 1201, 1206, 1270, 1329, 1334], "It": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 56, 63, 64, 73, 75, 79, 97, 139, 140, 148, 154, 156, 158, 159, 161, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 186, 199, 237, 247, 254, 277, 287, 292, 299, 307, 316, 330, 333, 334, 419, 420, 500, 560, 569, 580, 617, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 748, 779, 816, 820, 837, 841, 842, 846, 852, 866, 870, 875, 893, 901, 908, 917, 934, 942, 1011, 1027, 1028, 1112, 1203, 1215, 1218, 1220, 1221, 1228, 1230, 1308, 1313, 1329, 1334], "Its": [222, 330, 498, 820, 1110, 1329], "NO": 940, "NOT": [132, 232, 271, 330, 560, 579, 653, 820, 888, 934, 1357], "No": [26, 235, 247, 330, 864, 875, 934], "Not": [210, 235, 330, 483, 513, 514, 820, 841, 854, 864, 934, 1097, 1329], "ON": 1357, "OR": [738, 739, 856, 934, 940, 1348], "ORs": [395, 820, 998, 1329], "On": [728, 820, 868, 934], "One": [57, 199, 251, 287, 292, 330, 343, 609, 740, 752, 768, 774, 777, 785, 787, 790, 791, 800, 820, 846, 934, 940, 1029, 1329], "Or": [220, 221, 236, 262, 276, 300, 309, 330, 333, 476, 630, 663, 760, 761, 763, 764, 807, 808, 810, 816, 820, 859, 860, 865, 883, 892, 910, 934, 1090, 1329], "That": [150, 870, 934], "The": [7, 26, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 62, 63, 65, 66, 71, 72, 74, 75, 76, 84, 88, 89, 97, 98, 100, 129, 131, 132, 133, 135, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 174, 175, 176, 178, 180, 191, 199, 200, 202, 203, 204, 205, 208, 209, 212, 219, 220, 221, 222, 227, 233, 235, 236, 237, 240, 247, 253, 255, 262, 263, 264, 265, 268, 269, 270, 277, 287, 288, 293, 296, 300, 304, 305, 307, 308, 309, 316, 330, 341, 382, 383, 384, 385, 399, 400, 420, 422, 425, 426, 427, 435, 445, 449, 450, 454, 456, 459, 467, 468, 479, 482, 485, 489, 490, 498, 531, 535, 568, 569, 583, 610, 617, 620, 623, 624, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 657, 660, 666, 670, 671, 675, 680, 681, 682, 683, 688, 689, 690, 691, 699, 700, 701, 702, 703, 704, 705, 715, 719, 725, 726, 727, 746, 749, 767, 771, 780, 782, 796, 797, 798, 799, 802, 810, 812, 813, 815, 816, 820, 821, 822, 825, 827, 828, 829, 836, 841, 846, 847, 849, 850, 852, 853, 856, 859, 860, 863, 864, 865, 866, 870, 875, 879, 883, 885, 886, 887, 893, 897, 899, 904, 905, 908, 910, 917, 934, 938, 939, 940, 946, 949, 986, 987, 988, 1002, 1015, 1028, 1029, 1032, 1033, 1034, 1042, 1056, 1060, 1061, 1065, 1067, 1070, 1078, 1079, 1095, 1096, 1099, 1110, 1145, 1149, 1182, 1201, 1203, 1205, 1209, 1210, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1237, 1240, 1245, 1249, 1250, 1259, 1260, 1261, 1262, 1267, 1268, 1269, 1270, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1310, 1312, 1314, 1321, 1323, 1325, 1329, 1330, 1335, 1336, 1337, 1338, 1343, 1357, 1358, 1360], "Then": 163, "There": 1357, "These": [1, 38, 46, 138, 141, 146, 147, 184, 294, 330, 467, 819, 820, 1065, 1078], "To": [45, 64, 210, 330, 409, 425, 426, 483, 484, 667, 674, 675, 676, 679, 690, 691, 700, 701, 702, 703, 712, 820, 854, 934, 1016, 1032, 1033, 1097, 1246, 1253, 1254, 1255, 1258, 1269, 1270, 1291, 1310, 1329, 1357], "Will": [63, 64, 841, 842, 852, 879, 890, 934, 1329], "With": [153, 231, 273, 330, 374, 553, 654, 820, 841, 889, 934, 978, 1131, 1167, 1233, 1329], "_": [1, 57, 61, 184, 255, 285, 289, 330, 367, 404, 405, 539, 668, 676, 678, 680, 685, 686, 692, 695, 696, 1007, 1008, 1010, 1247, 1255, 1259, 1264, 1265, 1271, 1275, 1305, 1329], "__array_ufunc__": 942, "__call__": 816, "__dataframe__": 130, "__enter__": 1357, "__exit__": 1357, "__getattr__": 816, "__getitem__": 715, "__init__": [1, 2, 37, 38, 39, 40, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 171, 909, 1357], "__name__": [234, 330], "_bar_": 770, "_btm_by_a": [400, 820], "_btm_by_b": [400, 820], "_by_ca": [400, 727, 820], "_by_cb": [400, 727, 820], "_check_ord": [63, 64, 841, 842, 852, 879, 890, 934], "_df": [1, 58], "_diff": [304, 330, 904, 934], "_eager": [560, 841, 934], "_expr": [1, 59], "_foo": 574, "_geventdataframeresult": [64, 842, 934], "_is_not_nan": [514, 820], "_is_odd": [268, 330, 885, 934], "_isnan": [513, 820], "_isnul": [516, 820], "_kwarg": [841, 934], "_ldf": 1, "_lf": 60, "_lower_boundari": [221, 330, 860, 934], "_mean_squar": [309, 910], "_not_nul": [515, 820], "_o": [404, 405, 685, 686, 1007, 1008, 1264, 1265], "_revers": [594, 598, 627, 820], "_right": [235, 236, 237, 330, 864, 865, 866, 934], "_storage_account": 39, "_suffix": 599, "_sum": [309, 910], "_top_by_a": [727, 820], "_top_by_b": [727, 820], "_train": [906, 934], "_type_check": [52, 53, 54, 55, 63, 64, 841, 842, 852, 879, 890, 934], "_upper_boundari": [221, 330, 860, 934], "_verbos": 39, "_world": 770, "a1": [46, 58, 60, 330], "a101": 1360, "a123": [46, 330], "a2": [46, 58, 60, 330], "a_1": [696, 1275, 1305, 1329], "a_2": [1305, 1329], "a_3": [1305, 1329], "a_a": 800, "a_agg_list": [221, 330, 860, 934], "a_b_doubl": 766, "a_btm_by_a": [400, 820], "a_btm_by_b": [400, 820], "a_by_ca": [400, 727, 820], "a_by_cb": [400, 727, 820], "a_div_2": 1351, "a_div_5": 1351, "a_interpol": [505, 820], "a_is_even": [277, 330, 799, 893, 934], "a_isnul": [516, 820], "a_lag_": 749, "a_log2": 1351, "a_mod_2": 1351, "a_not_nul": [515, 820], "a_revers": [594, 598, 627, 820], "a_rol": 749, "a_suffix": 599, "a_times_2": [569, 820], "a_times_b": [568, 820], "a_top_by_a": [727, 820], "a_top_by_b": [727, 820], "a_txt": 800, "aa": [479, 667, 679, 767, 820, 940, 1029, 1246, 1258, 1329, 1352], "aaa": [1, 46, 330, 667, 679, 715, 717, 718, 940, 1246, 1258], "aaaa": [987, 988], "aabcdef": 701, "aad": [987, 988], "aag": 32, "aazz": 1352, "ab": [223, 239, 281, 304, 330, 691, 715, 717, 718, 820, 904, 934, 940, 1111, 1136, 1301, 1329, 1350, 1352], "ab12": 691, "ab12cd34ef": 691, "abc": [13, 22, 24, 25, 26, 27, 28, 29, 30, 31, 339, 673, 676, 690, 700, 820, 940, 1252, 1255, 1269, 1270], "abc123": 1352, "abc456": [690, 1269, 1270, 1352], "abcabc": 691, "abcd": 1352, "abcdeff": 700, "abf": [148, 159, 160], "abl": [104, 146, 560], "about": [104, 139, 141, 146, 660, 667, 675, 676, 679, 690, 691, 820, 1240, 1246, 1254, 1255, 1258, 1269, 1270, 1329, 1360], "abov": [46, 236, 255, 330, 333, 810, 865, 934], "abs_a": 1351, "absolut": [148, 159, 160, 167, 168, 169, 170, 338, 475, 477, 478, 820, 945, 1089, 1091, 1092, 1329, 1351], "acc": [755, 756, 769, 794], "accent": 940, "accept": [7, 43, 47, 51, 52, 53, 54, 55, 139, 141, 142, 144, 145, 148, 150, 152, 154, 156, 158, 161, 162, 163, 174, 191, 201, 220, 268, 269, 273, 276, 293, 304, 305, 309, 330, 339, 400, 409, 479, 506, 610, 624, 625, 663, 692, 719, 727, 735, 737, 739, 744, 747, 748, 749, 750, 758, 767, 784, 786, 789, 798, 802, 804, 810, 816, 820, 836, 848, 859, 885, 886, 889, 892, 897, 904, 905, 910, 934, 939, 1016, 1117, 1201, 1209, 1210, 1233, 1271, 1329], "access": [7, 43, 47, 51, 52, 53, 54, 55, 58, 59, 60, 61, 150, 154, 156, 158, 160, 161, 162, 163, 188, 195, 233, 263, 264, 277, 330, 677, 715, 843, 893, 906, 934, 939, 1256, 1360], "accord": [263, 330, 617, 760, 761, 763, 764, 807, 808, 820, 1047, 1203, 1329], "accordingli": [139, 142, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157], "account": [46, 136, 147, 160, 330, 449, 475, 477, 478, 820, 1060, 1089, 1091, 1092, 1329], "accumul": [755, 756, 769, 794], "acg": 32, "achiev": [240, 255, 316, 330, 405, 569, 686, 820, 1008, 1182, 1265, 1329], "aco": 1350, "acosd": 1350, "across": [46, 57, 147, 149, 200, 222, 235, 242, 244, 249, 270, 280, 330, 422, 498, 583, 737, 739, 755, 756, 758, 784, 786, 789, 804, 820, 847, 864, 887, 934, 1110, 1329], "action": [45, 330], "activ": [13, 14, 24, 25, 27, 28, 29, 30, 34, 35, 532, 676, 1146, 1255], "actual": [46, 132, 174, 178, 265, 330, 1235, 1329, 1352, 1359], "ad": [44, 46, 132, 149, 221, 277, 287, 292, 294, 299, 304, 305, 330, 345, 459, 482, 576, 577, 719, 755, 756, 799, 820, 860, 893, 901, 904, 905, 934, 940, 1070, 1096, 1308, 1313, 1329], "adbc": [44, 146, 147, 330], "adbc_driver_manag": 166, "adbc_ingest": [44, 330], "add": [45, 46, 145, 209, 221, 240, 304, 305, 306, 307, 330, 333, 420, 596, 597, 598, 599, 617, 719, 765, 769, 810, 820, 860, 864, 904, 905, 906, 907, 908, 934, 1095, 1329, 1334], "add_calendar_dai": 765, "add_calendar_month": 765, "add_calendar_year": 765, "add_chart": [46, 330], "add_dai": 765, "add_format": [46, 330], "add_hour": 765, "add_milli": 765, "add_second": 765, "add_seri": [46, 330], "add_week": 765, "add_worksheet": [46, 330], "addit": [7, 35, 42, 44, 45, 46, 132, 143, 148, 149, 159, 160, 172, 174, 176, 178, 204, 208, 220, 238, 253, 268, 269, 276, 289, 296, 304, 305, 309, 330, 339, 436, 479, 482, 610, 663, 667, 675, 676, 679, 690, 691, 715, 719, 744, 747, 748, 749, 750, 767, 798, 799, 802, 816, 820, 853, 859, 885, 886, 892, 899, 904, 905, 910, 934, 940, 1035, 1043, 1096, 1246, 1254, 1255, 1258, 1269, 1270, 1311, 1329, 1339, 1357], "addition": [65, 149, 263, 330, 940], "address": 676, "adjac": [46, 330], "adjust": [475, 477, 478, 660, 820, 1089, 1091, 1092, 1240, 1329], "adl": [148, 159, 160], "adlf": 160, "advanc": [46, 255, 330, 379, 560, 593, 596, 598, 600, 601, 983, 1174, 1360], "advantag": [46, 184, 254, 330], "advis": [46, 56, 97, 330], "aedt": 762, "aeiuo": [679, 1258], "af1": 57, "af2": 57, "af3": 57, "affect": [44, 167, 168, 169, 170, 330], "afm": 160, "afoo": [906, 934], "after": [46, 132, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 191, 192, 209, 293, 296, 330, 399, 400, 401, 479, 610, 620, 714, 726, 727, 820, 836, 897, 899, 934, 1002, 1095, 1205, 1293, 1314, 1329, 1344], "afterward": [56, 810], "ag": [247, 330, 875, 934, 1358], "again": [569, 820], "against": [44, 106, 144, 146, 212, 277, 330, 532, 679, 799, 856, 893, 934, 1146, 1258, 1338, 1357, 1359, 1360], "agg": [220, 221, 255, 262, 330, 340, 390, 395, 398, 400, 485, 487, 492, 495, 568, 569, 610, 662, 663, 727, 734, 760, 763, 782, 820, 841, 842, 852, 859, 860, 879, 883, 890, 934, 940], "agg_group": [772, 820], "agg_list": [568, 820], "aggreg": [141, 144, 145, 148, 156, 159, 214, 220, 221, 241, 243, 245, 248, 251, 255, 256, 257, 262, 278, 279, 298, 301, 309, 310, 312, 314, 330, 340, 390, 395, 398, 485, 501, 568, 569, 610, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 736, 737, 738, 739, 755, 756, 757, 758, 769, 774, 783, 784, 786, 788, 789, 794, 803, 804, 820, 860, 870, 871, 872, 873, 876, 877, 880, 883, 894, 895, 902, 910, 911, 913, 915, 934, 993, 998, 1001, 1113, 1215, 1216, 1217, 1219, 1222, 1223, 1224, 1329, 1345, 1347, 1350, 1356], "aggregate_funct": [255, 330, 940], "aho": [668, 678, 680, 692, 1247, 1257, 1259, 1271], "aiosqlit": 146, "alchemy_conn": 146, "algorithm": [190, 330, 346, 668, 678, 680, 692, 740, 820, 835, 934, 950, 1247, 1257, 1259, 1271, 1329], "alia": [1, 18, 57, 59, 61, 65, 95, 195, 221, 239, 255, 262, 296, 304, 307, 330, 333, 339, 343, 383, 384, 385, 386, 389, 399, 402, 404, 405, 406, 414, 415, 416, 417, 418, 420, 423, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 468, 469, 470, 473, 474, 487, 489, 494, 496, 502, 503, 506, 509, 512, 520, 522, 544, 556, 562, 567, 569, 573, 576, 577, 579, 581, 586, 589, 591, 593, 604, 605, 609, 611, 615, 617, 620, 622, 650, 652, 667, 668, 669, 670, 672, 673, 675, 676, 678, 679, 680, 681, 685, 686, 692, 693, 694, 695, 696, 697, 698, 702, 703, 705, 715, 716, 717, 718, 720, 725, 726, 728, 734, 735, 741, 742, 743, 747, 748, 749, 750, 760, 763, 765, 766, 769, 770, 775, 778, 779, 781, 782, 794, 798, 802, 807, 810, 820, 860, 862, 869, 883, 899, 904, 908, 934, 1028, 1035, 1036, 1039, 1042, 1043, 1044, 1045, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1136, 1203, 1208, 1254, 1255, 1259, 1270, 1275, 1276, 1329], "alias": [277, 330, 576, 577, 893, 934], "alic": [144, 1358], "align": [16, 21, 22, 46, 57, 65, 330, 1358], "align_fram": 65, "align_ful": 65, "align_inn": 65, "align_left": 65, "align_right": 65, "all": [1, 10, 11, 14, 19, 23, 26, 31, 36, 43, 45, 46, 51, 52, 55, 57, 63, 70, 98, 115, 117, 129, 134, 140, 144, 145, 148, 149, 150, 152, 154, 155, 156, 158, 159, 161, 162, 171, 172, 175, 178, 184, 189, 190, 192, 199, 201, 203, 204, 211, 223, 228, 230, 232, 233, 234, 235, 237, 238, 239, 244, 246, 250, 251, 255, 258, 259, 263, 264, 265, 269, 275, 276, 280, 281, 285, 287, 288, 292, 295, 297, 298, 299, 300, 305, 307, 330, 333, 343, 345, 367, 382, 400, 413, 419, 425, 426, 427, 428, 459, 479, 484, 490, 497, 498, 501, 504, 508, 511, 515, 516, 521, 531, 532, 539, 557, 560, 568, 590, 593, 594, 596, 597, 598, 599, 600, 601, 608, 610, 620, 625, 627, 631, 655, 661, 663, 669, 673, 676, 677, 681, 684, 687, 691, 699, 700, 701, 705, 727, 737, 746, 748, 755, 756, 757, 758, 767, 769, 774, 775, 778, 786, 794, 802, 803, 804, 810, 816, 820, 826, 832, 835, 838, 841, 842, 846, 848, 849, 850, 852, 855, 864, 866, 870, 874, 879, 881, 886, 890, 891, 892, 898, 900, 901, 905, 906, 908, 934, 940, 971, 1027, 1029, 1032, 1033, 1034, 1035, 1070, 1111, 1118, 1130, 1136, 1145, 1146, 1153, 1171, 1174, 1205, 1210, 1215, 1241, 1248, 1252, 1255, 1256, 1259, 1260, 1263, 1270, 1278, 1279, 1280, 1284, 1301, 1310, 1329, 1333, 1334, 1339, 1341, 1346, 1347, 1352, 1356, 1357, 1359, 1360], "all_compat": 1341, "all_data": 1357, "all_horizont": [203, 204, 330, 736, 849, 850, 934], "all_stat": 36, "alloc": [141, 144, 145, 207, 258, 330, 820, 909, 1088, 1329], "allow": [1, 14, 45, 46, 52, 53, 54, 55, 56, 65, 97, 106, 130, 146, 149, 158, 161, 162, 163, 164, 171, 174, 175, 178, 184, 188, 233, 236, 238, 263, 264, 266, 288, 289, 292, 295, 308, 330, 402, 406, 449, 456, 459, 548, 568, 569, 576, 577, 622, 651, 704, 706, 707, 820, 864, 865, 870, 874, 898, 906, 934, 938, 940, 1060, 1067, 1070, 1162, 1182, 1207, 1227, 1283, 1285, 1286, 1310, 1311, 1329, 1352, 1360], "allow_alias": [576, 577], "allow_chunk": [174, 178], "allow_copi": [130, 188, 288, 330, 1310, 1329], "allow_dupl": [617, 820, 1203, 1329], "allow_exact_match": [236, 330, 865, 934], "allow_infin": [174, 178], "allow_masked_out": [174, 178], "allow_missing_column": [156, 163], "allow_nul": [171, 174, 178, 1360], "allow_object": 780, "allow_parallel": [236, 330, 864, 865, 934], "allow_pyarrow_filt": 164, "allow_time_zon": [174, 175, 178], "allowed_dtyp": [174, 175, 178, 1360], "almost": [64, 240, 316, 330, 704, 706, 707, 842, 934, 938, 1182, 1283, 1285, 1286, 1329], "along": [7, 43, 45, 47, 51, 52, 53, 54, 55, 148, 154, 156, 158, 159, 161, 162, 163, 330, 934], "alpha": [475, 477, 478, 820, 852, 879, 890, 934, 940, 1089, 1091, 1092, 1329], "alpha_i": [476, 820, 1090, 1329], "alphabet": [940, 1360], "alphanumer": [712, 940, 1291], "alreadi": [44, 45, 105, 287, 330, 419, 532, 584, 732, 820, 890, 934, 1027, 1146, 1318, 1329], "also": [2, 33, 43, 46, 52, 56, 132, 146, 149, 150, 155, 156, 158, 163, 173, 174, 177, 178, 184, 205, 220, 221, 247, 251, 255, 262, 264, 268, 276, 287, 299, 304, 307, 330, 415, 418, 427, 449, 453, 459, 485, 506, 569, 576, 577, 610, 620, 624, 625, 663, 690, 691, 692, 699, 700, 715, 746, 755, 756, 759, 762, 769, 771, 794, 810, 819, 820, 826, 859, 860, 875, 883, 885, 892, 901, 904, 906, 908, 934, 940, 1034, 1064, 1117, 1205, 1209, 1210, 1248, 1269, 1270, 1271, 1278, 1329, 1333, 1339, 1341, 1344, 1348, 1352, 1355, 1357, 1358], "alt": [330, 333, 1329, 1334], "altair": [166, 330, 333, 1329, 1334], "altern": [2, 46, 330, 816, 1349], "although": [277, 330, 893, 934], "alwai": [19, 43, 45, 52, 73, 75, 79, 144, 191, 212, 220, 235, 236, 240, 293, 316, 330, 399, 400, 568, 580, 704, 726, 727, 810, 820, 836, 856, 864, 865, 870, 897, 934, 940, 1002, 1182, 1283, 1314, 1329, 1338, 1339, 1357, 1360], "am": [693, 1272], "amarillo": 1352, "amaz": [330, 333, 1329, 1334], "amazonaw": 38, "ambigu": [452, 453, 454, 467, 704, 707, 762, 1063, 1064, 1065, 1078, 1283, 1286], "america": 763, "amount": [56, 74, 97, 154, 158, 161, 162, 569, 765, 820, 1346], "amsterdam": [453, 1064], "an": [1, 7, 36, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 58, 60, 61, 65, 73, 74, 75, 102, 106, 109, 112, 119, 121, 129, 131, 132, 135, 139, 141, 144, 145, 146, 147, 148, 149, 151, 154, 155, 156, 158, 159, 160, 161, 162, 163, 172, 174, 178, 193, 194, 195, 201, 207, 210, 214, 216, 221, 232, 233, 234, 236, 237, 240, 251, 255, 259, 260, 262, 263, 267, 277, 282, 288, 292, 294, 298, 299, 304, 307, 316, 330, 333, 341, 363, 366, 378, 384, 390, 393, 395, 396, 398, 415, 416, 417, 418, 419, 420, 427, 431, 432, 449, 453, 456, 470, 476, 484, 485, 491, 492, 495, 529, 532, 535, 537, 559, 560, 568, 569, 581, 583, 593, 594, 615, 616, 617, 625, 626, 630, 631, 632, 634, 636, 638, 640, 643, 645, 647, 666, 667, 670, 676, 679, 683, 704, 706, 707, 709, 711, 725, 728, 736, 741, 745, 760, 761, 763, 764, 766, 768, 771, 775, 776, 777, 778, 779, 780, 792, 794, 795, 798, 802, 807, 808, 810, 811, 816, 820, 838, 839, 840, 842, 846, 848, 852, 856, 860, 865, 866, 870, 879, 881, 883, 884, 890, 893, 901, 904, 906, 908, 909, 917, 931, 934, 938, 939, 940, 967, 970, 982, 987, 993, 996, 998, 999, 1001, 1015, 1017, 1023, 1024, 1025, 1026, 1027, 1034, 1038, 1067, 1081, 1088, 1090, 1131, 1143, 1146, 1149, 1151, 1173, 1182, 1210, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1228, 1230, 1245, 1246, 1249, 1255, 1258, 1262, 1283, 1285, 1286, 1288, 1290, 1310, 1312, 1329, 1347, 1349, 1352, 1356, 1357, 1359], "ana": [693, 1272], "anan": [693, 1272], "ananab": 1352, "and_": 820, "ang": 1352, "angl": [742, 743], "ani": [2, 3, 4, 5, 6, 7, 10, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 62, 63, 64, 72, 73, 75, 79, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 186, 189, 191, 197, 201, 203, 204, 209, 211, 212, 214, 216, 231, 233, 234, 235, 236, 237, 240, 244, 254, 259, 263, 264, 265, 277, 280, 283, 284, 287, 288, 289, 292, 293, 295, 298, 299, 307, 330, 333, 334, 339, 342, 343, 367, 399, 400, 401, 419, 420, 455, 473, 474, 484, 485, 489, 492, 494, 496, 500, 510, 520, 527, 532, 539, 567, 568, 569, 576, 586, 589, 591, 593, 594, 596, 598, 600, 601, 604, 605, 609, 614, 617, 624, 625, 626, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 652, 656, 666, 668, 682, 700, 701, 702, 703, 704, 706, 707, 709, 711, 720, 726, 727, 728, 735, 736, 737, 739, 748, 750, 751, 752, 779, 780, 782, 786, 804, 810, 820, 836, 841, 842, 848, 849, 850, 852, 855, 856, 864, 865, 866, 878, 881, 893, 897, 898, 901, 908, 909, 934, 938, 940, 942, 944, 947, 971, 1002, 1011, 1027, 1028, 1066, 1085, 1086, 1095, 1098, 1103, 1105, 1107, 1112, 1122, 1131, 1134, 1141, 1146, 1153, 1181, 1182, 1193, 1194, 1203, 1209, 1210, 1211, 1215, 1218, 1220, 1221, 1228, 1229, 1245, 1247, 1261, 1283, 1285, 1286, 1288, 1290, 1308, 1309, 1310, 1311, 1313, 1314, 1329, 1334, 1357, 1360], "anna": [247, 330, 875, 934], "annex": [687, 1266], "anoth": [99, 173, 192, 200, 206, 220, 236, 270, 330, 419, 422, 429, 505, 535, 573, 579, 583, 624, 633, 635, 637, 639, 641, 644, 646, 648, 679, 820, 838, 847, 859, 865, 887, 906, 934, 1027, 1036, 1087, 1095, 1116, 1149, 1209, 1210, 1258, 1329, 1351, 1352], "anti": [235, 330, 864, 917, 934, 1228, 1230, 1329, 1345], "any_horizont": 738, "anyth": [45, 263, 330], "anywher": [386, 389, 704, 706, 707, 1283, 1285, 1286], "ap": 1352, "apach": [41, 47, 48, 51, 142, 146, 147, 150, 152, 160, 187, 330, 943], "apaya": [705, 1284], "api": [0, 2, 7, 38, 43, 47, 51, 52, 53, 54, 55, 130, 154, 156, 158, 161, 162, 163, 164, 188, 240, 316, 330, 569, 782, 820, 917, 934, 1182, 1329, 1356], "apia": [428, 1035], "app": [406, 698, 1009, 1277], "appear": [46, 69, 132, 169, 170, 330, 691, 730, 820, 940, 1316, 1329, 1358], "append": [44, 45, 174, 209, 235, 236, 237, 330, 621, 810, 820, 864, 865, 866, 934, 1095, 1329], "appl": [196, 225, 235, 259, 260, 283, 311, 312, 314, 315, 317, 318, 319, 320, 321, 322, 323, 330, 400, 402, 406, 627, 672, 698, 727, 820, 864, 881, 912, 913, 915, 916, 918, 919, 920, 921, 922, 923, 924, 934, 1004, 1009, 1251, 1277, 1345, 1352], "appli": [16, 26, 43, 46, 52, 65, 139, 146, 158, 171, 174, 178, 184, 199, 214, 237, 240, 254, 276, 277, 287, 316, 330, 355, 430, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 455, 457, 468, 469, 471, 477, 478, 568, 569, 614, 632, 633, 634, 635, 638, 639, 645, 646, 663, 690, 691, 704, 706, 707, 711, 744, 755, 756, 769, 781, 782, 794, 799, 810, 820, 846, 866, 870, 878, 892, 893, 917, 934, 1016, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1051, 1052, 1053, 1055, 1056, 1059, 1061, 1062, 1066, 1068, 1079, 1080, 1082, 1091, 1092, 1182, 1216, 1217, 1219, 1223, 1269, 1270, 1283, 1285, 1286, 1290, 1329, 1338], "applic": [288, 330, 569, 820], "apply_on_context_ent": 184, "appropri": [46, 164, 212, 288, 330, 459, 620, 820, 856, 934, 1070, 1205, 1329], "approx": [346, 820], "approx_n_uniqu": [330, 820, 934, 1329], "approxim": [51, 190, 330, 346, 476, 740, 820, 835, 934, 950, 1090, 1329, 1351, 1360], "april": [456, 1067, 1352, 1353], "ar": [1, 7, 16, 17, 23, 26, 36, 38, 40, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 64, 65, 96, 97, 104, 110, 126, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 174, 175, 176, 178, 184, 188, 191, 192, 197, 199, 203, 204, 207, 210, 212, 213, 214, 219, 220, 221, 233, 235, 236, 237, 238, 240, 246, 247, 253, 255, 262, 263, 264, 265, 268, 269, 273, 276, 283, 287, 288, 289, 292, 293, 297, 299, 300, 304, 305, 308, 309, 330, 342, 344, 358, 374, 379, 399, 400, 401, 409, 415, 417, 418, 427, 454, 459, 467, 472, 474, 475, 476, 477, 478, 483, 485, 506, 508, 510, 511, 513, 514, 515, 516, 518, 523, 553, 560, 568, 605, 610, 617, 620, 623, 624, 625, 626, 630, 633, 635, 637, 639, 641, 642, 644, 646, 648, 654, 657, 660, 662, 663, 668, 677, 681, 683, 684, 688, 689, 690, 691, 692, 694, 705, 707, 709, 714, 719, 721, 725, 726, 727, 736, 737, 739, 744, 747, 748, 749, 750, 751, 758, 760, 761, 763, 764, 779, 784, 786, 789, 798, 802, 804, 807, 808, 810, 812, 813, 815, 819, 820, 821, 822, 825, 826, 827, 828, 829, 832, 836, 841, 842, 846, 849, 850, 854, 856, 859, 860, 864, 865, 866, 870, 874, 875, 879, 881, 883, 885, 886, 889, 892, 897, 900, 901, 904, 905, 906, 910, 934, 938, 940, 947, 948, 962, 978, 983, 1002, 1006, 1016, 1025, 1026, 1034, 1065, 1070, 1078, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1097, 1099, 1101, 1117, 1120, 1122, 1123, 1125, 1126, 1127, 1128, 1132, 1137, 1167, 1174, 1194, 1203, 1205, 1209, 1210, 1211, 1221, 1233, 1237, 1240, 1247, 1256, 1260, 1262, 1267, 1268, 1269, 1270, 1273, 1284, 1286, 1288, 1293, 1300, 1308, 1310, 1311, 1312, 1314, 1321, 1323, 1325, 1329, 1330, 1333, 1335, 1336, 1337, 1339, 1341, 1344, 1349, 1357, 1360], "arbitrari": [86, 216, 330, 422, 820, 847, 934, 940], "arbitrarili": [240, 330], "arcco": [820, 1329], "arccosh": [820, 1329], "arcsin": [820, 1329], "arcsinh": [820, 1329], "arctan": [742, 743, 820, 1329], "arctan2": 743, "arctanh": [820, 1329], "aren": [43, 52, 330, 934], "arg": [37, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 141, 212, 254, 330, 355, 614, 744, 770, 820, 856, 878, 934, 1182, 1329, 1342], "arg_max": [820, 1329], "arg_min": [820, 1329], "arg_sort": [820, 1329], "arg_tru": [745, 820, 1329], "arg_uniqu": [820, 1329], "arg_wher": [356, 820], "argmax": [568, 820], "argument": [7, 42, 45, 51, 139, 141, 143, 144, 148, 156, 158, 159, 174, 176, 178, 197, 201, 208, 220, 221, 236, 253, 254, 262, 268, 269, 276, 289, 296, 300, 304, 305, 309, 330, 454, 467, 479, 485, 506, 568, 610, 614, 630, 663, 699, 700, 701, 719, 736, 742, 743, 744, 747, 748, 749, 750, 752, 767, 798, 802, 810, 816, 820, 848, 853, 859, 860, 865, 878, 883, 885, 886, 892, 899, 904, 905, 910, 931, 934, 940, 1065, 1078, 1117, 1278, 1279, 1280, 1311, 1329, 1351, 1352], "aris": 146, "arithmet": [214, 330], "arm": 166, "arm64": 166, "around": [43, 52, 330, 934], "arr": [288, 330, 812, 1310, 1321, 1329], "arr_bar": 1347, "arr_foo": 1347, "arrai": [129, 133, 144, 145, 148, 156, 159, 186, 207, 208, 282, 287, 288, 289, 330, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 415, 416, 417, 418, 527, 542, 543, 544, 545, 547, 556, 557, 559, 562, 564, 568, 626, 632, 634, 636, 638, 640, 643, 645, 647, 653, 725, 748, 766, 799, 820, 853, 934, 939, 942, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 990, 1023, 1024, 1025, 1026, 1031, 1088, 1141, 1156, 1157, 1158, 1159, 1161, 1169, 1170, 1171, 1173, 1176, 1178, 1179, 1211, 1216, 1217, 1219, 1222, 1223, 1224, 1231, 1235, 1304, 1308, 1310, 1311, 1312, 1329, 1350, 1356, 1359], "array_agg": 1350, "array_contain": 1350, "array_get": 1350, "array_length": 1350, "array_low": 1350, "array_mean": 1350, "array_revers": 1350, "array_sum": 1350, "array_to_str": 1350, "array_uniqu": 1350, "array_upp": 1350, "arraylik": [1031, 1329], "arrow": [47, 48, 53, 129, 146, 147, 150, 152, 161, 187, 233, 264, 265, 282, 284, 288, 330, 934, 943, 1304, 1310, 1329], "arrowinvaliderror": [45, 330], "as_": [1329, 1334], "as_dict": [145, 253, 330], "as_expr": 940, "as_seri": [192, 283, 330, 838, 934, 940], "asarrai": [186, 942], "ascend": [221, 262, 330, 610, 630, 820, 860, 883, 934], "ascii": [13, 26, 404, 405, 668, 678, 680, 681, 685, 686, 692, 694, 705, 714, 940, 1007, 1008, 1247, 1257, 1259, 1260, 1264, 1265, 1271, 1273, 1284, 1293], "ascii_borders_onli": 26, "ascii_borders_only_condens": 26, "ascii_case_insensit": [668, 678, 680, 692, 1247, 1257, 1259, 1271], "ascii_ful": 26, "ascii_full_condens": 26, "ascii_horizontal_onli": 26, "ascii_lett": 1360, "ascii_markdown": 26, "ascii_no_bord": 26, "ascii_onli": 940, "ascii_t": 184, "ascii_uppercas": [298, 330], "asd": [669, 676, 1248, 1255], "asia": [136, 940, 1040, 1041, 1068], "asid": 459, "asin": 1350, "asind": 1350, "asof": [236, 330, 865, 934], "asofjoinstrategi": [236, 330, 865, 934], "assert": [167, 168, 169, 170, 174, 178, 262, 330, 832, 940], "assert_frame_equ": [168, 169, 206, 330, 1360], "assert_frame_not_equ": [167, 170], "assert_series_equ": [167, 170, 1087, 1329, 1360], "assert_series_not_equ": [168, 169], "assert_someth": 172, "assertionerror": [167, 168, 169, 170], "assign": [172, 221, 315, 330, 379, 560, 610, 620, 696, 697, 820, 860, 916, 934, 983, 1174, 1205, 1275, 1276, 1329], "associ": [44, 46, 57, 147, 149, 173, 176, 265, 330, 939, 1340, 1342, 1346], "assum": [38, 265, 330, 870, 917, 934, 1352], "assume_rol": 38, "assumpt": [568, 820], "async": [146, 842, 934], "async_engin": 146, "asynchron": [64, 146, 842, 934], "asyncio": [64, 146, 842, 934], "asyncresult": [64, 842, 934], "asyncsurrealdb": 146, "ata": 32, "atan": 1350, "atan2": [742, 743, 1350], "atan2_ab": 1354, "atan2d": [743, 1350], "atan2d_ab": 1354, "atand": 1350, "atg": 32, "atgataaaggag": 32, "atol": [167, 168, 169, 170], "attain": [663, 820], "attempt": [1, 422, 820, 847, 934], "attr": [330, 333, 1329, 1334], "attribut": [66, 69, 72, 73, 74, 75, 76, 84, 88, 171, 330, 333, 812, 813, 815, 816, 821, 822, 825, 827, 828, 829, 909, 934, 1321, 1323, 1325, 1329, 1330, 1334, 1335, 1336, 1337], "attributeerror": 1, "audi": [283, 330, 627, 820], "august": 459, "australia": 762, "auth": 40, "authent": [2, 45, 148, 156, 158, 159, 160, 161, 163, 330], "author": 1, "auto": [2, 7, 43, 45, 47, 51, 52, 53, 54, 55, 65, 129, 131, 132, 133, 135, 148, 153, 154, 156, 158, 159, 161, 162, 163, 294, 330, 934, 1360], "auto_structifi": [268, 304, 330, 885, 904, 934], "autofilt": [46, 330], "autofit": [46, 330], "autogener": [144, 145, 149, 155, 158], "automat": [2, 14, 43, 52, 65, 129, 131, 132, 133, 135, 136, 141, 144, 145, 146, 147, 153, 154, 156, 158, 161, 162, 174, 178, 180, 268, 277, 304, 330, 568, 625, 699, 700, 701, 799, 820, 885, 893, 904, 934, 1209, 1210, 1278, 1279, 1280, 1313, 1329, 1339, 1341, 1344, 1357], "autumn": [690, 691], "avail": [4, 5, 6, 46, 51, 55, 138, 146, 147, 148, 159, 160, 172, 184, 255, 277, 329, 330, 459, 620, 799, 812, 813, 815, 819, 820, 821, 822, 825, 826, 827, 828, 829, 832, 893, 932, 933, 934, 940, 1029, 1205, 1321, 1323, 1325, 1329, 1330, 1333, 1335, 1336, 1337, 1348], "available_timezon": [72, 940], "averag": [46, 330, 475, 476, 477, 478, 620, 820, 1089, 1090, 1091, 1092, 1205, 1329, 1346], "avg": 1350, "avocado": 1352, "avoid": [174, 178, 212, 264, 330, 341, 820, 856, 934], "avro": [41, 142, 330, 832], "avrocompress": [41, 330], "aw": [7, 38, 43, 47, 51, 52, 53, 54, 55, 148, 154, 156, 158, 159, 161, 162, 163, 330, 934], "awai": 1351, "await": [64, 146, 842, 928, 934], "awar": [16, 146, 233, 264, 265, 284, 330, 476, 668, 678, 680, 692, 707, 820, 934, 1090, 1247, 1257, 1259, 1271, 1286, 1329], "aws_access_key_id": [45, 148, 159, 163, 330], "aws_region": [45, 159, 163, 330], "aws_secret_access_kei": [45, 148, 159, 163, 330], "awsassumerolekwarg": 38, "axi": [246, 297, 330, 333, 742, 743, 874, 900, 934, 1329, 1334], "aya": [694, 1273, 1284], "az": [148, 159, 160], "azur": [7, 39, 43, 45, 47, 51, 52, 53, 54, 55, 148, 154, 156, 158, 159, 160, 161, 162, 163, 330, 934], "azure_storage_account_kei": [148, 159, 160], "azure_storage_account_nam": [148, 159, 160], "b": [1, 16, 41, 43, 45, 47, 48, 51, 60, 65, 88, 101, 104, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 146, 149, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 230, 231, 232, 233, 234, 235, 238, 239, 241, 243, 245, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 273, 275, 276, 277, 278, 279, 281, 282, 283, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 339, 341, 342, 344, 345, 355, 357, 362, 367, 382, 383, 384, 385, 386, 387, 388, 389, 390, 395, 398, 400, 401, 413, 420, 424, 456, 459, 479, 481, 483, 484, 485, 487, 490, 497, 498, 501, 504, 505, 506, 508, 511, 513, 514, 515, 516, 521, 527, 532, 539, 549, 550, 551, 552, 568, 569, 574, 590, 593, 594, 595, 596, 597, 598, 599, 607, 608, 610, 614, 617, 620, 624, 625, 627, 629, 655, 661, 663, 670, 674, 679, 683, 690, 691, 715, 716, 727, 730, 734, 736, 737, 738, 739, 740, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 766, 767, 768, 769, 770, 773, 774, 775, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 796, 797, 799, 801, 802, 803, 804, 805, 809, 816, 820, 835, 836, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 934, 940, 946, 949, 971, 986, 987, 988, 989, 990, 991, 992, 1006, 1010, 1011, 1028, 1031, 1067, 1070, 1084, 1087, 1088, 1095, 1098, 1117, 1122, 1141, 1163, 1164, 1165, 1166, 1203, 1208, 1249, 1253, 1258, 1262, 1269, 1270, 1294, 1296, 1297, 1299, 1311, 1316, 1329, 1339, 1341, 1342, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357], "b1": [58, 60], "b2": [58, 60], "b345": [46, 330], "b4": [46, 330], "b_b": [277, 330], "b_btm_by_a": [400, 820], "b_btm_by_b": [400, 820], "b_by_ca": [400, 727, 820], "b_by_cb": [400, 727, 820], "b_is_not_nan": [514, 820], "b_isnan": [513, 820], "b_isnul": [516, 820], "b_not_nul": [515, 820], "b_revers": [594, 598, 627, 820], "b_suffix": 599, "b_sum": [309, 910], "b_top_by_a": [727, 820], "b_top_by_b": [727, 820], "ba": [422, 479, 583, 698, 767, 820, 940], "back": [10, 57, 163, 209, 221, 270, 288, 289, 330, 583, 610, 691, 820, 841, 860, 887, 909, 934, 1095, 1311, 1329], "backend": [45, 146, 147, 148, 159, 160, 330, 333, 1329, 1334], "background": [330, 334, 841, 933, 934], "backward": [51, 55, 211, 236, 330, 382, 427, 447, 484, 820, 855, 865, 934, 1034, 1058, 1098, 1329], "backward_fil": [490, 654, 820], "bad": [690, 691, 1269, 1270], "balanc": [177, 179, 1360], "ballon_dor": [675, 677, 1254, 1256], "banana": [196, 283, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 400, 627, 672, 698, 727, 820, 913, 915, 918, 919, 920, 921, 922, 923, 924, 1352], "banded_column": [46, 330], "banded_row": [46, 330], "bar": [41, 43, 45, 47, 48, 49, 50, 51, 140, 153, 154, 192, 195, 196, 197, 201, 202, 203, 204, 205, 206, 209, 212, 214, 216, 217, 218, 223, 225, 226, 227, 229, 235, 239, 240, 241, 242, 243, 244, 245, 248, 249, 252, 255, 257, 259, 260, 263, 266, 267, 268, 270, 275, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 295, 296, 301, 302, 303, 308, 330, 333, 403, 422, 503, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 660, 669, 671, 674, 676, 677, 693, 695, 697, 702, 703, 740, 751, 752, 753, 768, 773, 774, 777, 778, 783, 785, 787, 788, 790, 791, 798, 801, 805, 809, 810, 816, 820, 838, 843, 844, 848, 849, 850, 851, 856, 862, 863, 864, 877, 881, 884, 885, 898, 899, 903, 934, 939, 940, 1005, 1153, 1240, 1248, 1250, 1253, 1255, 1256, 1272, 1276, 1281, 1282, 1329, 1343, 1345, 1346, 1347, 1349, 1352, 1355], "bar2": 1352, "bar22": [214, 330], "bar_": 695, "bar_3": [285, 330], "bar_4": [285, 330], "bar_a": [255, 330], "bar_at_2": 1347, "bar_avg": 1346, "bar_b": [255, 330], "bar_color": [46, 330], "bar_max": 1346, "bar_median": 1346, "bar_min": 1346, "bar_negative_border_color_sam": [46, 330], "bar_negative_color_sam": [46, 330], "bar_std": 1346, "bar_sum": 1346, "bar_var": 1346, "bare": [576, 577, 940], "base": [37, 46, 70, 115, 117, 149, 176, 204, 212, 221, 237, 262, 330, 428, 436, 472, 475, 476, 477, 478, 485, 500, 505, 563, 564, 568, 569, 615, 617, 625, 630, 633, 635, 637, 639, 641, 644, 646, 648, 709, 820, 856, 860, 866, 883, 934, 940, 1035, 1043, 1084, 1089, 1090, 1091, 1092, 1112, 1116, 1177, 1178, 1182, 1201, 1203, 1209, 1210, 1288, 1320, 1329, 1345, 1351, 1360], "base64": [384, 385, 670, 671, 987, 988, 1249, 1250], "base_nam": [294, 330], "base_utc_offset": [436, 1043], "baseexcept": 1357, "basi": [46, 149, 174, 330], "basic": [46, 186, 330, 575, 942, 1360], "basic_chart": [46, 330], "batch": [48, 63, 64, 138, 139, 145, 146, 152, 154, 162, 164, 264, 292, 330, 841, 842, 870, 934], "batch_siz": [43, 52, 139, 144, 145, 146, 154, 162, 164, 292, 330, 934], "batchedcsvread": 145, "baz": [216, 226, 227, 296, 330, 677, 695, 697, 768, 777, 791, 816, 863, 899, 934, 939, 940, 1256, 1276, 1343, 1349, 1352], "bb": [940, 1029, 1329, 1352, 1357], "bbb": [1, 46, 330, 715, 717, 718, 940], "bc": [679, 691, 803, 1258], "bcbc45": 1352, "bea": 18, "bear": 940, "bearer": 2, "bearer_token": 2, "beauti": 18, "becaus": [154, 162, 207, 221, 238, 240, 298, 316, 330, 489, 532, 560, 820, 860, 917, 934, 1088, 1146, 1182, 1329], "becom": [176, 236, 329, 330, 865, 932, 933, 934], "bed3": [46, 330], "been": [11, 36, 46, 181, 188, 311, 330, 491, 569, 587, 620, 820, 912, 1205, 1329], "beetl": [283, 330, 627, 820], "befor": [46, 71, 72, 139, 141, 144, 146, 149, 158, 164, 167, 168, 169, 170, 180, 184, 209, 221, 236, 277, 287, 292, 296, 330, 393, 394, 396, 397, 417, 418, 419, 568, 610, 611, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 674, 714, 721, 749, 796, 797, 820, 860, 862, 865, 899, 934, 996, 997, 999, 1000, 1025, 1026, 1027, 1095, 1198, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1253, 1293, 1300, 1329, 1345], "beforehand": [704, 706, 707, 1283, 1285, 1286], "begin": [18, 46, 330, 475, 477, 478, 675, 705, 820, 1089, 1091, 1092, 1254, 1284, 1329], "behav": [212, 330, 485, 569, 700, 701, 820, 856, 934], "behavior": [51, 55, 156, 163, 203, 204, 212, 235, 236, 330, 366, 491, 535, 537, 674, 768, 777, 820, 849, 850, 856, 864, 865, 931, 934, 970, 1149, 1151, 1253], "behaviour": [16, 57, 203, 204, 277, 330, 667, 675, 676, 679, 690, 691, 728, 799, 820, 849, 850, 893, 934, 1246, 1254, 1255, 1258, 1269, 1270], "behind": 180, "being": [2, 3, 4, 5, 6, 7, 19, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 139, 140, 144, 145, 146, 148, 149, 154, 155, 156, 158, 159, 161, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 192, 208, 237, 277, 285, 287, 292, 299, 330, 333, 334, 419, 420, 500, 569, 617, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 674, 746, 748, 766, 779, 820, 838, 841, 842, 852, 853, 866, 893, 901, 934, 1011, 1027, 1028, 1112, 1203, 1215, 1218, 1220, 1221, 1253, 1305, 1308, 1313, 1329, 1334, 1360], "belong": [1, 221, 330, 860, 934], "below": [25, 45, 148, 149, 159, 160, 204, 212, 255, 330, 459, 484, 681, 690, 691, 705, 760, 761, 763, 764, 807, 808, 810, 816, 820, 856, 934, 1070, 1260, 1269, 1270, 1284], "benchmark": 144, "best": [240, 316, 330, 569, 820, 1182, 1329], "better": [240, 287, 288, 316, 330, 405, 569, 686, 820, 837, 917, 934, 1008, 1228, 1230, 1265, 1329], "between": [30, 65, 100, 171, 172, 174, 178, 189, 197, 235, 247, 257, 264, 322, 330, 367, 401, 423, 424, 459, 506, 530, 539, 549, 550, 551, 552, 611, 617, 618, 640, 641, 666, 682, 742, 743, 746, 751, 753, 793, 796, 797, 820, 864, 875, 880, 923, 934, 971, 1003, 1010, 1030, 1031, 1070, 1117, 1144, 1153, 1163, 1164, 1165, 1166, 1198, 1203, 1204, 1220, 1245, 1261, 1329, 1346, 1354], "between_ab": [506, 820], "beyond": [712, 1291], "bia": [477, 478, 518, 642, 660, 820, 1091, 1092, 1132, 1221, 1240, 1329], "bias": [518, 660, 820, 1132, 1240, 1329], "big": [145, 387, 990], "big_fil": 145, "bigidx": 137, "bigqueri": 147, "bin": [420, 500, 617, 709, 735, 813, 820, 1028, 1112, 1203, 1288, 1323, 1329, 1334], "bin2int": 387, "bin_count": [500, 820, 1112, 1329], "bin_i": [735, 820], "bin_x": [735, 820], "bin_xor_xi": [735, 820], "binari": [46, 47, 140, 146, 200, 270, 330, 383, 384, 385, 386, 387, 388, 389, 422, 583, 670, 820, 847, 887, 934, 940, 986, 987, 989, 990, 991, 992, 1249, 1348], "binary_str": [735, 820], "bind": 149, "birthdai": 144, "bit": [71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 391, 392, 393, 394, 396, 397, 622, 667, 820, 994, 996, 997, 999, 1000, 1207, 1246, 1329, 1348, 1352], "bit_and": 1350, "bit_count": 1350, "bit_length": 1350, "bit_or": 1350, "bit_xor": 1350, "bitmap": [207, 330, 1088, 1329], "bitwis": [343, 390, 395, 398, 609, 735, 736, 737, 738, 739, 820, 993, 998, 1001, 1329, 1348, 1350], "bitwise_and": [820, 1329], "bitwise_count_on": [820, 1329], "bitwise_count_zero": [820, 1329], "bitwise_leading_on": [820, 1329], "bitwise_leading_zero": [820, 1329], "bitwise_or": [820, 1329], "bitwise_trailing_on": [820, 1329], "bitwise_trailing_zero": [820, 1329], "bitwise_xor": [820, 1329], "bla": [669, 676, 1248, 1255], "black": [240, 330, 383, 384, 385, 386, 389], "blindli": [532, 1146], "block": [26, 64, 220, 295, 330, 810, 842, 859, 881, 898, 907, 908, 917, 934, 1228, 1230, 1329], "blue": [56, 96, 97, 383, 384, 385, 386, 389, 732, 820, 1318, 1329], "bob": [144, 247, 330, 875, 934, 1358], "bodi": [46, 330, 334], "bold": [46, 330], "bom": [43, 52, 330, 934], "bool": [11, 13, 14, 15, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 43, 45, 46, 51, 52, 53, 54, 55, 57, 63, 64, 65, 96, 129, 130, 131, 132, 134, 135, 136, 140, 141, 144, 145, 146, 148, 149, 150, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 186, 188, 191, 192, 193, 194, 199, 201, 206, 211, 212, 213, 214, 218, 219, 220, 221, 225, 226, 228, 229, 230, 233, 235, 236, 244, 253, 255, 259, 263, 264, 265, 266, 271, 274, 276, 277, 280, 283, 285, 288, 289, 293, 294, 295, 296, 299, 300, 302, 304, 312, 314, 317, 320, 330, 341, 342, 343, 344, 345, 355, 358, 359, 362, 366, 367, 375, 380, 383, 384, 386, 389, 400, 401, 402, 406, 414, 415, 416, 417, 418, 419, 420, 427, 439, 455, 472, 473, 474, 475, 477, 478, 494, 496, 497, 500, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 523, 524, 528, 532, 535, 537, 539, 548, 555, 560, 561, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 604, 605, 607, 609, 610, 612, 613, 617, 620, 622, 631, 632, 634, 636, 638, 640, 642, 643, 645, 647, 651, 653, 655, 660, 662, 663, 666, 667, 668, 669, 670, 672, 678, 679, 680, 682, 690, 691, 692, 695, 696, 698, 704, 706, 707, 709, 711, 715, 717, 718, 727, 729, 732, 735, 736, 737, 738, 739, 741, 744, 745, 746, 750, 751, 754, 755, 760, 761, 763, 764, 775, 776, 779, 780, 782, 786, 792, 795, 798, 799, 802, 804, 807, 808, 810, 811, 820, 836, 838, 839, 841, 842, 846, 848, 852, 855, 856, 859, 860, 864, 865, 870, 874, 879, 881, 888, 890, 892, 893, 897, 898, 899, 900, 901, 904, 909, 913, 915, 918, 921, 934, 939, 940, 942, 947, 948, 959, 962, 963, 966, 970, 971, 979, 984, 986, 987, 989, 992, 1003, 1004, 1006, 1009, 1011, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1034, 1046, 1066, 1084, 1086, 1087, 1089, 1091, 1092, 1099, 1101, 1108, 1109, 1112, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1137, 1138, 1142, 1146, 1149, 1151, 1153, 1162, 1169, 1175, 1182, 1194, 1196, 1199, 1200, 1203, 1205, 1206, 1207, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1230, 1231, 1235, 1240, 1242, 1245, 1246, 1247, 1248, 1249, 1251, 1257, 1258, 1259, 1261, 1269, 1270, 1271, 1274, 1275, 1277, 1283, 1285, 1286, 1288, 1290, 1305, 1310, 1311, 1315, 1318, 1329, 1338, 1339, 1341, 1347, 1352, 1357], "boolean": [57, 174, 191, 212, 214, 276, 293, 330, 342, 343, 344, 358, 359, 362, 383, 386, 389, 400, 439, 485, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 523, 524, 528, 607, 609, 612, 613, 663, 683, 727, 734, 735, 744, 745, 802, 810, 820, 836, 856, 892, 897, 934, 940, 947, 948, 960, 962, 963, 966, 986, 1046, 1099, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1137, 1138, 1142, 1196, 1199, 1200, 1230, 1246, 1320, 1329, 1349], "border": 26, "both": [16, 31, 43, 52, 56, 96, 97, 146, 149, 163, 195, 221, 235, 236, 237, 247, 262, 263, 289, 299, 330, 345, 409, 420, 459, 479, 506, 617, 630, 633, 635, 637, 639, 641, 644, 646, 648, 694, 760, 761, 763, 764, 779, 807, 808, 816, 820, 831, 860, 864, 865, 866, 875, 883, 901, 934, 940, 1016, 1070, 1117, 1273, 1311, 1329, 1357, 1358], "boto3": 38, "bottom": [191, 330, 400, 820, 836, 934], "bottom_k": [293, 330, 400, 726, 727, 820, 897, 934, 1314, 1329], "bottom_k_bi": [399, 726, 727, 820], "bound": [111, 144, 145, 207, 221, 330, 366, 409, 506, 535, 537, 560, 566, 731, 741, 760, 761, 763, 764, 779, 807, 808, 820, 860, 934, 970, 1016, 1088, 1117, 1149, 1151, 1180, 1317, 1329, 1347], "boundari": [221, 330, 409, 500, 712, 820, 860, 934, 1016, 1112, 1291, 1329], "box": [26, 240, 330], "box_draw": 26, "branch": [63, 64, 841, 842, 852, 879, 890, 934], "break": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 139, 140, 148, 154, 156, 158, 159, 161, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 235, 237, 277, 287, 292, 299, 330, 333, 334, 419, 420, 500, 569, 617, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 748, 779, 820, 841, 842, 852, 864, 866, 893, 901, 934, 1011, 1027, 1028, 1112, 1203, 1215, 1218, 1220, 1221, 1308, 1313, 1329, 1334], "breakpoint": [420, 500, 617, 820, 1028, 1112, 1203, 1329], "breezah": 158, "breviti": 184, "broadcast": [692, 748, 940, 1271], "broader": 940, "brotli": [51, 55, 330, 934], "brussel": [453, 1064], "bst": [432, 436, 453, 1039, 1043, 1064], "bucket": [45, 148, 159, 160, 163, 330, 454, 467, 500, 820, 1065, 1078, 1112, 1329], "bud": [690, 691, 1269, 1270], "budget": 1338, "buffer": [144, 145, 146, 207, 233, 330, 387, 990, 1088, 1329], "buffer_s": [233, 330], "bug": [568, 569, 820, 870, 917, 934, 1182, 1329], "build": [62, 130, 940, 1360], "built": 100, "builtin": [142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 200, 330, 422, 820, 847, 934], "bundl": 184, "busi": [427, 746, 1034], "business_day_count": [427, 1034], "by_alternate_row": 1, "by_dtyp": 940, "by_first_letter_of_column_nam": 58, "by_first_letter_of_column_valu": 58, "by_index": 940, "by_left": [236, 330, 865, 934], "by_nam": 940, "by_pred": [263, 330], "by_right": [236, 330, 865, 934], "bye": 1, "byi": 1352, "bys": [221, 330, 860, 934], "byte": [41, 43, 46, 47, 48, 51, 52, 55, 140, 142, 143, 144, 145, 150, 151, 152, 153, 154, 157, 158, 161, 162, 200, 207, 270, 330, 387, 404, 405, 422, 583, 679, 680, 681, 685, 686, 694, 705, 820, 847, 887, 934, 990, 1007, 1008, 1088, 1258, 1259, 1260, 1264, 1265, 1273, 1284, 1329, 1352], "bytesio": [46, 47, 48, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 200, 270, 330, 422, 583, 820, 847, 887, 934], "c": [1, 16, 41, 43, 45, 47, 48, 51, 58, 60, 65, 104, 130, 132, 134, 136, 141, 149, 158, 188, 189, 191, 192, 193, 194, 195, 196, 198, 201, 202, 203, 204, 205, 206, 208, 212, 214, 217, 218, 219, 220, 221, 223, 225, 226, 234, 235, 238, 239, 241, 243, 245, 248, 250, 251, 252, 253, 255, 256, 257, 259, 260, 261, 263, 266, 267, 268, 275, 276, 277, 278, 279, 281, 282, 285, 286, 287, 288, 289, 290, 293, 297, 298, 299, 301, 302, 304, 309, 312, 313, 314, 317, 318, 320, 323, 324, 330, 334, 339, 341, 342, 344, 362, 382, 400, 420, 459, 497, 506, 527, 539, 569, 576, 593, 594, 608, 610, 614, 617, 655, 696, 704, 727, 730, 737, 739, 740, 742, 743, 744, 747, 748, 750, 751, 752, 753, 755, 756, 758, 768, 769, 770, 773, 774, 777, 778, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 799, 801, 803, 804, 805, 809, 816, 820, 836, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 856, 859, 860, 864, 868, 877, 879, 881, 882, 884, 885, 890, 891, 892, 893, 897, 900, 901, 904, 906, 910, 913, 914, 915, 918, 919, 921, 924, 925, 934, 940, 1010, 1028, 1117, 1141, 1203, 1275, 1283, 1297, 1316, 1329, 1339, 1341, 1342, 1344, 1345, 1346, 1347, 1352, 1357], "c00": 940, "c01": 940, "c02": 940, "c03": 940, "c05": 940, "c1": 379, "c123": 1352, "c2": 379, "c20": 940, "c25": 940, "c3": 379, "c40": 940, "c45": 1352, "c4d79b": [46, 330], "c50": 940, "c567": [46, 330], "c60": 940, "c75": 940, "c80": 940, "c8ae6d2b276": [46, 330], "c93": 940, "c95": 940, "c96": 940, "c97": 940, "c98": 940, "c99": 940, "c_btm_by_a": [400, 820], "c_btm_by_b": [400, 820], "c_by_ca": [400, 727, 820], "c_by_cb": [400, 727, 820], "c_c_c": [799, 893, 934], "c_contigu": [288, 330], "c_max": [610, 820], "c_mean_squar": [309, 910], "c_min": [610, 820], "c_top_by_a": [727, 820], "c_top_by_b": [727, 820], "c_total": 1357, "cach": [56, 63, 64, 96, 97, 124, 150, 158, 161, 163, 167, 168, 169, 170, 182, 624, 625, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 704, 706, 707, 711, 820, 831, 841, 842, 852, 879, 890, 934, 1006, 1209, 1210, 1283, 1285, 1286, 1290, 1329], "cadi": [255, 330], "cafe": [709, 1288], "caf\u00e9": [404, 405, 685, 686, 940, 1007, 1008, 1264, 1265], "calamin": 149, "calcul": [46, 51, 55, 57, 199, 221, 278, 301, 330, 423, 475, 476, 477, 478, 518, 530, 549, 556, 562, 566, 642, 660, 665, 731, 733, 753, 796, 797, 801, 809, 820, 846, 860, 894, 902, 934, 1029, 1030, 1089, 1090, 1091, 1092, 1132, 1144, 1163, 1221, 1240, 1244, 1319, 1329], "calendar": [71, 72, 221, 236, 262, 300, 330, 430, 440, 442, 449, 454, 467, 471, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 765, 807, 808, 820, 860, 865, 883, 934, 1037, 1047, 1052, 1060, 1065, 1078, 1082, 1090, 1329], "calendar_year": [440, 471], "call": [7, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 63, 64, 134, 141, 145, 146, 148, 149, 154, 156, 158, 159, 161, 162, 163, 167, 168, 169, 170, 174, 178, 184, 191, 220, 221, 238, 240, 262, 277, 288, 293, 329, 330, 399, 400, 415, 418, 427, 568, 569, 593, 594, 596, 598, 600, 601, 624, 625, 656, 726, 727, 746, 752, 816, 820, 836, 841, 842, 852, 859, 860, 879, 883, 890, 893, 897, 931, 932, 933, 934, 940, 1002, 1034, 1182, 1210, 1236, 1310, 1314, 1329, 1339, 1343, 1357], "callabl": [58, 59, 60, 61, 139, 158, 214, 240, 254, 259, 316, 330, 379, 560, 568, 569, 594, 595, 614, 631, 755, 756, 769, 781, 782, 794, 820, 870, 878, 881, 917, 934, 983, 1174, 1182, 1215, 1329], "caller": [147, 247, 330, 560, 870, 875, 917, 934], "cam": [259, 330, 881, 934], "can": [1, 2, 7, 20, 33, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 63, 64, 71, 72, 74, 88, 96, 97, 132, 139, 144, 145, 146, 148, 149, 150, 154, 155, 156, 158, 159, 161, 162, 163, 164, 172, 173, 174, 178, 180, 184, 186, 191, 193, 203, 204, 205, 214, 216, 220, 221, 228, 230, 232, 235, 236, 240, 251, 255, 262, 264, 265, 268, 270, 271, 276, 287, 288, 292, 293, 294, 298, 304, 307, 316, 330, 333, 342, 379, 400, 415, 418, 419, 422, 427, 446, 447, 449, 453, 456, 459, 467, 476, 482, 485, 506, 532, 560, 568, 569, 576, 580, 583, 584, 590, 593, 594, 596, 598, 600, 601, 610, 615, 617, 622, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 653, 655, 660, 663, 668, 677, 684, 690, 691, 692, 699, 700, 701, 704, 715, 727, 744, 746, 759, 762, 769, 771, 775, 776, 779, 782, 799, 810, 816, 819, 820, 831, 836, 837, 841, 842, 847, 849, 850, 852, 860, 864, 865, 883, 885, 887, 888, 890, 892, 893, 897, 904, 907, 908, 934, 940, 942, 983, 1027, 1034, 1057, 1058, 1060, 1064, 1065, 1067, 1070, 1078, 1090, 1096, 1117, 1146, 1174, 1182, 1187, 1201, 1203, 1207, 1210, 1228, 1230, 1231, 1234, 1240, 1247, 1248, 1256, 1263, 1269, 1270, 1271, 1278, 1279, 1280, 1283, 1308, 1310, 1329, 1334, 1344, 1357], "cancel": [841, 934], "candid": [675, 677, 1254, 1256], "cannot": [1, 51, 55, 106, 109, 144, 145, 149, 150, 152, 155, 156, 163, 180, 184, 240, 265, 266, 288, 307, 316, 330, 384, 459, 479, 548, 569, 584, 651, 670, 696, 717, 782, 820, 890, 908, 909, 917, 934, 940, 987, 1070, 1162, 1182, 1227, 1249, 1275, 1310, 1329], "capabl": [1, 46, 330], "capac": [207, 274, 330, 1088, 1235, 1329], "capit": [712, 1291, 1352], "captur": [675, 677, 690, 691, 1254, 1256, 1269, 1270], "car": [259, 283, 330, 627, 820, 881, 934], "cardin": [190, 330, 346, 740, 820, 835, 934, 950, 1329], "care": [46, 271, 330, 569, 610, 653, 820, 888, 934, 1231, 1329], "cars_revers": [627, 820], "cartesian": [235, 330, 864, 934], "case": [46, 56, 57, 64, 104, 129, 131, 132, 133, 135, 141, 146, 153, 154, 162, 163, 180, 209, 221, 233, 236, 240, 255, 262, 264, 265, 284, 287, 288, 330, 428, 476, 568, 580, 581, 594, 610, 630, 667, 668, 676, 678, 679, 680, 690, 691, 692, 712, 820, 842, 860, 865, 883, 934, 940, 1035, 1090, 1095, 1246, 1247, 1255, 1257, 1258, 1259, 1269, 1270, 1271, 1291, 1308, 1329], "cast": [1, 45, 59, 60, 129, 131, 132, 135, 141, 167, 168, 169, 170, 214, 221, 254, 262, 287, 288, 292, 304, 330, 345, 417, 418, 429, 456, 459, 470, 609, 614, 615, 622, 624, 630, 683, 684, 714, 721, 725, 749, 750, 800, 820, 860, 878, 883, 904, 934, 940, 1011, 1025, 1026, 1036, 1067, 1070, 1081, 1201, 1207, 1262, 1263, 1293, 1300, 1306, 1310, 1312, 1313, 1329, 1350], "cast_str_to_int": [254, 330, 878, 934], "cast_to_supertyp": [141, 820], "cat": [32, 56, 96, 97, 420, 617, 667, 669, 710, 713, 725, 750, 815, 820, 940, 1028, 1112, 1203, 1246, 1248, 1289, 1292, 1325, 1329], "catalog": [0, 832], "catalog_nam": [3, 5, 6, 7], "cataloginfo": 4, "categor": [45, 56, 75, 96, 97, 99, 167, 168, 169, 170, 235, 285, 330, 402, 403, 404, 405, 406, 420, 617, 624, 625, 725, 820, 940, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1028, 1203, 1209, 1210, 1312, 1329], "categori": [46, 56, 75, 97, 285, 330, 403, 420, 500, 617, 820, 1005, 1028, 1112, 1203, 1305, 1329], "categorical_as_str": [167, 168, 169, 170], "categoricalord": 69, "categoricaltyp": [282, 330], "caus": [112, 121, 130, 144, 145, 146, 158, 188, 209, 288, 330, 568, 820, 1095, 1310, 1329], "cba": 701, "cbrt": [820, 1329, 1350], "cbrt_a": 1351, "cc": [479, 767, 820, 940, 1029, 1329, 1352], "ccc": [1, 46, 330, 715, 717, 718, 940, 1352], "ccy": 1360, "cd": [691, 715, 717, 718, 940], "cd34": 691, "cdatainterfac": [187, 943], "cde": [940, 1352], "cdt": [454, 467, 1065, 1078], "ceil": [59, 820, 1329, 1350], "ceil_a": 1351, "cell": [21, 22, 46, 255, 330], "cent": [430, 1269], "center": [21, 22, 46, 330, 475, 477, 478, 631, 632, 634, 636, 638, 640, 643, 645, 647, 820, 1089, 1091, 1092, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1329], "central": [159, 160, 184, 518, 660, 820, 1132, 1240, 1329], "centuri": 1353, "certain": [52, 53, 54, 55, 64, 226, 300, 330, 700, 701, 816, 841, 842, 879, 934, 1329], "certainli": [704, 706, 707, 1283, 1285, 1286], "cest": [453, 1064], "cet": [453, 1064], "cfg": [8, 10, 23, 184], "cfg_ascii_fram": 184, "cfg_markdown": 184, "cfg_verbos": 184, "cfoo": [906, 934], "chain": [593, 594, 596, 598, 600, 601, 810], "chanc": [171, 174, 178, 1360], "chang": [2, 3, 4, 5, 6, 7, 36, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 57, 63, 64, 73, 75, 79, 139, 140, 141, 144, 145, 146, 148, 149, 154, 156, 158, 159, 161, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 237, 277, 287, 292, 299, 306, 330, 333, 334, 419, 420, 423, 459, 500, 569, 610, 611, 617, 624, 629, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 748, 779, 820, 841, 842, 852, 866, 893, 901, 907, 934, 940, 1010, 1011, 1027, 1028, 1070, 1112, 1198, 1203, 1209, 1214, 1215, 1218, 1220, 1221, 1235, 1308, 1313, 1329, 1334], "changes_length": [141, 820], "char": [33, 144, 158, 676, 1255], "char_length": 1352, "charact": [13, 15, 18, 26, 32, 33, 34, 43, 44, 52, 98, 143, 144, 145, 147, 158, 330, 404, 405, 449, 673, 674, 676, 681, 685, 686, 688, 689, 690, 691, 694, 695, 696, 699, 700, 701, 702, 703, 705, 712, 714, 879, 934, 940, 1007, 1008, 1060, 1252, 1253, 1255, 1260, 1264, 1265, 1267, 1268, 1269, 1270, 1273, 1274, 1275, 1278, 1279, 1280, 1284, 1291, 1293, 1352], "character_length": 1352, "characterist": [174, 178], "charli": [144, 1358], "chart": [46, 330, 333, 879, 934, 1329, 1334], "cheap": [193, 194, 269, 305, 330, 839, 840, 886, 905, 934, 1015, 1017, 1329], "cheaper": [535, 1149], "check": [45, 72, 106, 144, 145, 158, 167, 168, 169, 170, 182, 206, 231, 235, 236, 330, 362, 383, 386, 389, 402, 406, 497, 506, 510, 528, 667, 672, 679, 698, 820, 864, 865, 870, 934, 966, 986, 989, 992, 1004, 1009, 1087, 1108, 1109, 1119, 1122, 1129, 1131, 1142, 1246, 1251, 1258, 1277, 1329], "check_column_ord": [167, 168], "check_dtyp": [167, 168, 169, 170, 939, 1087, 1329], "check_exact": [167, 168, 169, 170], "check_nam": [169, 170, 1087, 1329], "check_ord": [169, 170], "check_row_ord": [167, 168], "check_sorted": [236, 330, 865, 934], "choos": [51, 53, 55, 221, 255, 330, 459, 860, 934, 1070], "chrono": [43, 52, 100, 330, 456, 459, 704, 706, 707, 711, 934, 1067, 1070, 1283, 1285, 1286, 1290, 1352, 1353], "chunk": [20, 55, 138, 144, 145, 148, 154, 156, 158, 159, 161, 162, 163, 174, 178, 209, 234, 250, 288, 330, 345, 621, 820, 934, 949, 1014, 1095, 1106, 1188, 1206, 1304, 1310, 1329], "chunk_length": 1329, "chunkedarrai": [129, 250, 330], "citi": [690, 691], "clang": 166, "clariti": [263, 330], "class": [1, 2, 23, 37, 38, 39, 40, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 115, 117, 171, 172, 265, 270, 330, 583, 779, 807, 816, 820, 826, 832, 844, 851, 884, 903, 909, 934, 939, 1309, 1329, 1333, 1341, 1357], "classmethod": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 200, 330, 422, 491, 820, 847, 934, 1339, 1357], "claus": [832, 1347, 1356], "clean": [704, 706, 707, 1283, 1285, 1286], "cleaner": 184, "cleanli": [16, 219, 330, 1357], "clear": [56, 96, 194, 330, 840, 934, 1017, 1329], "clearer": 132, "clickhous": 147, "client": [2, 38, 146], "clip": [820, 1329], "clipboard": [42, 143, 330, 832], "clone": [131, 132, 133, 134, 135, 193, 288, 330, 839, 934, 1015, 1329], "close": [46, 146, 221, 262, 277, 330, 420, 506, 565, 617, 630, 633, 635, 637, 639, 641, 644, 646, 648, 660, 760, 761, 763, 764, 779, 807, 808, 820, 860, 883, 893, 934, 1028, 1117, 1203, 1240, 1329], "closedinterv": [221, 262, 330, 506, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 779, 807, 808, 820, 860, 883, 934, 1117, 1329], "closest": [129, 236, 330, 865, 934, 1346, 1351], "closur": [633, 635, 644, 646, 648, 820], "cloud": [7, 40, 43, 45, 47, 51, 52, 53, 54, 55, 146, 148, 154, 156, 158, 159, 160, 161, 162, 163, 164, 330, 832, 934], "cloudi": [690, 691], "cloudpickl": 166, "cluster": 163, "cluster_with_column": [63, 64, 841, 842, 852, 879, 890, 934], "co": [676, 820, 1255, 1329, 1350], "coalesc": [65, 235, 236, 299, 330, 504, 678, 680, 704, 820, 864, 865, 901, 934, 1259, 1283, 1345, 1350], "code": [184, 195, 235, 330, 383, 384, 385, 386, 389, 422, 569, 653, 820, 847, 864, 868, 934, 1231, 1329, 1339], "codebas": 184, "coeffici": [197, 330, 660, 820, 1240, 1329], "coerc": [65, 623, 820], "coercion": [52, 53, 54, 55, 63, 64, 623, 820, 841, 842, 852, 879, 890, 934], "col": [1, 18, 43, 46, 52, 57, 58, 59, 60, 133, 135, 158, 172, 174, 212, 220, 221, 229, 231, 235, 236, 237, 240, 251, 254, 255, 262, 263, 268, 276, 287, 292, 296, 298, 304, 309, 330, 334, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 395, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 499, 500, 502, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 595, 597, 599, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 744, 745, 747, 748, 749, 750, 752, 754, 757, 759, 760, 762, 763, 765, 769, 770, 771, 772, 773, 774, 783, 785, 787, 788, 790, 793, 794, 798, 799, 801, 803, 805, 806, 809, 810, 820, 856, 859, 860, 862, 864, 865, 866, 878, 883, 885, 892, 893, 899, 904, 906, 910, 934, 940, 1060, 1064, 1146, 1228, 1230, 1259, 1263, 1283, 1329, 1360], "col0": [174, 1360], "col1": [174, 255, 330, 934, 1360], "col2": [174, 255, 330, 934, 1360], "col3": [255, 330, 1360], "col4": 1360, "col_nam": [254, 330, 569, 810, 820, 878, 934], "cole": 140, "coli": [46, 330, 600, 601, 940, 1360], "collaps": [52, 53, 54, 55, 63, 64, 841, 842, 852, 879, 890, 934], "collapse_join": [52, 53, 54, 55, 63, 64, 841, 842, 852, 879, 890, 934], "collect": [60, 63, 64, 158, 159, 160, 164, 174, 175, 178, 203, 204, 238, 255, 277, 282, 295, 296, 330, 479, 510, 569, 749, 767, 771, 798, 799, 802, 820, 835, 836, 838, 839, 842, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 881, 882, 883, 885, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 931, 933, 934, 940, 1122, 1329, 1339, 1340, 1341, 1344, 1345, 1357, 1358, 1360], "collect_al": [60, 64, 841, 842, 934], "collect_all_async": [842, 934], "collect_async": [64, 934], "collect_schema": [60, 238, 330, 844, 851, 878, 884, 903, 934], "collis": 65, "colnam": [30, 46, 158, 330], "color": [56, 96, 97, 316, 330, 333, 383, 384, 385, 386, 389, 670, 732, 820, 917, 986, 987, 988, 989, 992, 1249, 1318, 1329, 1352], "column": [16, 22, 23, 24, 27, 28, 30, 45, 46, 51, 55, 56, 57, 58, 65, 72, 88, 97, 101, 105, 129, 131, 132, 133, 134, 135, 136, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 174, 189, 191, 192, 195, 197, 198, 201, 202, 203, 204, 205, 208, 212, 213, 216, 217, 219, 220, 221, 225, 226, 231, 232, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 267, 268, 269, 271, 276, 278, 279, 280, 283, 285, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 315, 330, 333, 334, 341, 342, 344, 355, 364, 373, 375, 378, 387, 400, 409, 413, 414, 420, 430, 431, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 452, 455, 456, 457, 459, 468, 469, 471, 479, 481, 485, 487, 500, 505, 506, 521, 527, 533, 535, 555, 559, 560, 569, 575, 576, 578, 580, 582, 593, 595, 596, 597, 598, 599, 600, 601, 610, 617, 621, 623, 624, 625, 626, 628, 629, 630, 633, 635, 637, 639, 641, 644, 646, 648, 655, 656, 662, 663, 666, 674, 679, 681, 682, 692, 696, 697, 704, 705, 706, 707, 708, 709, 711, 716, 719, 727, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 820, 836, 838, 845, 848, 849, 850, 851, 853, 856, 859, 860, 864, 865, 866, 870, 871, 872, 873, 874, 876, 877, 880, 881, 883, 884, 885, 886, 888, 892, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 916, 917, 934, 939, 940, 947, 948, 968, 977, 979, 982, 990, 1006, 1010, 1016, 1021, 1022, 1028, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1051, 1052, 1053, 1055, 1056, 1059, 1061, 1062, 1066, 1067, 1068, 1070, 1079, 1080, 1082, 1094, 1112, 1116, 1141, 1147, 1149, 1169, 1173, 1203, 1210, 1211, 1214, 1234, 1245, 1253, 1258, 1261, 1275, 1276, 1283, 1285, 1286, 1287, 1288, 1290, 1296, 1299, 1305, 1306, 1318, 1329, 1345, 1347, 1349, 1351, 1352, 1354, 1355, 1358, 1359, 1360], "column_0": [1, 240, 294, 330], "column_1": [240, 294, 330, 1354], "column_2": [294, 330, 1354], "column_abc": 21, "column_format": [46, 330], "column_nam": [259, 294, 330, 881, 934], "column_tot": [46, 330], "column_width": [46, 330], "column_x": [144, 145, 149, 155, 158], "column_xyz": 21, "columnar": [133, 135, 233, 264, 330], "columnformatdict": [46, 330], "columnnameorselector": [192, 201, 203, 204, 246, 253, 255, 265, 285, 295, 296, 297, 298, 330, 838, 848, 849, 850, 874, 898, 899, 900, 934], "columnnotfounderror": [216, 217, 330], "columntotalsdefinit": [46, 330], "columnwidthsdefinit": [46, 330], "colx": [46, 330, 600, 601, 940, 1344, 1360], "colz": [940, 1360], "com": [38, 46, 147, 330, 475, 477, 478, 675, 676, 677, 820, 1089, 1091, 1092, 1254, 1255, 1256, 1329], "combin": [51, 55, 63, 64, 65, 212, 221, 222, 236, 255, 262, 300, 330, 343, 356, 467, 476, 489, 584, 609, 625, 630, 699, 700, 701, 760, 761, 763, 764, 807, 808, 810, 820, 841, 842, 852, 860, 865, 879, 883, 890, 934, 1065, 1078, 1090, 1210, 1278, 1279, 1280, 1329, 1345, 1358], "come": [124, 147, 221, 295, 297, 330, 427, 446, 447, 518, 560, 746, 820, 860, 898, 900, 934, 1034, 1057, 1058, 1132, 1329], "comm_subexpr_elim": [63, 64, 841, 842, 852, 879, 890, 934], "comm_subplan_elim": [63, 64, 841, 842, 852, 879, 890, 934], "comma": [42, 43, 144, 145, 158, 330], "comment": [144, 145, 158], "comment_prefix": [144, 145, 158], "common": [57, 63, 64, 65, 104, 144, 145, 158, 299, 330, 594, 826, 841, 842, 852, 879, 890, 901, 934, 1333], "compact": 1355, "compani": 147, "compar": [163, 167, 168, 169, 170, 206, 212, 330, 473, 474, 494, 496, 506, 520, 567, 604, 605, 820, 856, 934, 1010, 1086, 1087, 1194, 1329], "comparison": [164, 212, 330, 856, 934], "compat": [26, 46, 47, 48, 51, 55, 99, 282, 330, 667, 669, 675, 676, 677, 679, 690, 691, 934, 940, 1070, 1246, 1248, 1254, 1255, 1256, 1258, 1269, 1270, 1304, 1329, 1339, 1352, 1353, 1357], "compat_level": [47, 48, 282, 330, 1304, 1329], "compatibleframetyp": [1340, 1342, 1357], "compatlevel": [47, 48, 282, 330, 1304, 1329], "competit": [620, 820, 1205, 1329], "compil": [62, 360, 361, 525, 526, 938, 964, 965, 1139, 1140], "complement": 940, "complet": [144, 146, 158, 1358], "complex": [175, 399, 400, 419, 726, 727, 820, 1002, 1027, 1314, 1329], "compliant": [46, 330, 459, 1070], "compon": [431, 455, 459, 704, 707, 765, 1038, 1066, 1070, 1283, 1286], "compos": 1358, "composit": [88, 1360], "compound": [136, 265, 330, 940], "comprehens": 172, "compress": [41, 45, 47, 48, 51, 53, 55, 330, 628, 820, 934, 1213, 1329], "compression_level": [51, 55, 330, 934], "comput": [63, 65, 102, 207, 220, 236, 255, 289, 295, 309, 322, 330, 338, 347, 348, 349, 350, 351, 352, 369, 370, 371, 376, 377, 381, 407, 410, 411, 412, 415, 416, 417, 418, 424, 472, 475, 476, 477, 478, 480, 518, 542, 543, 544, 545, 549, 550, 551, 552, 556, 562, 563, 564, 565, 590, 610, 611, 616, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 657, 658, 659, 660, 664, 723, 724, 732, 737, 739, 742, 743, 744, 751, 753, 766, 786, 796, 797, 810, 820, 841, 859, 862, 864, 865, 898, 906, 910, 923, 934, 945, 951, 952, 953, 954, 955, 956, 973, 974, 975, 980, 981, 985, 1012, 1018, 1019, 1020, 1023, 1024, 1025, 1026, 1031, 1084, 1088, 1089, 1090, 1091, 1092, 1093, 1132, 1156, 1157, 1158, 1159, 1163, 1164, 1165, 1166, 1170, 1176, 1177, 1178, 1179, 1187, 1198, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1237, 1238, 1239, 1240, 1243, 1302, 1303, 1311, 1318, 1329, 1351, 1354], "computeerror": [580, 709, 1288], "concat": [56, 96, 97, 105, 145, 236, 330, 865, 906, 934, 1014, 1106, 1188, 1206, 1329, 1350], "concat_list": [532, 766], "concat_w": [277, 330, 799, 893, 934, 1350, 1357], "concaten": [56, 65, 96, 97, 214, 254, 330, 614, 666, 682, 748, 749, 750, 820, 878, 934, 1014, 1188, 1245, 1261, 1329, 1352], "concatmethod": 65, "conclus": [133, 135, 330, 934], "concret": [174, 178], "condit": [46, 204, 212, 237, 263, 330, 402, 406, 485, 506, 672, 698, 745, 769, 810, 820, 856, 866, 934, 1117, 1329, 1345, 1350, 1356], "conditional_format": [46, 330], "conditionalformatdict": [46, 330], "config": [0, 57, 199, 268, 287, 304, 330, 668, 678, 680, 692, 760, 761, 763, 764, 765, 832, 841, 846, 885, 904, 934, 1247, 1259, 1271], "configur": [11, 38, 45, 148, 159, 160, 184, 330, 333, 833, 841, 909, 934, 1329, 1334], "configure_axisx": [330, 333, 1329, 1334], "configure_point": [330, 333, 1329, 1334], "conflat": [506, 820], "conform": 1360, "confus": [104, 342, 513, 514, 692, 820], "conjunct": [46, 96, 146, 149, 155, 172, 330, 775, 778, 934], "conn": 146, "connect": [7, 43, 44, 47, 51, 52, 53, 54, 55, 75, 144, 146, 147, 150, 152, 154, 156, 158, 161, 162, 163, 164, 330, 833, 934], "connectionorcursor": [44, 146, 330], "connector": 147, "connectorx": [146, 147, 166], "consecut": [211, 330, 382, 484, 490, 666, 682, 690, 820, 855, 934, 1098, 1245, 1261, 1270, 1329], "consid": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 96, 97, 139, 140, 144, 145, 146, 148, 154, 156, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 191, 203, 204, 206, 232, 237, 240, 246, 264, 277, 287, 292, 293, 295, 297, 299, 330, 333, 334, 400, 409, 419, 420, 489, 500, 568, 569, 576, 592, 593, 596, 598, 600, 601, 617, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 727, 748, 755, 769, 779, 816, 820, 836, 841, 842, 849, 850, 852, 866, 874, 893, 897, 898, 900, 901, 917, 934, 940, 1006, 1011, 1016, 1027, 1028, 1087, 1112, 1182, 1203, 1215, 1218, 1220, 1221, 1228, 1230, 1308, 1313, 1329, 1334, 1339], "consider": 140, "consist": [220, 253, 288, 330, 704, 760, 761, 779, 859, 934, 940, 949, 1095, 1283, 1310, 1329], "consola": [46, 330], "const": 16, "constant": [207, 262, 330, 428, 476, 482, 820, 883, 934, 1035, 1088, 1090, 1096, 1329], "constrain": [57, 158, 203, 204, 330, 849, 850, 934, 940], "constraint": [212, 330, 485, 593, 594, 596, 598, 600, 601, 810, 820, 856, 934, 940], "construct": [56, 96, 97, 104, 129, 131, 132, 133, 134, 135, 136, 140, 146, 330, 491, 792, 795, 811, 816, 820, 847, 934, 1006, 1329, 1344], "construct_categor": 56, "constructor": [140, 149, 178], "contain": [11, 43, 44, 45, 46, 52, 57, 62, 100, 131, 134, 136, 141, 146, 147, 148, 156, 159, 160, 163, 173, 174, 176, 178, 191, 196, 203, 204, 205, 221, 229, 234, 251, 287, 288, 292, 293, 299, 311, 330, 342, 344, 367, 386, 389, 402, 406, 422, 497, 510, 539, 569, 666, 668, 672, 675, 677, 679, 682, 684, 697, 698, 714, 736, 737, 738, 739, 750, 782, 820, 836, 844, 847, 849, 850, 851, 860, 879, 897, 901, 912, 934, 940, 947, 948, 971, 1004, 1009, 1108, 1109, 1153, 1188, 1245, 1247, 1251, 1254, 1256, 1258, 1261, 1263, 1276, 1277, 1293, 1304, 1310, 1329, 1347], "contains_with_expr": 383, "contains_with_lit": 383, "content": [19, 656, 820, 938, 1236, 1329], "context": [56, 96, 97, 180, 251, 277, 330, 340, 485, 532, 568, 569, 580, 662, 663, 732, 752, 768, 771, 777, 778, 782, 791, 795, 798, 819, 820, 831, 832, 893, 906, 934, 1146, 1318, 1329, 1344, 1357, 1359], "contigu": [65, 129, 134, 144, 145, 148, 150, 152, 154, 156, 158, 159, 161, 162, 163, 258, 288, 330], "continu": [144, 420, 617, 660, 820, 1028, 1203, 1240, 1329, 1346], "contrast": 765, "control": [16, 17, 46, 64, 65, 149, 172, 174, 276, 277, 287, 330, 625, 663, 799, 820, 841, 842, 852, 892, 893, 909, 931, 934, 1210, 1308, 1329, 1341, 1344, 1357], "conveni": [209, 292, 330, 926, 949, 1095, 1329, 1339], "convers": [130, 188, 233, 234, 264, 265, 284, 288, 289, 330, 432, 704, 706, 707, 711, 832, 1039, 1283, 1285, 1286, 1290, 1310, 1311, 1329, 1355, 1357], "convert": [45, 100, 130, 134, 141, 148, 149, 155, 159, 188, 265, 283, 284, 285, 286, 287, 288, 289, 291, 292, 330, 378, 379, 421, 432, 456, 459, 559, 560, 568, 594, 619, 677, 704, 706, 707, 708, 709, 711, 716, 820, 934, 982, 983, 1010, 1039, 1067, 1070, 1173, 1174, 1256, 1283, 1285, 1286, 1287, 1288, 1290, 1296, 1299, 1307, 1308, 1309, 1310, 1311, 1313, 1329, 1352, 1354, 1355, 1357], "convert_time_zon": [453, 1064], "coo": [259, 330, 881, 934], "coord": 719, "coordin": [46, 330], "copi": [42, 129, 130, 143, 186, 188, 193, 194, 234, 282, 288, 289, 304, 330, 482, 820, 839, 840, 904, 934, 942, 1015, 1017, 1096, 1304, 1309, 1310, 1311, 1329, 1357], "corasick": [668, 678, 680, 692, 1247, 1257, 1259, 1271], "core": [1, 237, 330, 866, 934, 1357, 1360], "cores_right": [237, 330, 866, 934], "corner": [26, 46, 136, 330], "corr": 330, "corrcoef": [197, 330], "correct": [141, 149, 155, 477, 478, 518, 560, 642, 660, 820, 870, 934, 1091, 1092, 1132, 1221, 1240, 1329], "correctli": [46, 330, 568, 820], "correl": [197, 330, 751, 796], "correlationmethod": 751, "correspond": [221, 236, 262, 288, 300, 330, 400, 440, 449, 454, 467, 569, 620, 630, 633, 635, 637, 639, 641, 644, 646, 648, 727, 760, 761, 763, 764, 807, 808, 820, 841, 860, 865, 883, 934, 1047, 1060, 1065, 1078, 1205, 1329, 1346], "cosd": 1350, "cosh": [820, 1329], "cosin": [347, 348, 410, 411, 568, 820, 951, 952, 1018, 1019, 1329, 1354], "cost": [237, 265, 330, 690, 866, 934, 1270], "cost_usd": [690, 1270], "cot": [820, 1329, 1350], "cotang": [412, 820, 1020, 1329, 1354], "cotd": 1350, "could": [45, 94, 102, 330, 657, 755, 765, 769, 820, 838, 846, 934, 1237, 1329], "count": [46, 164, 190, 199, 221, 251, 252, 262, 294, 300, 306, 321, 330, 346, 363, 372, 414, 427, 476, 500, 521, 529, 541, 546, 569, 592, 608, 630, 633, 635, 637, 639, 641, 644, 646, 648, 669, 730, 732, 740, 746, 754, 778, 790, 820, 835, 846, 860, 877, 883, 907, 922, 934, 940, 950, 967, 976, 1022, 1029, 1034, 1090, 1112, 1135, 1143, 1155, 1160, 1189, 1197, 1248, 1316, 1318, 1329, 1334, 1338, 1350], "count_digit": 669, "count_num": [46, 330], "counterpart": 140, "countri": [236, 330, 428, 865, 934, 1035], "country_holidai": [427, 746, 1034], "covari": [141, 753, 797, 820], "cover": 16, "cow": [688, 689, 1267, 1268], "cpu": [144, 145, 166, 287, 330, 841, 909, 934, 1308, 1329], "crab": [667, 679, 1246, 1258], "crate": [43, 52, 100, 330, 667, 669, 675, 676, 677, 679, 690, 691, 704, 706, 707, 711, 934, 940, 1246, 1248, 1254, 1255, 1256, 1258, 1269, 1270, 1283, 1285, 1286, 1290], "creat": [44, 46, 56, 97, 129, 133, 135, 144, 145, 146, 147, 150, 152, 156, 159, 160, 172, 173, 174, 175, 176, 177, 178, 179, 184, 193, 194, 221, 252, 255, 262, 287, 288, 300, 304, 307, 330, 333, 334, 431, 454, 467, 476, 560, 568, 621, 630, 633, 635, 637, 639, 641, 644, 646, 648, 749, 759, 760, 761, 762, 763, 764, 765, 779, 806, 807, 808, 816, 820, 839, 840, 846, 852, 860, 883, 904, 908, 934, 938, 939, 1015, 1017, 1028, 1038, 1065, 1078, 1090, 1195, 1203, 1206, 1308, 1310, 1329, 1334, 1356, 1357, 1360], "create_async_engin": 146, "create_engin": [44, 330], "creation": 145, "credenti": [7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 148, 154, 156, 158, 159, 161, 162, 163, 330, 832, 934], "credential_provid": [7, 43, 45, 47, 51, 52, 53, 54, 55, 148, 154, 156, 158, 159, 161, 162, 163, 330, 934], "credentialproviderfunct": [7, 43, 45, 47, 51, 52, 53, 54, 55, 148, 154, 156, 158, 159, 161, 162, 163, 330, 934], "cross": [235, 330, 864, 934, 1345], "crustacean": [679, 1258], "cst": [454, 467, 1065, 1078], "csv": [42, 43, 52, 53, 54, 55, 143, 144, 145, 149, 158, 330, 832, 934], "csvencod": [144, 145, 158], "csvquotestyl": [43, 52, 330, 934], "ctx": [1338, 1340, 1341, 1342, 1343, 1344, 1357], "cube": [1, 61, 407, 615, 820, 1012, 1329, 1351], "cuda": 909, "cum_count": [820, 1329], "cum_count_revers": [414, 820], "cum_max": [820, 1329], "cum_max_all_fil": [415, 820], "cum_max_revers": [415, 820], "cum_min": [820, 1329], "cum_min_revers": [416, 820], "cum_prod": [339, 820, 1329], "cum_prod_revers": [417, 820], "cum_reduc": 755, "cum_sum": [503, 610, 720, 758, 820, 862, 934, 1131, 1329], "cum_sum_revers": [418, 820], "cumsum_horizont": 757, "cumul": [414, 415, 416, 417, 418, 754, 755, 756, 757, 758, 820, 1022, 1023, 1024, 1025, 1026, 1329], "cumulative_ev": [820, 1329], "cumulative_sal": [610, 820], "current": [7, 8, 9, 11, 12, 36, 43, 44, 47, 51, 52, 53, 54, 55, 136, 146, 147, 154, 156, 158, 161, 162, 163, 171, 172, 174, 175, 176, 177, 178, 179, 193, 194, 201, 235, 236, 259, 277, 287, 292, 330, 333, 334, 436, 560, 611, 820, 839, 840, 848, 864, 865, 881, 893, 909, 934, 940, 1015, 1017, 1035, 1043, 1198, 1308, 1313, 1329, 1334, 1341, 1357], "cursor": [44, 146, 330], "custom": [1, 33, 45, 46, 58, 59, 60, 61, 103, 140, 177, 179, 199, 240, 255, 316, 330, 379, 427, 456, 459, 560, 568, 569, 631, 732, 746, 781, 782, 820, 846, 870, 917, 934, 983, 1034, 1067, 1070, 1174, 1182, 1215, 1318, 1329, 1360], "customis": [46, 330], "cut": [617, 820, 1203, 1329], "cxx": 1352, "cypher": 146, "d": [34, 41, 43, 45, 46, 47, 48, 51, 132, 164, 189, 212, 219, 221, 222, 223, 226, 235, 239, 281, 282, 292, 298, 302, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 339, 341, 414, 437, 456, 459, 506, 575, 614, 655, 669, 676, 690, 691, 696, 704, 706, 707, 747, 748, 765, 771, 799, 820, 856, 860, 864, 893, 913, 915, 918, 919, 920, 921, 922, 923, 924, 934, 940, 1010, 1022, 1044, 1067, 1070, 1117, 1141, 1248, 1255, 1269, 1270, 1275, 1283, 1285, 1286, 1297, 1329, 1345, 1347, 1349, 1352, 1353], "d1": [46, 330, 431], "d2": 431, "d3": 431, "d789": [46, 330], "d_4": [696, 1275], "dai": [71, 72, 89, 221, 234, 236, 262, 300, 330, 333, 427, 446, 447, 449, 450, 452, 454, 456, 459, 460, 467, 469, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 746, 759, 760, 761, 762, 763, 764, 765, 807, 808, 820, 860, 865, 883, 934, 940, 1034, 1057, 1058, 1060, 1061, 1063, 1065, 1067, 1070, 1071, 1078, 1080, 1090, 1329, 1353], "dark": 1338, "data": [0, 1, 16, 24, 25, 27, 30, 34, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 70, 71, 72, 74, 85, 86, 88, 89, 97, 100, 104, 106, 109, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 186, 188, 194, 195, 205, 208, 209, 219, 220, 221, 233, 234, 235, 238, 240, 253, 254, 258, 263, 264, 265, 267, 271, 274, 282, 287, 288, 289, 292, 294, 304, 308, 328, 330, 334, 342, 343, 344, 347, 348, 349, 350, 351, 352, 355, 358, 359, 360, 361, 362, 364, 367, 369, 370, 371, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 389, 401, 403, 404, 405, 409, 410, 411, 412, 413, 420, 421, 422, 427, 428, 429, 430, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 481, 492, 494, 495, 496, 500, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 520, 521, 525, 526, 528, 533, 539, 541, 548, 559, 561, 567, 569, 604, 605, 609, 610, 617, 619, 620, 623, 624, 625, 626, 628, 629, 633, 635, 637, 639, 641, 644, 646, 648, 649, 651, 653, 658, 659, 660, 666, 669, 670, 671, 674, 675, 676, 677, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 704, 705, 706, 707, 709, 711, 714, 723, 724, 725, 728, 729, 732, 735, 741, 749, 752, 759, 760, 761, 762, 763, 764, 765, 775, 776, 778, 779, 780, 781, 782, 792, 795, 806, 807, 808, 811, 816, 820, 832, 839, 840, 841, 842, 847, 851, 853, 859, 860, 884, 888, 904, 934, 939, 942, 947, 948, 960, 962, 963, 964, 965, 966, 968, 970, 971, 982, 984, 986, 987, 988, 990, 991, 1003, 1005, 1007, 1008, 1015, 1016, 1017, 1028, 1029, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1090, 1094, 1095, 1112, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1137, 1138, 1139, 1140, 1142, 1147, 1153, 1155, 1162, 1173, 1175, 1182, 1196, 1203, 1205, 1209, 1210, 1211, 1213, 1214, 1225, 1227, 1235, 1240, 1245, 1246, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1260, 1261, 1262, 1263, 1264, 1265, 1273, 1274, 1275, 1276, 1283, 1284, 1285, 1286, 1288, 1290, 1293, 1304, 1309, 1310, 1311, 1312, 1315, 1328, 1329, 1338, 1345, 1352, 1357, 1359], "data_bar": [46, 330], "data_bar_2010": [46, 330], "data_label": [46, 330], "data_page_s": [51, 55, 330, 934], "databas": [44, 128, 146, 147, 330, 832], "databrick": 2, "datafram": [0, 1, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 84, 101, 104, 105, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 161, 162, 163, 167, 168, 171, 172, 184, 328, 329, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 395, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 816, 820, 832, 841, 842, 844, 846, 848, 851, 853, 857, 860, 864, 865, 866, 867, 868, 870, 874, 875, 879, 882, 884, 891, 893, 898, 899, 900, 901, 903, 906, 910, 911, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 934, 939, 940, 1028, 1029, 1064, 1090, 1112, 1182, 1203, 1259, 1263, 1275, 1276, 1299, 1305, 1306, 1318, 1329, 1338, 1339, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1360], "dataframeplot": [330, 333], "dataload": [292, 330], "datapoint": [221, 330, 860, 934], "dataset": [20, 51, 75, 144, 145, 148, 149, 155, 158, 159, 164, 235, 292, 330, 518, 820, 832, 864, 870, 934, 1132, 1329, 1358], "datat": [46, 330], "datatyp": [43, 52, 129, 131, 132, 133, 135, 137, 151, 153, 154, 156, 157, 162, 163, 175, 176, 178, 205, 214, 330, 401, 479, 655, 725, 748, 767, 780, 816, 820, 832, 851, 934, 939, 940, 1003, 1029, 1083, 1182, 1234, 1312, 1329, 1355], "date": [22, 46, 57, 72, 144, 145, 147, 149, 155, 156, 158, 161, 163, 164, 192, 199, 219, 221, 234, 236, 262, 277, 330, 333, 362, 427, 429, 430, 431, 432, 435, 437, 439, 440, 442, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 528, 610, 630, 633, 635, 637, 639, 641, 644, 646, 648, 704, 706, 725, 746, 760, 761, 763, 764, 771, 779, 780, 806, 820, 838, 846, 860, 865, 883, 934, 940, 966, 1034, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1090, 1142, 1191, 1192, 1283, 1285, 1312, 1329, 1350, 1353, 1355], "date32": [234, 330], "date_format": [43, 52, 330, 934], "date_min": 449, "date_minus_1y_2mon": 1060, "date_part": 1350, "date_plus_1i": [449, 1060], "date_rang": [236, 300, 330, 435, 437, 450, 458, 469, 763, 764, 865, 934, 1042, 1056, 1061, 1062, 1079, 1080], "date_right": [236, 330, 865, 934], "datetim": [7, 22, 43, 46, 52, 57, 100, 136, 148, 156, 159, 161, 163, 174, 175, 176, 178, 192, 199, 219, 221, 234, 236, 262, 277, 300, 330, 333, 362, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 528, 577, 610, 630, 633, 635, 637, 639, 641, 644, 646, 648, 704, 707, 725, 746, 759, 760, 761, 763, 764, 765, 771, 779, 780, 807, 808, 820, 838, 846, 860, 865, 883, 934, 939, 940, 966, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1090, 1142, 1191, 1192, 1283, 1286, 1310, 1312, 1329, 1352, 1353], "datetime_format": [43, 52, 330, 934], "datetime_rang": [221, 330, 429, 432, 446, 447, 449, 453, 454, 460, 461, 462, 463, 464, 465, 466, 467, 470, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 820, 860, 934, 1035, 1036, 1039, 1043, 1044, 1045, 1050, 1051, 1053, 1055, 1057, 1058, 1059, 1060, 1064, 1065, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078], "datetime_str": 456, "datetimeindex": 134, "david": 1358, "day_nam": [456, 459], "day_of_month": [435, 450, 469], "day_of_year": [435, 450, 469], "daylight": [221, 236, 262, 300, 330, 428, 436, 449, 454, 467, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 765, 807, 808, 820, 860, 865, 883, 934, 1043, 1060, 1065, 1078], "dayofweek": 1353, "dayofyear": 1353, "days_diff": 460, "db": [44, 146, 147, 330], "dbapi2": 146, "dbc": [669, 1248], "dbreadengin": 147, "dbwriteengin": [44, 330], "dbwritemod": [44, 330], "dd": [46, 330, 1352], "ddd": [1, 46, 330, 715, 717, 718], "dddd": 1352, "ddof": [278, 301, 330, 376, 381, 556, 562, 643, 644, 647, 648, 665, 733, 751, 753, 796, 797, 801, 809, 820, 894, 902, 934, 980, 985, 1170, 1176, 1222, 1224, 1244, 1319, 1329], "ddww": 1352, "de": 1352, "deal": [51, 55, 233, 330, 342, 344, 452, 453, 620, 704, 707, 736, 737, 738, 739, 762, 820, 934, 947, 948, 1063, 1064, 1205, 1283, 1286, 1329], "debug": [35, 870, 934, 1360], "decad": [1338, 1353], "decai": [475, 476, 477, 478, 820, 1089, 1090, 1091, 1092, 1329], "decemb": [459, 1070], "decim": [15, 16, 17, 33, 34, 43, 46, 52, 144, 145, 158, 330, 334, 649, 708, 820, 934, 940, 1225, 1287, 1329, 1351], "decimal_comma": [144, 145, 158], "decimal_separ": [15, 33], "declar": [129, 131, 132, 133, 135, 146, 153, 154, 162, 287, 292, 330, 934, 940, 1338], "decod": [144, 145, 683], "decompos": [296, 330, 899, 934], "decompress": [51, 53, 55, 330, 934], "decor": [56, 58, 59, 60, 61, 174, 178, 240, 330, 569, 820, 831, 832, 1182, 1329], "dedic": [1, 130, 233, 264, 330, 940, 1357], "deem": [199, 330, 846, 934], "deepcopi": [193, 330, 839, 934, 1015, 1329], "def": [1, 56, 58, 59, 60, 61, 146, 172, 174, 178, 184, 254, 294, 330, 339, 614, 673, 676, 701, 735, 781, 820, 842, 878, 934, 940, 1252, 1255, 1360], "default": [10, 11, 15, 16, 20, 33, 36, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 63, 64, 65, 69, 72, 73, 74, 129, 131, 132, 133, 134, 135, 136, 144, 145, 147, 149, 150, 152, 153, 154, 155, 156, 158, 161, 162, 163, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 184, 199, 200, 203, 204, 207, 216, 220, 221, 222, 233, 235, 236, 244, 246, 253, 255, 262, 263, 264, 265, 266, 270, 273, 277, 278, 280, 285, 287, 288, 292, 295, 297, 298, 299, 301, 306, 315, 330, 341, 342, 344, 367, 374, 379, 387, 420, 422, 427, 452, 453, 459, 472, 474, 475, 477, 478, 498, 535, 539, 548, 553, 554, 556, 560, 562, 563, 568, 576, 577, 580, 583, 602, 603, 605, 610, 611, 617, 620, 624, 625, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 651, 654, 656, 665, 666, 675, 682, 694, 699, 700, 701, 704, 706, 707, 709, 711, 732, 733, 736, 738, 741, 745, 746, 750, 751, 753, 760, 761, 762, 763, 764, 765, 768, 771, 775, 776, 777, 779, 780, 786, 792, 795, 798, 801, 802, 804, 807, 808, 809, 811, 820, 841, 842, 846, 847, 849, 850, 852, 859, 860, 864, 865, 874, 883, 887, 889, 893, 894, 898, 900, 901, 902, 907, 909, 916, 934, 938, 940, 947, 948, 971, 978, 983, 990, 1016, 1028, 1029, 1034, 1063, 1064, 1070, 1084, 1088, 1089, 1091, 1092, 1110, 1149, 1153, 1162, 1167, 1168, 1174, 1191, 1192, 1198, 1203, 1205, 1209, 1210, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1227, 1233, 1236, 1244, 1245, 1246, 1254, 1258, 1261, 1273, 1278, 1279, 1280, 1283, 1285, 1286, 1288, 1290, 1308, 1310, 1318, 1319, 1329, 1351, 1352, 1360], "default_match": [667, 679], "default_scop": 40, "defaultazurecredenti": 39, "defaultdict": [265, 330], "defer": [184, 330, 333, 334, 1329, 1334], "defin": [43, 46, 52, 72, 75, 146, 153, 171, 172, 174, 192, 203, 204, 208, 221, 240, 251, 254, 262, 299, 316, 330, 405, 506, 535, 569, 614, 617, 629, 630, 633, 635, 637, 639, 641, 644, 646, 648, 681, 686, 694, 705, 712, 760, 761, 763, 764, 779, 782, 802, 807, 808, 820, 838, 849, 850, 853, 860, 878, 883, 901, 917, 934, 938, 939, 940, 1008, 1117, 1149, 1182, 1203, 1214, 1260, 1265, 1273, 1284, 1291, 1329], "definit": [46, 76, 330, 518, 820, 939, 940, 1132, 1329], "deflat": [41, 330], "deg": 1354, "degre": [278, 301, 330, 556, 562, 619, 643, 644, 647, 648, 665, 733, 743, 753, 796, 797, 801, 809, 820, 894, 902, 934, 1222, 1224, 1244, 1319, 1329, 1350], "delet": [75, 1345, 1359], "delimit": [50, 52, 154, 162, 255, 285, 330, 666, 682, 934, 1245, 1261, 1305, 1329], "delta": [45, 148, 159, 278, 301, 330, 556, 562, 643, 644, 647, 648, 665, 733, 753, 796, 797, 801, 809, 820, 832, 894, 902, 934, 1222, 1224, 1244, 1319, 1329], "delta_merge_opt": [45, 330], "delta_table_opt": [7, 148, 159], "delta_table_vers": 7, "delta_write_opt": [45, 330], "deltalak": [7, 45, 148, 159, 166, 330], "deltat": [45, 148, 159, 330], "demo": [46, 330], "demonstr": [144, 489, 820, 940], "dens": [26, 219, 330, 620, 820, 1205, 1329], "densiti": [1329, 1334], "depend": [51, 56, 62, 97, 146, 149, 155, 166, 189, 330, 360, 361, 525, 526, 569, 580, 617, 620, 765, 768, 771, 777, 820, 944, 964, 965, 1139, 1140, 1203, 1205, 1329, 1360], "deploi": [174, 178], "deprec": [45, 66, 144, 145, 171, 172, 173, 174, 178, 181, 190, 246, 288, 306, 311, 330, 434, 470, 491, 587, 624, 666, 674, 734, 743, 751, 752, 820, 835, 852, 874, 887, 900, 906, 907, 912, 934, 1041, 1049, 1050, 1081, 1109, 1209, 1245, 1253, 1310, 1329], "depth": 140, "desc": [940, 1338, 1341, 1345, 1347], "descend": [57, 271, 276, 330, 355, 375, 555, 610, 620, 653, 662, 663, 732, 744, 820, 888, 892, 934, 959, 979, 1129, 1169, 1205, 1231, 1242, 1318, 1329], "describ": [174, 219, 330, 687, 934, 1266, 1329], "descript": [221, 330, 860, 934, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1355, 1358, 1359], "deseri": [140, 270, 330, 491, 583, 820, 887, 934], "deserializ": [200, 270, 330, 422, 583, 820, 847, 887, 934], "design": [287, 292, 330], "desir": [174, 235, 330, 379, 470, 560, 864, 934, 983, 1081, 1174], "destin": 147, "detail": [62, 130, 146, 147, 167, 169, 188, 221, 330, 459, 725, 820, 860, 909, 934, 1070, 1312, 1329, 1360], "determin": [20, 43, 46, 52, 57, 65, 94, 140, 144, 145, 146, 149, 155, 156, 158, 163, 165, 191, 195, 214, 221, 233, 234, 240, 262, 293, 294, 300, 330, 400, 439, 452, 453, 500, 560, 580, 617, 623, 625, 660, 668, 681, 704, 705, 707, 708, 727, 762, 792, 795, 811, 820, 836, 843, 844, 851, 860, 883, 897, 903, 934, 1046, 1063, 1064, 1112, 1174, 1203, 1209, 1210, 1240, 1247, 1283, 1286, 1287, 1329], "dev": [187, 943, 1222, 1329], "develop": [147, 174, 178], "deviat": [278, 330, 477, 643, 644, 665, 801, 820, 894, 934, 1091, 1244, 1329, 1346], "devic": [287, 330, 841, 909, 934, 1308, 1329], "devicememoryresourc": 909, "df": [1, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 84, 101, 105, 130, 131, 132, 133, 134, 135, 136, 145, 146, 147, 158, 171, 172, 174, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 387, 388, 390, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 638, 640, 642, 643, 645, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 798, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 816, 820, 860, 883, 899, 901, 914, 917, 925, 934, 940, 1064, 1090, 1259, 1263, 1275, 1276, 1306, 1329, 1334, 1338, 1339, 1340, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1360], "df0": [247, 330, 875, 934, 1344], "df1": [57, 65, 167, 168, 206, 209, 247, 277, 302, 330, 875, 934, 1341, 1343, 1344, 1345, 1357], "df2": [57, 65, 167, 168, 206, 209, 302, 330, 1341, 1343, 1344, 1345, 1357], "df3": [57, 330], "df4": 330, "df5": 330, "df6": 330, "df_a": 1357, "df_a1": 65, "df_a2": 65, "df_a3": 65, "df_agg_nuniqu": [251, 330], "df_b": 1357, "df_current_batch": 145, "df_d1": 65, "df_d2": 65, "df_from_str_repr": [286, 330], "df_h1": 65, "df_h2": 65, "df_new_grid": [504, 820], "df_nuniqu": [251, 330], "df_original_grid": [504, 820], "df_panda": 1339, "df_pd": 130, "df_tempor": [633, 635, 637, 639, 641, 644, 646, 648, 820], "dfi": [130, 188], "diagon": [65, 294, 330], "diagonal_relax": 65, "dict": [7, 36, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 58, 60, 62, 129, 131, 132, 133, 134, 135, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 174, 213, 233, 253, 259, 263, 264, 265, 283, 284, 287, 292, 294, 330, 820, 881, 934, 939, 940, 1101, 1329, 1342], "dictat": [141, 449, 820, 1060], "dictionari": [7, 36, 43, 45, 46, 47, 51, 52, 53, 54, 55, 62, 88, 129, 131, 132, 133, 135, 140, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 158, 159, 161, 162, 163, 233, 253, 263, 264, 265, 283, 284, 287, 292, 330, 934, 939], "did": [428, 1035], "diff": [304, 330, 460, 461, 462, 463, 464, 465, 466, 549, 820, 904, 934, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1163, 1329], "differ": [46, 51, 100, 103, 124, 144, 149, 164, 167, 169, 184, 203, 209, 221, 222, 233, 235, 255, 262, 264, 265, 284, 287, 288, 294, 330, 423, 435, 449, 450, 453, 459, 468, 474, 489, 498, 530, 549, 551, 560, 569, 602, 603, 605, 610, 624, 625, 704, 730, 768, 771, 777, 820, 849, 850, 852, 860, 864, 883, 934, 938, 940, 1010, 1030, 1042, 1060, 1061, 1064, 1070, 1079, 1086, 1095, 1110, 1144, 1163, 1165, 1182, 1191, 1192, 1194, 1209, 1210, 1283, 1329, 1353, 1355, 1357], "digit": [73, 614, 649, 650, 676, 820, 940, 1225, 1226, 1248, 1255, 1329, 1360], "dimens": [129, 131, 133, 135, 153, 154, 162, 330, 626, 820, 934, 1211, 1310, 1329], "dimension": [131, 133, 135, 288, 330, 934, 1329], "direct": [46, 147, 156, 160, 163, 273, 287, 298, 330, 374, 553, 654, 820, 889, 934, 978, 1167, 1233, 1329], "directli": [12, 36, 46, 64, 65, 146, 174, 178, 184, 265, 287, 330, 475, 477, 478, 625, 795, 820, 842, 934, 1089, 1091, 1092, 1210, 1308, 1329, 1341, 1357, 1360], "directori": [46, 51, 141, 156, 158, 161, 163, 330], "dirpath": [41, 43, 47, 48, 51, 158, 330], "disabl": [51, 55, 56, 96, 97, 156, 161, 175, 233, 330, 841, 934], "disable_string_cach": 97, "disallow": 174, "discard": [212, 330, 485, 820, 856, 934, 1099, 1329], "disco": [678, 680, 1257, 1259], "discont": [678, 680, 1257, 1259], "discourag": [569, 820], "discoveri": [255, 330], "discret": [420, 423, 472, 500, 530, 549, 617, 820, 1028, 1030, 1084, 1112, 1144, 1163, 1203, 1329], "disk": [51, 52, 53, 54, 55, 150, 330, 584, 890, 934], "dispatch": 940, "displai": [13, 16, 17, 18, 19, 23, 24, 25, 29, 30, 31, 32, 46, 199, 219, 330, 846, 852, 934], "distanc": [236, 330, 500, 820, 865, 934, 1112, 1329], "distinct": [46, 178, 253, 255, 308, 330, 380, 509, 512, 561, 620, 629, 765, 820, 984, 1121, 1124, 1175, 1205, 1214, 1329, 1346, 1356, 1358, 1360], "distinct_count": [51, 55, 330, 934], "distinguish": [459, 1070], "distribut": [518, 660, 820, 1132, 1240, 1329], "div": 1350, "divid": [26, 420, 454, 467, 475, 477, 478, 489, 518, 617, 820, 1028, 1065, 1078, 1089, 1091, 1092, 1132, 1203, 1329, 1346, 1351], "divis": [489, 728, 820, 1351], "divisor": [278, 301, 330, 556, 562, 643, 644, 647, 648, 665, 733, 753, 796, 797, 801, 809, 820, 894, 902, 934, 1222, 1224, 1244, 1319, 1329], "dl": [292, 330], "do": [1, 46, 52, 53, 54, 55, 57, 63, 64, 131, 132, 135, 144, 156, 158, 163, 167, 168, 169, 170, 189, 199, 201, 209, 232, 235, 236, 255, 259, 282, 294, 298, 330, 333, 419, 427, 532, 568, 690, 691, 699, 700, 701, 751, 792, 795, 811, 820, 837, 841, 842, 846, 848, 852, 864, 865, 870, 879, 881, 890, 909, 934, 940, 1027, 1034, 1095, 1146, 1269, 1270, 1278, 1279, 1280, 1313, 1329, 1334], "do_polars_oper": 35, "do_someth": 146, "do_various_th": 184, "doc": [45, 47, 48, 147, 150, 152, 167, 169, 186, 187, 197, 330, 942, 943], "document": [38, 100, 147, 186, 330, 334, 456, 459, 684, 704, 706, 707, 711, 816, 909, 942, 1010, 1067, 1070, 1263, 1283, 1285, 1286, 1290], "doe": [16, 43, 45, 52, 57, 118, 129, 131, 132, 133, 135, 136, 144, 145, 146, 147, 148, 149, 153, 154, 158, 159, 162, 164, 194, 209, 212, 216, 221, 222, 234, 235, 263, 264, 265, 295, 304, 307, 330, 333, 334, 470, 485, 489, 498, 560, 569, 668, 678, 680, 692, 700, 701, 730, 816, 820, 840, 841, 846, 856, 860, 864, 870, 898, 904, 908, 934, 1017, 1081, 1095, 1099, 1110, 1235, 1247, 1257, 1259, 1271, 1329, 1334, 1352], "doesn": [45, 144, 158, 221, 236, 330, 472, 820, 860, 865, 934, 1084, 1329], "dog": [667, 710, 713, 750, 1246, 1289, 1292], "doi": 1353, "dollar": [690, 691, 1269, 1270], "domain": [1, 676, 1255], "don": [65, 221, 236, 240, 295, 298, 330, 419, 532, 569, 610, 820, 860, 865, 898, 934, 940, 1027, 1146, 1182, 1329], "done": [145, 164, 184, 190, 236, 330, 345, 346, 610, 820, 835, 838, 865, 934, 950, 1329], "dot": [57, 584, 816, 820, 890, 934, 1329], "doubl": [289, 330, 690, 691, 1269, 1270], "dow": 1353, "down": [158, 161, 162, 163, 164, 192, 330, 401, 488, 820, 1102, 1329], "download": [154, 158, 161, 162, 584, 890, 934], "downstream": [288, 330, 653, 820, 1231, 1329], "dr": 160, "drago": [681, 1260], "dragon": 681, "dragonfr": 1260, "dragonfruit": [681, 694, 705, 1260, 1273, 1284], "dramat": 149, "draw": [26, 31, 174, 178, 1360], "drawback": 816, "drawfn": 1360, "drawing_charact": 26, "dremio": 146, "driver": [44, 146, 147, 330], "drop": [1, 132, 202, 203, 204, 240, 295, 304, 330, 423, 425, 426, 530, 531, 617, 820, 849, 850, 898, 904, 934, 1030, 1032, 1033, 1144, 1145, 1203, 1329, 1356], "drop_dupl": [295, 330, 898, 934], "drop_empty_col": [149, 155], "drop_empty_row": [149, 155], "drop_first": [285, 330, 1305, 1329], "drop_in_plac": 330, "drop_nan": [330, 426, 820, 934, 1033, 1329], "drop_nul": [330, 425, 820, 934, 1032, 1329], "dset": 164, "dst": [454, 467, 1065, 1078], "dst_offset": [428, 1035], "dt": [1, 46, 57, 149, 155, 262, 330, 630, 765, 820, 829, 883, 934, 940, 1337, 1352, 1353], "dt1": 1352, "dt2": 1352, "dtm": [46, 330, 431, 459, 940, 1038, 1070, 1352], "dtm_iso": 459, "dtm_iso_strict": 459, "dtype": [16, 46, 56, 60, 66, 72, 76, 88, 96, 97, 107, 129, 131, 133, 135, 136, 144, 145, 146, 147, 149, 153, 154, 155, 158, 162, 171, 172, 173, 174, 178, 186, 188, 192, 195, 221, 236, 262, 286, 287, 288, 289, 292, 298, 307, 330, 387, 401, 402, 403, 404, 405, 406, 417, 418, 459, 470, 479, 492, 527, 535, 566, 568, 569, 576, 615, 622, 623, 630, 655, 657, 683, 704, 721, 725, 731, 741, 748, 767, 771, 775, 776, 778, 779, 780, 781, 782, 792, 795, 802, 811, 820, 838, 843, 860, 865, 883, 908, 934, 939, 940, 942, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 990, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1025, 1026, 1029, 1030, 1070, 1081, 1088, 1119, 1137, 1138, 1141, 1149, 1173, 1180, 1182, 1201, 1212, 1234, 1237, 1262, 1283, 1300, 1307, 1308, 1310, 1311, 1312, 1313, 1317, 1329, 1357, 1360], "dtype_format": [46, 330], "dtypekind": 188, "dtypelik": [186, 942], "dtypeoper": [1, 60], "dubiou": 100, "due": [221, 236, 262, 265, 300, 330, 341, 436, 449, 454, 467, 593, 594, 596, 598, 600, 601, 630, 633, 635, 637, 639, 641, 644, 646, 648, 746, 760, 761, 763, 764, 807, 808, 820, 838, 860, 865, 883, 934, 1043, 1060, 1065, 1078], "dummi": [285, 330, 1305, 1329], "dump": 140, "duplic": [57, 105, 228, 235, 236, 237, 295, 299, 330, 341, 507, 593, 617, 820, 864, 865, 866, 898, 901, 934, 1118, 1203, 1329, 1358], "duplicateerror": [617, 820, 1203, 1329], "dur": [237, 330, 866, 934], "durat": [184, 236, 300, 330, 428, 436, 459, 460, 461, 462, 463, 464, 465, 466, 470, 476, 725, 760, 761, 763, 764, 807, 808, 820, 865, 934, 939, 940, 1035, 1043, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1081, 1090, 1310, 1312, 1329], "dure": [56, 104, 144, 145, 158, 184, 209, 330, 1095, 1329], "dutch": [427, 746, 1034], "dynam": [141, 221, 330, 379, 560, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 820, 860, 934, 938, 983, 1174], "dynamicgroupbi": [221, 330], "e": [16, 41, 43, 45, 47, 48, 51, 52, 130, 140, 144, 150, 152, 156, 161, 163, 164, 176, 200, 212, 219, 223, 232, 236, 239, 281, 282, 288, 298, 330, 339, 422, 472, 476, 479, 506, 563, 569, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 655, 660, 679, 700, 701, 712, 767, 782, 799, 810, 820, 847, 856, 865, 868, 881, 934, 938, 940, 1084, 1090, 1117, 1240, 1258, 1291, 1329, 1347, 1352, 1360], "e101": [46, 330], "e_filt": [580, 582], "e_sum_ov": [580, 582], "e_sum_slic": [580, 582], "each": [43, 46, 52, 57, 66, 73, 84, 145, 146, 149, 154, 162, 167, 168, 169, 170, 172, 196, 198, 205, 212, 219, 220, 221, 234, 236, 240, 253, 255, 262, 264, 266, 287, 292, 296, 299, 300, 308, 309, 311, 313, 315, 316, 324, 330, 355, 400, 404, 405, 420, 454, 467, 485, 509, 512, 538, 541, 548, 558, 565, 569, 617, 620, 628, 629, 636, 640, 651, 656, 663, 676, 680, 681, 685, 686, 694, 696, 697, 705, 712, 727, 741, 744, 750, 775, 776, 802, 810, 820, 841, 844, 845, 851, 856, 860, 865, 879, 883, 899, 901, 910, 912, 914, 916, 917, 925, 934, 959, 1007, 1008, 1014, 1028, 1065, 1078, 1121, 1124, 1152, 1155, 1162, 1172, 1203, 1205, 1213, 1214, 1227, 1236, 1255, 1259, 1260, 1264, 1265, 1273, 1275, 1276, 1284, 1291, 1299, 1329, 1346, 1357, 1358, 1360], "eager": [221, 236, 255, 298, 330, 429, 432, 435, 437, 446, 447, 449, 450, 453, 454, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 633, 635, 637, 639, 641, 644, 646, 648, 741, 745, 760, 761, 763, 764, 771, 775, 776, 779, 792, 795, 798, 799, 802, 807, 808, 811, 819, 820, 860, 865, 870, 934, 939, 1035, 1036, 1039, 1042, 1043, 1044, 1045, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1357], "eagerli": [560, 1338], "ear": [694, 705, 1273], "earlier": [236, 330, 865, 934], "earliest": [221, 330, 452, 453, 704, 707, 762, 860, 926, 934, 1063, 1064, 1283, 1286], "easi": 184, "easiest": 189, "easili": [57, 268, 292, 304, 309, 330, 802, 816, 885, 904, 910, 934], "east": [75, 163, 237, 330, 866, 934], "ebf1d": [46, 330], "eee": [1, 46, 330, 940], "ef": 691, "effect": [46, 214, 221, 330, 436, 489, 569, 595, 597, 599, 751, 820, 860, 907, 908, 934, 1035, 1043], "effici": [130, 146, 232, 234, 330, 568, 820], "efgh": 1352, "eg": [23, 31, 32, 46, 65, 147, 184, 287, 330, 454, 704, 707, 728, 820, 940, 1283, 1286], "egnaro": 1352, "either": [88, 141, 174, 231, 235, 236, 237, 253, 262, 263, 287, 288, 330, 476, 568, 615, 617, 630, 704, 736, 744, 748, 802, 820, 841, 864, 865, 866, 868, 883, 934, 938, 940, 1090, 1201, 1203, 1283, 1329, 1342, 1360], "element": [19, 20, 31, 169, 170, 173, 174, 176, 178, 189, 191, 198, 231, 255, 263, 276, 278, 293, 301, 330, 347, 348, 349, 350, 351, 352, 363, 364, 399, 400, 407, 410, 411, 412, 413, 415, 416, 417, 418, 419, 425, 426, 480, 481, 485, 498, 502, 510, 521, 529, 531, 532, 533, 536, 541, 549, 550, 551, 552, 556, 562, 564, 565, 568, 569, 610, 611, 620, 623, 631, 632, 634, 636, 638, 640, 642, 643, 645, 647, 652, 657, 658, 659, 663, 664, 665, 696, 697, 708, 723, 724, 726, 727, 733, 744, 753, 779, 796, 797, 801, 809, 820, 836, 845, 892, 894, 897, 902, 934, 951, 952, 953, 954, 955, 956, 967, 968, 1002, 1012, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1032, 1033, 1093, 1094, 1099, 1100, 1111, 1114, 1122, 1131, 1133, 1135, 1136, 1143, 1145, 1146, 1147, 1150, 1155, 1163, 1164, 1165, 1166, 1178, 1179, 1182, 1198, 1205, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1229, 1237, 1238, 1239, 1243, 1244, 1275, 1276, 1287, 1301, 1302, 1303, 1307, 1314, 1315, 1319, 1329, 1346, 1347], "elementwis": [568, 610, 631, 632, 634, 636, 638, 640, 643, 645, 647, 820, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1329], "elif": 810, "elig": [870, 934], "elimin": [518, 820, 1132, 1329], "elis": [247, 330, 875, 934], "ellips": 26, "ellipsi": [219, 330], "elppa": 1352, "els": [145, 810], "email": [676, 1255], "email_part": [676, 1255], "emphas": [330, 334], "emploi": 940, "empti": [19, 41, 43, 52, 109, 132, 144, 145, 149, 155, 158, 193, 194, 221, 246, 297, 330, 666, 674, 780, 798, 839, 840, 860, 874, 900, 934, 939, 940, 1015, 1017, 1100, 1119, 1133, 1245, 1253, 1329], "en": [26, 46, 330], "enabl": [34, 35, 51, 55, 56, 96, 97, 148, 156, 159, 161, 163, 167, 168, 169, 170, 182, 186, 268, 289, 304, 330, 342, 344, 624, 625, 653, 668, 678, 680, 692, 732, 816, 820, 841, 885, 904, 934, 942, 947, 948, 1209, 1210, 1231, 1247, 1257, 1259, 1271, 1311, 1318, 1329], "enable_string_cach": 96, "enclos": [491, 820], "encod": [69, 75, 87, 140, 144, 145, 158, 285, 330, 333, 384, 491, 628, 670, 716, 820, 987, 1213, 1249, 1305, 1329, 1334], "encount": [120, 144, 145, 158, 221, 330, 602, 603, 683, 684, 751, 755, 769, 820, 860, 934, 1191, 1192, 1262, 1263, 1329], "end": [43, 46, 52, 144, 145, 158, 221, 255, 330, 383, 386, 389, 402, 406, 428, 454, 479, 554, 667, 672, 676, 681, 688, 694, 698, 699, 700, 703, 741, 746, 759, 760, 761, 762, 763, 764, 767, 775, 776, 779, 807, 808, 810, 816, 820, 860, 879, 934, 940, 989, 1004, 1009, 1035, 1065, 1129, 1168, 1251, 1255, 1260, 1267, 1273, 1277, 1278, 1279, 1284, 1329, 1352], "endian": [387, 990], "endpoint": [2, 420, 617, 779, 820, 1028, 1203, 1329], "ends_a": 1352, "ends_in_digit": 1352, "ends_with": [383, 389, 406, 667, 698, 940, 1009, 1277, 1350], "ends_with_expr": 386, "ends_with_lit": 386, "engin": [20, 44, 146, 147, 149, 155, 180, 220, 235, 240, 288, 295, 316, 330, 568, 799, 820, 841, 859, 864, 870, 874, 898, 909, 917, 931, 934, 938, 1182, 1310, 1329, 1341, 1357], "engine_opt": [44, 149, 330], "enginetyp": [841, 934], "enough": [532, 660, 820, 1146, 1240, 1329], "ensur": [16, 46, 141, 147, 173, 176, 186, 212, 220, 253, 255, 263, 288, 330, 506, 568, 820, 856, 859, 870, 909, 934, 940, 942, 1310, 1329], "enter": 184, "entir": [46, 63, 64, 149, 155, 330, 841, 842, 934], "entri": [184, 330, 934, 939, 1357], "entropi": [820, 1329], "enumer": [75, 134, 144, 145, 149, 155, 158, 234, 330], "env": [10, 179], "env_onli": 36, "environ": [2, 7, 10, 36, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 161, 162, 163, 177, 180, 287, 330, 934], "eol_char": [144, 145, 158], "eparg": 1352, "epoch": [71, 72, 771, 1353], "epoch_": [437, 1044], "epoch_n": [437, 1044], "epochtimeunit": [437, 771, 1044], "eq": [212, 330, 474, 485, 820, 856, 934, 1086, 1329], "eq_miss": [820, 1194, 1329], "equal": [56, 97, 144, 145, 158, 167, 168, 169, 170, 221, 236, 237, 247, 276, 330, 420, 467, 473, 474, 494, 520, 560, 605, 617, 623, 631, 632, 634, 636, 638, 640, 643, 645, 647, 663, 688, 689, 692, 714, 744, 779, 796, 797, 810, 816, 820, 860, 865, 866, 875, 892, 934, 1028, 1065, 1086, 1174, 1194, 1203, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1267, 1268, 1271, 1293, 1329, 1346, 1349, 1360], "equival": [46, 65, 129, 131, 132, 133, 135, 153, 154, 162, 221, 231, 251, 330, 339, 343, 405, 473, 474, 476, 489, 494, 496, 520, 567, 589, 591, 604, 605, 606, 609, 615, 686, 710, 712, 713, 720, 728, 735, 820, 860, 934, 1008, 1085, 1086, 1090, 1105, 1107, 1131, 1134, 1181, 1193, 1194, 1265, 1289, 1291, 1292, 1329, 1339, 1347], "err": 677, "error": [20, 45, 64, 65, 115, 119, 121, 131, 132, 135, 144, 145, 149, 156, 158, 163, 236, 255, 263, 288, 330, 341, 366, 367, 384, 427, 535, 537, 539, 560, 593, 625, 667, 670, 675, 677, 679, 683, 684, 704, 706, 707, 711, 820, 838, 842, 865, 909, 917, 934, 970, 971, 987, 1034, 1149, 1151, 1153, 1210, 1246, 1249, 1254, 1256, 1258, 1262, 1263, 1283, 1285, 1286, 1290, 1310, 1329, 1355], "escap": [98, 144, 145, 147, 158, 673, 690, 691, 1252, 1269, 1270], "esp": 20, "especi": [172, 629, 820, 934, 1214, 1329], "espresso": 940, "est": 763, "establish": [146, 184], "estim": [144, 145, 190, 207, 330, 346, 477, 478, 518, 740, 820, 835, 934, 950, 1088, 1091, 1092, 1132, 1329], "estimated_s": [330, 1329], "etc": [27, 45, 46, 141, 144, 148, 149, 150, 152, 159, 160, 330, 569, 820, 940, 1228, 1230, 1329, 1353], "eu": [159, 160], "eur": [219, 330, 1360], "europ": [432, 436, 453, 1039, 1043, 1064], "eval": [286, 330, 568, 569, 766, 820, 1182, 1307, 1329], "evalu": [52, 53, 54, 55, 163, 210, 212, 236, 330, 343, 356, 358, 359, 391, 392, 393, 394, 396, 397, 419, 485, 503, 523, 524, 560, 609, 610, 736, 738, 741, 745, 760, 761, 763, 764, 766, 775, 776, 779, 792, 795, 798, 802, 807, 808, 810, 811, 820, 841, 856, 862, 864, 865, 934, 960, 962, 963, 994, 995, 996, 997, 999, 1000, 1027, 1099, 1137, 1138, 1320, 1329, 1349], "even": [43, 52, 144, 235, 330, 476, 614, 617, 820, 864, 934, 940, 1090, 1203, 1329], "evenli": [221, 330, 779, 860, 934], "event": [64, 842, 934], "eventu": [44, 330], "ever": [610, 820], "everi": [20, 43, 52, 144, 145, 149, 155, 158, 215, 221, 284, 300, 330, 358, 359, 360, 361, 364, 366, 372, 415, 416, 417, 418, 419, 454, 467, 481, 493, 525, 526, 530, 533, 536, 537, 538, 546, 549, 554, 558, 629, 674, 755, 756, 820, 858, 860, 934, 962, 963, 964, 965, 968, 970, 976, 1023, 1024, 1025, 1026, 1027, 1065, 1078, 1094, 1104, 1139, 1140, 1144, 1147, 1150, 1151, 1152, 1160, 1163, 1168, 1172, 1214, 1253, 1329], "everybodi": [668, 692, 1247, 1271], "everyth": 940, "ew": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "ewm_mean": [820, 1329], "ewm_mean_bi": [820, 1329], "ewm_std": [820, 1329], "ewm_var": [820, 1329], "ewma": [476, 820, 1090, 1329], "exact": [169, 172, 174, 178, 236, 274, 330, 346, 489, 674, 702, 703, 704, 706, 707, 728, 820, 865, 934, 1253, 1283, 1285, 1286], "exactli": [131, 132, 135, 167, 168, 169, 170, 173, 174, 178, 330, 696, 697, 702, 703, 765, 934, 1235, 1275, 1276, 1281, 1282, 1329], "exampl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 101, 104, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 820, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 939, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1106, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1329, 1334, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1358, 1359], "exc_tb": 1357, "exc_typ": 1357, "exc_val": 1357, "exce": [219, 330], "excel": [42, 46, 143, 149, 330, 832], "excelspreadsheetengin": 149, "except": [0, 201, 216, 223, 236, 239, 259, 281, 330, 625, 681, 705, 767, 820, 832, 848, 865, 881, 934, 940, 1003, 1111, 1136, 1210, 1260, 1284, 1301, 1310, 1329, 1356], "exclud": [174, 178, 221, 330, 400, 415, 418, 427, 506, 576, 727, 746, 816, 820, 860, 934, 940, 1034, 1117, 1329], "excluded_dtyp": [174, 175, 178], "exclus": [263, 330, 735, 741, 775, 776, 820], "execut": [45, 56, 65, 141, 146, 147, 238, 277, 330, 422, 532, 732, 799, 820, 837, 841, 847, 870, 879, 893, 909, 934, 1146, 1318, 1329, 1339, 1340, 1341, 1343, 1357, 1359], "execute_glob": 1357, "execute_opt": [146, 147], "exist": [1, 44, 45, 46, 57, 75, 105, 148, 156, 159, 163, 174, 201, 216, 255, 259, 294, 299, 304, 305, 330, 341, 383, 386, 389, 431, 453, 690, 691, 749, 820, 844, 848, 851, 881, 884, 901, 903, 904, 905, 934, 940, 1038, 1064, 1269, 1270, 1359], "existing_t": 1359, "existing_table_path": [45, 330], "exit": [56, 96, 184, 1344, 1357], "exp": [475, 476, 477, 478, 820, 1089, 1090, 1091, 1092, 1329, 1350], "exp_a": 1351, "expand": [141, 144, 156, 158, 163, 481, 574, 578, 623, 718, 820, 940, 1094, 1329], "expand_selector": 940, "expans": 715, "expect": [7, 43, 45, 47, 51, 52, 53, 54, 55, 73, 75, 79, 110, 118, 126, 144, 146, 148, 154, 156, 158, 159, 161, 162, 163, 168, 170, 330, 560, 569, 780, 820, 868, 870, 934], "expens": [144, 145, 154, 156, 158, 162, 163, 177, 179, 233, 240, 263, 264, 265, 294, 295, 330, 569, 820, 844, 846, 851, 884, 898, 903, 934, 1095, 1182, 1329, 1360], "experiment": [237, 292, 330, 779, 866, 904, 934], "expiri": [7, 43, 45, 47, 51, 52, 53, 54, 55, 148, 154, 156, 158, 159, 161, 162, 163, 330, 934], "explain": [63, 64, 189, 238, 330, 841, 842, 934, 1356], "explainformat": [852, 934], "explicit": [46, 104, 146, 158, 172, 277, 299, 330, 459, 794, 893, 901, 934, 1070], "explicitli": [75, 104, 147, 172, 174, 184, 216, 235, 330, 624, 802, 820, 831, 864, 934, 1357], "explod": [141, 330, 400, 487, 610, 626, 727, 820, 934, 1211, 1329, 1347], "explor": [199, 330, 846, 934], "expon": [615, 820, 1201, 1329, 1351], "exponenti": [475, 476, 477, 478, 480, 615, 820, 1089, 1090, 1091, 1092, 1093, 1329, 1351], "export": [46, 47, 48, 187, 233, 234, 264, 265, 282, 284, 287, 330, 816, 940, 943, 1304, 1329], "expos": 832, "expr": [1, 57, 58, 59, 60, 61, 139, 141, 208, 210, 211, 235, 236, 237, 251, 255, 263, 268, 269, 287, 292, 304, 305, 330, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 816, 820, 821, 822, 825, 826, 827, 828, 829, 853, 854, 855, 864, 865, 866, 880, 885, 886, 904, 905, 934, 940, 1027, 1060, 1085, 1086, 1090, 1097, 1098, 1103, 1105, 1107, 1134, 1146, 1152, 1168, 1172, 1181, 1193, 1194, 1246, 1251, 1258, 1277, 1329, 1355], "expr1": [1349, 1357], "expr2": [1349, 1357], "expr_unique_subset": [251, 330], "express": [0, 14, 52, 53, 54, 55, 63, 64, 139, 141, 171, 174, 178, 191, 208, 210, 212, 220, 226, 235, 236, 240, 251, 255, 263, 268, 269, 273, 276, 287, 292, 293, 304, 305, 307, 309, 316, 330, 339, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 355, 356, 360, 361, 362, 363, 364, 367, 378, 383, 384, 385, 386, 387, 388, 389, 400, 402, 404, 405, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 479, 481, 482, 484, 485, 489, 491, 492, 494, 495, 496, 497, 503, 506, 507, 508, 509, 510, 511, 512, 520, 521, 525, 526, 528, 529, 532, 533, 539, 541, 559, 560, 566, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 587, 589, 591, 593, 594, 596, 598, 600, 601, 604, 605, 607, 609, 610, 614, 615, 616, 617, 619, 623, 624, 625, 626, 628, 629, 651, 652, 653, 656, 658, 659, 661, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 690, 691, 692, 694, 695, 696, 697, 705, 709, 719, 720, 723, 724, 727, 728, 729, 731, 732, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 789, 792, 794, 795, 796, 797, 798, 800, 802, 804, 806, 807, 808, 810, 811, 816, 819, 832, 836, 841, 842, 852, 853, 856, 859, 864, 865, 879, 885, 886, 889, 890, 892, 897, 904, 905, 906, 908, 910, 917, 934, 940, 967, 1016, 1027, 1034, 1038, 1070, 1085, 1086, 1090, 1096, 1105, 1107, 1117, 1134, 1143, 1146, 1181, 1182, 1193, 1194, 1209, 1210, 1229, 1233, 1246, 1247, 1248, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1269, 1270, 1271, 1284, 1288, 1329, 1347, 1349, 1351, 1352, 1356], "exprmetanamespac": [573, 579], "ext": 146, "extend": [0, 132, 302, 330, 482, 820, 832, 938, 949, 1096, 1329], "extend_const": [820, 1329], "extens": [289, 330, 1311, 1329], "extern": [906, 934], "extra": [45, 141, 144, 145, 148, 150, 152, 156, 158, 159, 160, 163, 209, 221, 330, 820, 860, 934, 1095, 1329], "extract": [136, 189, 277, 330, 430, 433, 435, 438, 440, 441, 442, 443, 444, 445, 448, 450, 451, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 614, 676, 677, 678, 683, 684, 694, 696, 820, 1037, 1040, 1041, 1042, 1045, 1047, 1051, 1052, 1053, 1055, 1056, 1059, 1061, 1062, 1066, 1068, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1082, 1255, 1256, 1257, 1262, 1263, 1273, 1350], "extract_mani": [680, 1259], "extract_numb": [614, 820], "extracted_nr": 676, "extrem": [482, 631, 820, 1096, 1215, 1329], "extrema": [655, 820, 1234, 1329], "f": [58, 145, 146, 212, 219, 234, 282, 288, 294, 298, 330, 339, 379, 388, 560, 655, 674, 704, 707, 749, 820, 856, 934, 940, 983, 1174, 1253, 1283, 1286, 1329, 1334, 1347], "f32": [1, 60, 192, 277, 286, 292, 330, 655, 799, 820, 838, 893, 934, 940, 1180, 1329, 1355], "f4": [288, 330], "f5ed2452": [46, 330], "f64": [13, 15, 16, 17, 21, 24, 25, 27, 28, 29, 30, 31, 33, 57, 59, 61, 65, 84, 130, 132, 153, 164, 171, 174, 192, 193, 194, 197, 199, 200, 201, 203, 205, 210, 211, 214, 218, 219, 220, 221, 226, 227, 235, 236, 242, 243, 244, 245, 249, 255, 256, 257, 275, 276, 278, 280, 292, 301, 304, 309, 312, 314, 317, 318, 319, 320, 322, 323, 330, 338, 341, 347, 348, 349, 350, 351, 352, 370, 376, 381, 388, 401, 407, 408, 410, 411, 412, 420, 421, 425, 426, 455, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 488, 489, 494, 496, 504, 505, 513, 514, 515, 516, 518, 520, 532, 543, 544, 556, 562, 563, 564, 565, 567, 570, 571, 572, 588, 591, 593, 602, 603, 604, 605, 611, 615, 617, 618, 619, 620, 624, 625, 631, 632, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 657, 658, 659, 660, 664, 665, 719, 723, 724, 728, 733, 742, 743, 747, 749, 751, 753, 766, 767, 779, 782, 785, 786, 787, 799, 801, 809, 816, 820, 838, 839, 846, 848, 849, 854, 855, 859, 860, 863, 864, 865, 872, 873, 880, 892, 894, 902, 904, 906, 910, 913, 915, 918, 919, 920, 921, 923, 924, 934, 940, 951, 952, 953, 954, 955, 956, 974, 980, 985, 991, 1012, 1013, 1018, 1019, 1020, 1028, 1029, 1032, 1033, 1066, 1089, 1090, 1091, 1092, 1093, 1097, 1102, 1112, 1115, 1116, 1146, 1157, 1158, 1170, 1176, 1177, 1178, 1179, 1198, 1201, 1203, 1205, 1210, 1215, 1217, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1237, 1238, 1239, 1243, 1302, 1303, 1317, 1329, 1338, 1346, 1347, 1351, 1354, 1357, 1360], "f_string": 770, "fa1e": [709, 1288], "face": [7, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 161, 162, 163, 330, 934], "facil": 146, "facilit": [195, 330], "factor": [475, 477, 478, 725, 820, 1089, 1091, 1092, 1312, 1329], "fail": [7, 43, 44, 45, 47, 51, 52, 53, 54, 55, 130, 148, 150, 154, 156, 158, 159, 161, 162, 163, 188, 288, 295, 330, 356, 457, 560, 704, 706, 707, 711, 820, 898, 934, 1182, 1283, 1285, 1286, 1290, 1310, 1329, 1355], "fall": [163, 420, 617, 820, 841, 909, 934, 1028, 1203, 1329, 1346], "fallback": 149, "fals": [11, 13, 14, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 39, 43, 45, 46, 51, 52, 53, 54, 55, 57, 63, 64, 65, 130, 131, 132, 134, 135, 136, 141, 144, 145, 146, 148, 149, 150, 152, 154, 155, 156, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 188, 191, 192, 193, 194, 199, 206, 214, 218, 219, 220, 221, 225, 226, 228, 229, 230, 233, 235, 236, 238, 243, 244, 250, 251, 253, 255, 256, 263, 264, 265, 266, 268, 271, 274, 276, 277, 280, 283, 285, 288, 289, 293, 294, 295, 299, 300, 302, 304, 312, 314, 317, 318, 320, 323, 330, 342, 343, 344, 355, 358, 359, 362, 366, 367, 375, 380, 383, 386, 389, 400, 401, 402, 406, 414, 415, 416, 417, 418, 419, 420, 427, 439, 455, 472, 473, 474, 475, 477, 478, 496, 497, 500, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 523, 524, 528, 532, 535, 537, 539, 548, 555, 560, 561, 567, 568, 569, 573, 575, 576, 577, 579, 581, 584, 585, 604, 605, 607, 609, 610, 612, 613, 617, 620, 631, 632, 634, 636, 638, 640, 642, 643, 645, 647, 651, 653, 655, 660, 662, 663, 666, 667, 668, 669, 672, 678, 679, 680, 682, 683, 690, 691, 692, 695, 696, 698, 704, 706, 707, 709, 727, 729, 732, 735, 736, 737, 738, 739, 741, 744, 745, 746, 750, 751, 754, 755, 760, 761, 763, 764, 775, 776, 779, 780, 786, 792, 795, 798, 799, 802, 804, 807, 808, 810, 811, 820, 836, 838, 839, 840, 841, 842, 846, 852, 859, 860, 864, 865, 868, 870, 879, 885, 888, 890, 892, 893, 897, 898, 901, 904, 909, 913, 915, 918, 919, 921, 924, 934, 939, 940, 947, 948, 959, 962, 963, 966, 970, 971, 979, 984, 986, 987, 989, 992, 1003, 1004, 1006, 1009, 1011, 1014, 1015, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1034, 1046, 1066, 1086, 1087, 1089, 1091, 1092, 1099, 1101, 1106, 1108, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1137, 1138, 1142, 1146, 1149, 1151, 1153, 1162, 1169, 1175, 1188, 1194, 1196, 1199, 1200, 1203, 1205, 1206, 1207, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1231, 1235, 1240, 1242, 1245, 1246, 1247, 1248, 1251, 1257, 1258, 1259, 1261, 1262, 1269, 1270, 1271, 1274, 1275, 1277, 1283, 1285, 1286, 1288, 1305, 1310, 1311, 1315, 1318, 1320, 1329, 1339, 1341, 1347, 1352, 1357], "far": [46, 330], "fashion": [235, 330, 852, 879, 890, 934], "fast": [51, 53, 55, 141, 177, 179, 330, 482, 653, 820, 934, 938, 1096, 1231, 1329, 1360], "fast_executemani": [44, 330], "faster": [52, 53, 54, 55, 63, 64, 146, 149, 209, 288, 298, 330, 569, 730, 820, 841, 842, 852, 879, 890, 934, 1095, 1182, 1329], "fastexcel": [149, 166], "favor": [44, 330], "fay": 140, "feat1": [287, 292, 330], "feat2": [287, 292, 330], "feather": [47, 150, 161, 330, 832], "featur": [1, 51, 62, 73, 75, 79, 287, 292, 330], "feature_0": [906, 934], "feature_0_train": [906, 934], "feature_1": [906, 934], "feature_nam": [292, 330], "feb": [166, 1352], "februari": 1352, "fed": 700, "feel": [668, 692, 1247, 1271], "fetch": [138, 841, 934], "fetch_california_h": [292, 330], "few": [219, 330], "fewer": [681, 705, 934, 1260, 1284], "ff": 1346, "ff00": [709, 1288], "fff": 1, "ffff00": [384, 385, 670, 987, 988, 1249], "ffffff": [46, 330], "ffi": [207, 330, 1088, 1329], "fgg": 940, "fghi": 1352, "fh": 145, "fiction": 1338, "field": [42, 43, 45, 52, 88, 122, 125, 132, 296, 330, 379, 560, 568, 569, 595, 597, 599, 628, 676, 677, 683, 696, 697, 717, 718, 719, 725, 732, 755, 756, 781, 802, 820, 899, 934, 983, 1174, 1182, 1213, 1256, 1275, 1276, 1297, 1299, 1312, 1329, 1353], "field_0": [379, 560, 983, 1174], "field_1": [379, 560, 983, 1174], "field_2": [983, 1174], "field_n": [379, 560, 983, 1174], "field_nam": [569, 820, 1182, 1329], "fiftyf": [502, 820], "figsiz": [584, 879, 890, 934], "figur": [584, 650, 820, 890, 934, 1226, 1329], "file": [8, 9, 11, 12, 38, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 200, 209, 270, 330, 422, 491, 583, 587, 820, 847, 887, 934, 938, 1095, 1329], "file_cache_ttl": [154, 158, 161, 162], "filenam": 150, "filesourc": [149, 155, 156, 163], "filesystem": [45, 148, 159, 160, 330], "fill": [57, 65, 193, 210, 211, 273, 298, 330, 334, 382, 415, 418, 483, 484, 490, 504, 505, 632, 634, 636, 638, 640, 643, 645, 647, 654, 770, 792, 795, 811, 820, 854, 855, 889, 906, 934, 1097, 1098, 1115, 1116, 1195, 1216, 1217, 1219, 1222, 1223, 1224, 1233, 1329], "fill_char": [688, 689, 1267, 1268], "fill_nan": [211, 330, 484, 820, 855, 934, 1098, 1329], "fill_nul": [57, 210, 330, 483, 820, 854, 906, 934, 1097, 1329], "fill_valu": [273, 298, 330, 654, 820, 889, 934, 1233, 1329], "fillnullstrategi": [211, 330, 484, 820, 855, 934, 1098, 1329], "film": 1338, "filter": [1, 52, 53, 54, 55, 58, 63, 64, 139, 158, 159, 163, 164, 203, 204, 228, 229, 230, 255, 316, 330, 402, 406, 580, 582, 672, 698, 734, 759, 762, 769, 798, 799, 810, 820, 841, 842, 849, 850, 852, 862, 879, 890, 893, 917, 934, 940, 1230, 1329, 1345], "final": [19, 46, 57, 141, 163, 236, 238, 330, 475, 477, 478, 820, 846, 865, 934, 1089, 1091, 1092, 1329, 1358], "find": [65, 217, 330, 502, 652, 667, 668, 680, 820, 1114, 1229, 1247, 1259, 1269, 1329], "find_pat": 679, "fine": [841, 931, 934], "finish": [209, 330, 1095, 1329], "finit": [508, 728, 751, 820, 1120, 1329], "first": [51, 57, 144, 145, 149, 150, 152, 155, 156, 158, 163, 167, 168, 169, 170, 189, 219, 221, 223, 235, 236, 239, 240, 250, 254, 255, 262, 281, 285, 286, 294, 295, 300, 307, 313, 330, 355, 357, 366, 419, 423, 447, 449, 454, 470, 489, 499, 502, 509, 522, 530, 532, 537, 538, 560, 568, 569, 581, 590, 614, 615, 630, 652, 663, 667, 674, 675, 679, 681, 683, 684, 690, 691, 705, 712, 747, 748, 755, 769, 773, 810, 816, 820, 860, 861, 864, 865, 869, 878, 883, 898, 906, 908, 914, 934, 940, 959, 970, 1027, 1029, 1030, 1058, 1060, 1065, 1081, 1111, 1114, 1121, 1136, 1144, 1146, 1151, 1152, 1174, 1182, 1229, 1242, 1253, 1254, 1256, 1258, 1260, 1262, 1263, 1269, 1270, 1284, 1291, 1301, 1305, 1307, 1310, 1329, 1349, 1350, 1352, 1358, 1360], "first_column": [46, 330], "first_non_nul": [560, 1174], "first_part": [696, 697, 1275, 1276], "fisher": [518, 660, 820, 1132, 1240, 1329], "fit": [140, 233, 274, 298, 330, 655, 795, 820, 1234, 1235, 1329], "five": [291, 330, 1360], "fix": [16, 66, 75, 172, 470, 765, 1081], "flag": [62, 148, 159, 171, 271, 288, 330, 653, 667, 675, 676, 679, 690, 691, 820, 852, 870, 888, 934, 940, 1231, 1246, 1254, 1255, 1258, 1269, 1270, 1310, 1329, 1352], "flat": [140, 265, 330, 533, 626, 820, 1147, 1211, 1329], "flatten": 820, "flavour": [46, 146, 330], "flight": 146, "flight_sql": 146, "flightsql": 146, "float": [16, 17, 43, 46, 52, 77, 78, 144, 145, 158, 164, 167, 168, 169, 170, 171, 174, 178, 188, 199, 203, 207, 210, 236, 257, 266, 287, 288, 322, 330, 362, 408, 420, 425, 426, 455, 472, 473, 474, 475, 477, 478, 483, 488, 489, 494, 496, 504, 508, 511, 513, 514, 515, 516, 520, 528, 548, 563, 567, 570, 584, 588, 602, 603, 604, 605, 615, 617, 618, 631, 632, 634, 636, 638, 640, 641, 643, 645, 647, 649, 651, 657, 728, 793, 795, 820, 846, 849, 854, 865, 880, 890, 923, 934, 940, 966, 1003, 1013, 1028, 1029, 1031, 1032, 1033, 1066, 1084, 1088, 1089, 1091, 1092, 1097, 1102, 1112, 1132, 1142, 1162, 1177, 1191, 1192, 1201, 1202, 1203, 1204, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1227, 1230, 1237, 1240, 1244, 1300, 1310, 1319, 1329, 1357, 1360], "float16": [292, 330], "float32": [1, 16, 43, 52, 60, 192, 214, 286, 287, 288, 292, 330, 476, 820, 838, 934, 940, 1090, 1119, 1180, 1308, 1310, 1313, 1329], "float4": [277, 330, 799, 893, 934, 1355], "float64": [16, 43, 46, 52, 132, 144, 153, 171, 174, 195, 205, 207, 214, 267, 292, 304, 330, 347, 348, 349, 350, 351, 352, 388, 401, 410, 411, 412, 421, 455, 476, 479, 513, 514, 619, 658, 659, 723, 724, 767, 782, 792, 795, 811, 816, 820, 843, 851, 884, 904, 934, 939, 940, 1066, 1090, 1311, 1317, 1329], "float_list": 84, "float_precis": [15, 16, 33, 43, 46, 52, 330, 934], "float_scientif": [43, 52, 330, 934], "floatfmt": 17, "floor": [59, 489, 820, 1329, 1350], "floor_a": 1351, "floordiv": [728, 820], "fmt": [17, 236, 330, 503, 770, 820, 862, 865, 934], "fmt_number": [330, 334], "fmt_str_length": [18, 760, 761, 763, 764], "fmt_table_cell_list_len": 19, "fmt_titl": [46, 330], "fn": [755, 756, 769, 794], "foggi": [690, 691, 1269, 1270], "fold": [330, 581, 747, 755, 756, 794], "folder": 164, "follow": [46, 51, 62, 139, 144, 145, 146, 148, 149, 155, 158, 159, 160, 221, 236, 240, 254, 262, 288, 300, 330, 449, 454, 467, 476, 568, 614, 615, 620, 630, 633, 635, 637, 639, 641, 642, 644, 646, 648, 657, 717, 728, 743, 760, 761, 763, 764, 782, 807, 808, 810, 812, 813, 815, 820, 821, 822, 825, 827, 828, 829, 860, 865, 878, 883, 934, 940, 1060, 1065, 1078, 1090, 1201, 1205, 1228, 1230, 1237, 1310, 1321, 1323, 1325, 1329, 1330, 1335, 1336, 1337, 1355, 1360], "font": [46, 330], "font_color": [46, 330], "font_siz": [46, 330], "foo": [41, 43, 45, 47, 48, 49, 50, 51, 140, 153, 154, 192, 195, 196, 197, 201, 202, 203, 204, 205, 206, 209, 212, 214, 216, 217, 218, 222, 223, 224, 225, 226, 227, 229, 235, 239, 240, 241, 242, 243, 244, 245, 248, 249, 252, 255, 257, 259, 260, 263, 266, 267, 268, 270, 272, 275, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 290, 294, 295, 296, 301, 302, 303, 308, 330, 403, 420, 422, 449, 493, 499, 503, 522, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 617, 626, 666, 669, 671, 674, 676, 677, 682, 693, 695, 697, 699, 700, 701, 702, 703, 710, 713, 722, 740, 751, 752, 753, 768, 772, 773, 774, 777, 778, 783, 785, 787, 788, 790, 791, 793, 798, 801, 805, 809, 810, 816, 820, 838, 843, 844, 848, 849, 850, 851, 856, 862, 863, 864, 877, 881, 884, 885, 898, 899, 903, 906, 934, 939, 940, 1005, 1028, 1060, 1153, 1201, 1203, 1211, 1248, 1250, 1253, 1255, 1256, 1272, 1276, 1281, 1282, 1289, 1292, 1329, 1343, 1345, 1346, 1347, 1349, 1352, 1355], "foo1": 1352, "foo11": [214, 330], "foo_": [578, 695, 770], "foo_1": [285, 330], "foo_2": [285, 330], "foo_3_4": 1352, "foo_a": [255, 330], "foo_a_bar_1": 770, "foo_at_1": 1347, "foo_b": [255, 330], "foo_b_bar_2": 770, "foo_bar": [573, 579, 695, 780, 1343], "foo_bar2": [573, 579], "foo_bar_baz": 695, "foo_c_bar_3": 770, "foo_low": [710, 1352], "foo_mean": 1347, "foo_q25": 1346, "foo_q50": 1346, "foo_q75": 1346, "foo_std": 1346, "foo_strip": 699, "foo_strip_end": 700, "foo_strip_start": 701, "foo_sum": [1346, 1347], "foo_uniqu": 1347, "foo_upp": [713, 1352], "foo_var": 1346, "foobar": [702, 703, 1281, 1282, 1352], "foobarbar": [703, 1282], "foofoobar": [702, 1281], "foral": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "forc": [236, 240, 288, 316, 330, 560, 864, 865, 917, 934, 1182, 1310, 1329], "force_parallel": [236, 330, 864, 865, 934], "form": [43, 52, 129, 131, 132, 133, 135, 153, 154, 162, 233, 264, 298, 330, 459, 611, 687, 712, 820, 934, 1070, 1198, 1266, 1291, 1329, 1352], "format": [13, 17, 21, 22, 26, 42, 43, 46, 47, 48, 51, 52, 100, 142, 144, 145, 146, 149, 150, 152, 155, 158, 164, 187, 200, 208, 219, 233, 246, 255, 264, 265, 270, 284, 297, 328, 330, 334, 422, 454, 456, 459, 583, 584, 585, 704, 706, 707, 711, 765, 820, 847, 852, 853, 874, 887, 900, 934, 938, 943, 1067, 1070, 1283, 1285, 1286, 1290, 1328, 1352, 1353], "formul": [203, 330, 849, 850, 934], "formula": [46, 330, 472, 820, 1084, 1329], "fortran": [287, 288, 330], "forward": [211, 236, 273, 330, 374, 427, 446, 484, 490, 553, 654, 820, 855, 865, 889, 934, 978, 1034, 1057, 1098, 1167, 1233, 1329], "forward_fil": [300, 330, 382, 415, 418, 654, 820], "found": [26, 43, 46, 52, 101, 122, 125, 132, 136, 149, 156, 163, 205, 277, 330, 502, 652, 679, 684, 702, 703, 704, 707, 820, 893, 934, 1114, 1229, 1258, 1263, 1281, 1282, 1283, 1286, 1329, 1341, 1357], "four": [291, 330, 1357], "fourth": [518, 820, 1132, 1329], "frac": [475, 476, 477, 478, 660, 820, 1089, 1090, 1091, 1092, 1240, 1329], "fraction": [43, 52, 167, 168, 169, 170, 266, 330, 455, 548, 611, 651, 704, 707, 820, 934, 1066, 1162, 1198, 1227, 1283, 1286, 1329], "fragment": 1357, "frame": [43, 44, 46, 52, 57, 64, 65, 132, 145, 149, 155, 167, 168, 192, 193, 199, 233, 234, 238, 240, 247, 251, 254, 263, 264, 265, 277, 292, 298, 299, 330, 459, 799, 838, 839, 846, 875, 878, 893, 901, 934, 940, 1015, 1070, 1329, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1356, 1360], "frame_data": [1340, 1343], "frameinittyp": [330, 934], "frametyp": [57, 1357], "framework": [255, 297, 330, 900, 934], "freedom": [278, 301, 330, 556, 562, 643, 644, 647, 648, 665, 733, 753, 796, 797, 801, 809, 820, 894, 902, 934, 1222, 1224, 1244, 1319, 1329], "freeli": [799, 893, 934, 940], "freez": [46, 330], "freeze_pan": [46, 330], "frequenc": [300, 330, 732, 820, 1318, 1329], "frequent": [1228, 1230, 1329], "fri": [330, 333], "fridai": [221, 330, 427, 456, 746, 860, 934, 1034, 1067, 1070], "friendship": 18, "from": [2, 7, 8, 9, 10, 11, 12, 16, 22, 34, 38, 42, 43, 45, 46, 47, 51, 52, 53, 54, 55, 57, 65, 75, 88, 100, 104, 120, 124, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 189, 192, 199, 200, 201, 207, 209, 212, 213, 219, 221, 233, 234, 235, 236, 237, 238, 246, 255, 259, 262, 263, 265, 266, 268, 269, 277, 285, 292, 294, 295, 297, 298, 299, 300, 306, 330, 333, 334, 379, 388, 420, 421, 422, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 479, 489, 491, 504, 518, 536, 548, 560, 569, 577, 602, 603, 605, 610, 611, 614, 617, 619, 630, 631, 633, 635, 637, 639, 641, 644, 646, 648, 651, 663, 675, 676, 681, 683, 684, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 730, 742, 743, 746, 747, 759, 760, 761, 762, 763, 764, 765, 779, 780, 795, 799, 806, 807, 808, 816, 819, 820, 838, 846, 847, 848, 856, 860, 864, 865, 866, 874, 881, 883, 885, 886, 893, 898, 900, 901, 906, 907, 934, 938, 939, 940, 983, 991, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1086, 1088, 1090, 1095, 1132, 1150, 1162, 1174, 1191, 1192, 1194, 1195, 1198, 1203, 1215, 1227, 1254, 1255, 1260, 1262, 1273, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1290, 1305, 1320, 1329, 1338, 1339, 1340, 1341, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360], "from_arrai": 799, "from_arrow": 130, "from_json": 820, "from_panda": 130, "from_repr": [286, 330, 1307, 1329], "fromkei": [58, 60], "front": [221, 330, 860, 934], "fruit": [283, 330, 402, 406, 627, 672, 698, 705, 820, 1004, 1009, 1251, 1277, 1284], "fruits_revers": [627, 820], "fsspec": [144, 145, 150, 152, 159, 160, 166], "fsspecfileio": 160, "full": [17, 32, 51, 55, 57, 72, 100, 132, 135, 144, 145, 146, 148, 153, 154, 156, 158, 159, 160, 162, 163, 164, 235, 299, 330, 681, 683, 690, 691, 704, 705, 706, 707, 711, 760, 761, 864, 870, 901, 934, 938, 940, 1260, 1262, 1269, 1270, 1283, 1284, 1285, 1286, 1290, 1329, 1345, 1360], "full_sent": 750, "fulli": [176, 254, 266, 288, 330], "funcnam": [46, 330], "function": [0, 2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 73, 75, 79, 96, 97, 127, 130, 134, 136, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 184, 186, 188, 191, 197, 200, 207, 214, 237, 240, 246, 254, 255, 259, 277, 287, 288, 289, 292, 293, 294, 297, 299, 316, 330, 333, 334, 342, 379, 399, 400, 419, 420, 422, 475, 477, 478, 500, 560, 568, 569, 594, 595, 610, 614, 617, 629, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 657, 660, 680, 725, 726, 727, 736, 740, 748, 752, 754, 755, 756, 768, 769, 771, 773, 774, 777, 779, 781, 782, 785, 787, 790, 792, 794, 801, 805, 809, 811, 816, 820, 832, 836, 842, 847, 866, 870, 874, 878, 881, 893, 897, 900, 901, 908, 917, 934, 938, 942, 983, 1002, 1011, 1027, 1028, 1088, 1089, 1091, 1092, 1112, 1174, 1182, 1203, 1214, 1215, 1218, 1220, 1221, 1228, 1230, 1235, 1237, 1240, 1259, 1308, 1311, 1313, 1314, 1329, 1334, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360], "function_nam": 141, "further": 816, "futur": [64, 188, 199, 235, 236, 271, 330, 842, 846, 864, 865, 888, 934], "g": [43, 52, 140, 144, 148, 150, 152, 159, 164, 176, 188, 200, 232, 288, 298, 330, 339, 422, 476, 479, 569, 655, 767, 820, 847, 881, 934, 938, 1090, 1329, 1360], "g1": [485, 734, 820], "g2": [485, 734, 820], "g_1": [660, 820, 1240, 1329], "gag": 32, "gamma": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "gantt": [879, 934], "gather": [145, 215, 330, 355, 493, 536, 744, 820, 858, 934, 959, 1104, 1150, 1329], "gather_everi": [330, 820, 934, 1329], "gb": [207, 330, 388, 1088, 1329], "gbp": 1360, "gc": [45, 148, 159, 160, 330], "gca": 32, "gcaacgcatata": 32, "gcp": [7, 40, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 160, 161, 162, 163, 330, 934], "gdp": [236, 330, 865, 934], "gdp2": [236, 330, 865, 934], "gdp_date": [236, 330, 865, 934], "ge": [820, 1329], "gener": [1, 139, 140, 146, 147, 165, 171, 172, 173, 174, 175, 176, 178, 188, 195, 197, 255, 266, 285, 288, 294, 330, 548, 651, 656, 741, 760, 763, 775, 776, 778, 779, 795, 807, 808, 820, 934, 1003, 1162, 1227, 1236, 1305, 1329, 1360], "geq": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "germani": [236, 330, 865, 934], "get": [57, 64, 75, 141, 151, 157, 164, 189, 191, 195, 196, 205, 213, 216, 218, 221, 223, 224, 228, 230, 231, 239, 242, 249, 250, 255, 262, 263, 267, 272, 275, 281, 289, 293, 303, 313, 324, 330, 340, 353, 354, 355, 357, 365, 368, 380, 388, 400, 403, 415, 416, 417, 418, 427, 437, 486, 492, 499, 502, 517, 519, 522, 534, 540, 561, 570, 571, 572, 580, 582, 588, 602, 603, 612, 613, 618, 629, 630, 661, 665, 674, 721, 722, 726, 727, 729, 733, 744, 746, 768, 773, 777, 782, 783, 784, 785, 787, 788, 789, 791, 801, 805, 809, 820, 836, 841, 842, 844, 851, 857, 860, 861, 867, 869, 883, 884, 891, 896, 897, 903, 914, 925, 934, 939, 944, 957, 958, 959, 960, 961, 969, 972, 984, 991, 1005, 1014, 1023, 1024, 1025, 1026, 1034, 1044, 1083, 1100, 1101, 1106, 1111, 1114, 1117, 1118, 1130, 1133, 1136, 1148, 1154, 1175, 1183, 1185, 1186, 1188, 1190, 1191, 1192, 1199, 1200, 1204, 1214, 1241, 1244, 1253, 1301, 1305, 1311, 1315, 1319, 1329], "get_chunk": 1329, "get_column": [188, 290, 330], "get_column_index": 330, "get_token": 39, "get_worksheet_by_nam": [46, 330], "gevent": [64, 166, 842, 934], "gh": 691, "gh45": 691, "gh45ij67kl": 691, "ghi": [339, 676, 820, 940, 1255], "gil": [569, 820, 938], "git": 62, "github": [147, 330], "give": [154, 161, 162, 236, 246, 295, 297, 330, 437, 489, 518, 623, 728, 732, 820, 832, 865, 874, 898, 900, 934, 1044, 1132, 1318, 1329, 1356], "given": [46, 57, 106, 111, 128, 129, 131, 132, 133, 135, 140, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 158, 161, 162, 163, 169, 170, 171, 172, 174, 176, 177, 178, 179, 186, 207, 208, 210, 221, 231, 240, 247, 253, 254, 263, 264, 265, 273, 276, 292, 299, 330, 362, 374, 379, 388, 400, 409, 428, 432, 456, 458, 459, 472, 476, 500, 506, 528, 553, 560, 563, 569, 610, 614, 620, 623, 624, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 654, 676, 677, 688, 689, 704, 707, 714, 717, 727, 767, 768, 777, 781, 782, 795, 796, 797, 820, 853, 860, 870, 875, 878, 889, 892, 901, 917, 934, 939, 940, 942, 966, 978, 983, 991, 1016, 1035, 1039, 1067, 1069, 1070, 1084, 1088, 1090, 1112, 1117, 1131, 1142, 1167, 1174, 1177, 1180, 1182, 1195, 1201, 1205, 1211, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1229, 1233, 1255, 1256, 1267, 1268, 1283, 1286, 1293, 1317, 1320, 1329, 1338, 1340, 1345, 1347, 1348, 1351, 1352, 1357, 1359, 1360], "glimps": [199, 223, 330], "glob": [144, 145, 149, 156, 158, 161, 162, 163], "global": [56, 96, 97, 149, 165, 174, 182, 277, 330, 624, 625, 799, 820, 893, 934, 1006, 1010, 1209, 1210, 1329, 1339, 1341, 1356], "gmt": [432, 436, 453, 1039, 1043, 1064], "go": [18, 144, 145, 158, 402, 672, 1004, 1251], "godfath": 1338, "goe": 18, "gonfruit": 1284, "good": [51, 53, 55, 233, 330, 934, 1351], "goodby": 1, "googl": [40, 148, 159, 160], "gpu": [287, 330, 841, 909, 931, 934, 1308, 1329], "gpu_devic": [287, 330], "gpudevic": [287, 330], "gpuengin": [841, 934], "grade": [1132, 1329], "grain": [841, 931, 934], "granular": 1357, "grape": 1352, "graph": [63, 146, 238, 330, 584, 841, 862, 906, 934], "graphviz": [238, 330, 584, 890, 934], "great": [330, 334], "great_tabl": [330, 334], "greater": [193, 236, 330, 494, 496, 506, 660, 688, 689, 697, 714, 820, 865, 934, 1117, 1240, 1267, 1268, 1276, 1293, 1329], "greatest": [1346, 1350], "greatli": [150, 161], "green": [56, 96, 97, 316, 732, 820, 917, 1318, 1329], "greenlet": [64, 842, 934], "greet": 1, "grid": [504, 820], "grid_point": [504, 820], "gridlin": [46, 330], "gross": 1338, "group": [15, 33, 51, 55, 141, 145, 163, 192, 220, 221, 234, 236, 251, 253, 255, 262, 265, 298, 300, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 340, 400, 419, 481, 487, 492, 495, 532, 568, 569, 580, 582, 610, 620, 629, 630, 662, 663, 667, 675, 676, 677, 679, 690, 691, 727, 732, 782, 820, 838, 859, 860, 865, 883, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 940, 1027, 1146, 1214, 1246, 1254, 1255, 1256, 1258, 1269, 1270, 1318, 1329, 1338, 1346, 1356, 1357], "group_bi": [221, 251, 255, 262, 300, 329, 330, 340, 390, 395, 398, 400, 485, 487, 492, 495, 568, 569, 610, 662, 663, 727, 734, 760, 763, 782, 820, 841, 842, 852, 860, 879, 883, 890, 932, 934, 940], "group_by_dynam": [262, 330, 883, 934], "group_by_partit": [879, 934], "group_col": [485, 734, 820], "group_df": [316, 917], "group_dtyp": [610, 820], "group_index": [675, 1254], "group_to_row": [610, 820], "groupbi": [220, 330, 569, 782, 820], "grouper": [390, 395, 398, 820], "grow": [302, 330], "grown": [225, 330], "gt": [330, 334, 820, 1329], "gte": [485, 734, 820], "guarante": [51, 55, 144, 145, 191, 199, 222, 247, 293, 295, 330, 399, 400, 498, 725, 726, 727, 820, 836, 846, 875, 897, 898, 934, 1002, 1110, 1312, 1314, 1329], "guid": [139, 141, 820, 938, 1360], "gzip": [51, 55, 330, 934], "h": [298, 330, 339, 456, 459, 655, 690, 691, 704, 707, 711, 820, 1269, 1270, 1283, 1286, 1290, 1352, 1353], "ha": [45, 46, 57, 64, 134, 146, 158, 181, 188, 300, 306, 311, 330, 399, 400, 419, 491, 568, 581, 587, 681, 705, 715, 726, 727, 751, 768, 777, 816, 820, 842, 907, 912, 917, 934, 1002, 1015, 1027, 1029, 1260, 1284, 1314, 1329], "half": [292, 330, 454, 475, 476, 477, 478, 820, 1065, 1089, 1090, 1091, 1092, 1329], "half_lif": [475, 476, 477, 478, 820, 1089, 1090, 1091, 1092, 1329], "ham": [41, 43, 45, 47, 48, 51, 192, 195, 196, 197, 201, 202, 203, 204, 205, 206, 212, 217, 222, 223, 225, 235, 239, 241, 243, 245, 248, 252, 257, 259, 260, 263, 266, 267, 268, 275, 278, 279, 281, 285, 286, 288, 289, 290, 295, 301, 302, 330, 403, 584, 585, 816, 838, 843, 844, 848, 849, 850, 851, 856, 864, 877, 881, 884, 885, 898, 906, 934, 1005, 1345, 1346], "ham_a": [285, 330], "ham_b": [285, 330], "ham_right": [235, 330, 864, 934], "hamburg": 816, "hand": [46, 144, 145, 158, 330, 549, 550, 551, 552, 1163, 1164, 1165, 1166], "handi": [427, 746, 1034], "handl": [45, 63, 64, 103, 136, 141, 144, 145, 158, 164, 212, 216, 330, 423, 530, 674, 714, 820, 841, 842, 856, 934, 1030, 1144, 1253, 1293, 1329], "handler": [142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 200, 330, 422, 820, 847, 934], "happen": [146, 432, 617, 820, 1039, 1203, 1329], "hard": [158, 236, 330, 865, 870, 934], "harder": [221, 330, 860, 934], "hardwar": 1360, "has_head": [144, 145, 149, 155, 158], "has_nul": [820, 1109, 1329], "has_prefix": [406, 698], "has_suffix": [402, 672], "has_two": 1347, "has_valid": 1329, "hash": [222, 330, 820, 1329], "hash_row": 330, "hat": [690, 691, 1269, 1270], "have": [11, 20, 36, 46, 56, 57, 65, 72, 97, 130, 141, 142, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 189, 200, 209, 233, 235, 236, 255, 258, 262, 264, 265, 284, 292, 307, 330, 419, 422, 475, 477, 478, 569, 581, 620, 624, 625, 630, 677, 692, 748, 820, 847, 864, 865, 874, 883, 907, 908, 934, 940, 1027, 1029, 1089, 1091, 1092, 1095, 1205, 1209, 1210, 1269, 1271, 1329, 1356, 1358, 1360], "haystack": [676, 1255], "he": 700, "head": [75, 158, 219, 239, 281, 330, 345, 522, 820, 869, 934, 1136, 1301, 1329], "header": [43, 46, 51, 52, 55, 136, 144, 145, 149, 155, 158, 205, 294, 330, 934], "header_format": [46, 330], "header_nam": [294, 330], "headerless": 158, "heap": [141, 207, 330, 820, 1088, 1329], "heatmap": [46, 330], "heavili": 163, "height": [46, 140, 174, 204, 330, 333, 1329, 1334], "hell": [699, 1278], "hello": [1, 26, 699, 700, 701, 940, 1153, 1278, 1279, 1280, 1340, 1343], "hello_": 770, "hello_data": 1343, "hello_world": 1343, "help": [46, 167, 168, 169, 170, 330, 934], "helper": [330, 334, 816], "henc": [690, 1270], "here": [7, 43, 45, 46, 47, 51, 52, 53, 54, 55, 129, 131, 132, 133, 135, 146, 147, 148, 153, 154, 156, 158, 159, 160, 161, 162, 163, 172, 174, 178, 189, 255, 330, 427, 568, 569, 584, 677, 684, 746, 820, 890, 934, 940, 1034, 1263], "hex": [384, 385, 670, 671, 709, 987, 988, 1249, 1250, 1288], "hexadecim": [987, 988], "hf": [7, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 161, 162, 163, 330, 934], "hf_token": [7, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 161, 162, 163, 330, 934], "hi": [1, 1352], "hidden": [46, 330], "hidden_column": [46, 330], "hide": [27, 28, 29, 30], "hide_gridlin": [46, 330], "hide_password": 146, "high": [265, 330, 334, 617, 820, 832, 1203, 1329], "higher": [51, 55, 199, 257, 322, 330, 618, 640, 641, 793, 820, 846, 880, 923, 934, 1029, 1204, 1220, 1329], "highest": [330, 334, 620, 731, 751, 820, 934, 1205, 1329], "highli": [141, 820], "hint": 139, "hippopotamu": [688, 689, 1267, 1268], "hist": [820, 1329, 1334], "histogram": [1329, 1334], "hit": [837, 934], "hive": [156, 161, 163], "hive_partit": [156, 161, 163], "hive_schema": [156, 161, 163], "hmm": 940, "hold": [274, 288, 330, 1310, 1329], "holidai": [427, 746, 1034], "home": [712, 1291], "horizont": [26, 65, 105, 214, 225, 242, 244, 249, 280, 298, 330, 737, 739, 748, 749, 750, 755, 756, 758, 766, 769, 784, 786, 789, 794, 804, 906, 934], "host": [62, 144, 150, 152, 163], "hour": [154, 158, 161, 162, 221, 236, 262, 300, 330, 441, 443, 444, 448, 449, 452, 454, 455, 459, 461, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 762, 763, 764, 765, 779, 806, 807, 808, 820, 860, 865, 883, 934, 940, 1060, 1063, 1065, 1072, 1078, 1090, 1329, 1353], "hours_diff": 461, "hous": [292, 330], "how": [7, 17, 43, 45, 46, 47, 51, 52, 53, 54, 55, 57, 65, 105, 141, 147, 154, 156, 158, 161, 162, 163, 204, 212, 235, 236, 255, 298, 299, 330, 363, 423, 452, 453, 504, 529, 530, 610, 623, 642, 704, 707, 746, 762, 810, 820, 856, 864, 865, 901, 906, 934, 967, 1030, 1063, 1064, 1143, 1144, 1221, 1283, 1286, 1329], "howev": [1, 132, 146, 156, 163, 184, 207, 240, 288, 330, 610, 820, 841, 934, 1088, 1329], "hstack": [105, 330], "html": [38, 46, 47, 48, 130, 146, 150, 152, 186, 187, 188, 197, 330, 942, 943], "http": [26, 38, 46, 47, 48, 75, 130, 146, 147, 150, 152, 186, 187, 188, 197, 330, 584, 675, 677, 687, 890, 934, 942, 943, 1254, 1256, 1266], "httpmethod": 75, "hug": [7, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 161, 162, 163, 330, 934], "hut": [690, 691, 1269, 1270], "hvplot": [330, 333, 1329, 1334], "hyperbol": [348, 350, 352, 411, 659, 724, 820, 952, 954, 956, 1019, 1239, 1303, 1329], "hyperloglog": [190, 330, 346, 740, 820, 835, 934, 950, 1329], "hyphen": [666, 1245], "hypothesi": [172, 174, 177, 178, 1360], "i": [1, 2, 3, 4, 5, 6, 7, 18, 20, 23, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 79, 89, 97, 101, 103, 104, 105, 106, 107, 108, 110, 111, 116, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 189, 190, 191, 192, 194, 195, 199, 200, 203, 204, 206, 207, 209, 212, 216, 220, 221, 222, 223, 226, 227, 231, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 251, 253, 254, 255, 259, 260, 262, 263, 264, 265, 266, 269, 270, 271, 273, 275, 276, 277, 278, 281, 282, 287, 288, 289, 292, 293, 294, 295, 297, 299, 300, 301, 305, 307, 308, 316, 330, 333, 334, 339, 342, 344, 345, 346, 356, 359, 366, 367, 374, 379, 387, 399, 400, 401, 404, 405, 419, 420, 422, 425, 426, 427, 428, 431, 439, 446, 447, 449, 454, 456, 459, 467, 475, 476, 477, 478, 481, 485, 489, 498, 500, 503, 506, 518, 524, 531, 532, 535, 537, 539, 548, 553, 554, 556, 560, 562, 565, 568, 569, 573, 575, 576, 577, 579, 580, 581, 583, 592, 610, 615, 617, 620, 622, 623, 624, 625, 626, 629, 630, 631, 633, 635, 637, 639, 641, 642, 643, 644, 646, 647, 648, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 665, 666, 667, 668, 669, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 697, 699, 700, 701, 704, 705, 706, 707, 709, 711, 712, 714, 719, 726, 727, 732, 733, 736, 737, 738, 739, 740, 745, 746, 748, 749, 750, 752, 753, 754, 755, 756, 760, 761, 763, 764, 769, 773, 774, 775, 776, 778, 779, 780, 782, 785, 787, 790, 792, 795, 796, 797, 798, 799, 801, 805, 807, 808, 809, 810, 811, 816, 820, 835, 836, 837, 840, 841, 842, 844, 846, 847, 849, 850, 851, 852, 856, 859, 860, 863, 864, 865, 866, 868, 870, 874, 875, 879, 881, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 900, 901, 902, 903, 905, 908, 909, 917, 927, 934, 938, 940, 947, 948, 949, 950, 963, 970, 971, 978, 983, 990, 1002, 1006, 1007, 1008, 1011, 1016, 1017, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1038, 1046, 1060, 1065, 1067, 1070, 1078, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1099, 1100, 1110, 1111, 1112, 1114, 1117, 1119, 1129, 1131, 1132, 1133, 1136, 1138, 1145, 1146, 1149, 1151, 1153, 1162, 1167, 1168, 1174, 1182, 1201, 1203, 1205, 1207, 1209, 1210, 1211, 1214, 1215, 1218, 1220, 1221, 1222, 1224, 1227, 1228, 1229, 1230, 1231, 1233, 1236, 1237, 1240, 1241, 1244, 1245, 1246, 1247, 1248, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1273, 1276, 1278, 1279, 1280, 1283, 1284, 1285, 1286, 1288, 1290, 1291, 1293, 1301, 1304, 1308, 1310, 1311, 1313, 1314, 1318, 1319, 1329, 1334, 1338, 1339, 1344, 1348, 1349, 1352, 1355, 1357, 1358, 1360], "i0e0": 1360, "i16": [1, 60, 435, 450, 469, 655, 820, 940, 1061, 1307, 1329, 1360], "i32": [1, 60, 129, 132, 136, 171, 173, 174, 268, 277, 330, 365, 366, 368, 387, 401, 430, 438, 440, 441, 442, 443, 444, 448, 471, 655, 746, 810, 820, 885, 934, 939, 969, 970, 972, 990, 1037, 1047, 1051, 1052, 1053, 1059, 1082, 1180, 1329, 1349, 1353, 1360], "i64": [1, 16, 19, 22, 23, 27, 33, 58, 59, 60, 61, 65, 66, 84, 104, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 146, 153, 154, 158, 189, 191, 192, 193, 194, 196, 200, 201, 204, 205, 208, 209, 211, 212, 215, 216, 218, 219, 220, 221, 223, 225, 226, 228, 230, 232, 235, 236, 237, 239, 240, 241, 247, 248, 253, 254, 255, 256, 259, 260, 261, 262, 266, 268, 270, 273, 275, 276, 277, 279, 281, 283, 290, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 320, 323, 324, 330, 339, 341, 345, 355, 360, 361, 363, 364, 369, 371, 372, 373, 374, 375, 377, 380, 382, 390, 395, 398, 399, 400, 409, 415, 416, 417, 418, 419, 420, 423, 424, 437, 452, 458, 460, 461, 462, 463, 464, 465, 466, 476, 479, 481, 482, 484, 485, 486, 487, 489, 490, 492, 493, 495, 499, 501, 503, 504, 505, 506, 509, 510, 512, 513, 514, 515, 516, 519, 522, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 566, 568, 569, 589, 590, 591, 593, 594, 596, 598, 600, 601, 606, 610, 611, 614, 615, 616, 617, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 651, 653, 654, 655, 656, 661, 662, 663, 681, 690, 691, 705, 709, 714, 715, 717, 718, 719, 720, 721, 722, 726, 727, 728, 729, 731, 734, 741, 744, 747, 748, 749, 750, 755, 756, 757, 758, 759, 762, 765, 766, 767, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 789, 791, 794, 798, 799, 800, 803, 804, 805, 806, 810, 816, 820, 836, 838, 839, 841, 842, 847, 848, 850, 853, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 869, 870, 871, 875, 876, 878, 879, 881, 882, 883, 885, 887, 889, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 904, 907, 908, 910, 911, 913, 914, 915, 917, 918, 921, 924, 925, 934, 940, 944, 945, 946, 949, 968, 973, 975, 977, 978, 979, 981, 984, 1002, 1016, 1017, 1023, 1024, 1025, 1026, 1027, 1028, 1044, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1094, 1095, 1096, 1098, 1099, 1103, 1104, 1106, 1111, 1113, 1122, 1136, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1156, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1174, 1175, 1182, 1187, 1195, 1201, 1203, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1216, 1219, 1223, 1227, 1228, 1230, 1233, 1234, 1236, 1241, 1242, 1288, 1294, 1299, 1301, 1306, 1314, 1315, 1320, 1329, 1338, 1339, 1341, 1345, 1346, 1347, 1348, 1349, 1351, 1354, 1355, 1357, 1358, 1360], "i8": [378, 379, 435, 438, 441, 443, 444, 445, 448, 450, 451, 455, 468, 469, 559, 655, 792, 795, 811, 820, 982, 983, 1030, 1042, 1045, 1055, 1056, 1062, 1066, 1079, 1080, 1173, 1212, 1234, 1317, 1329, 1353], "i_bitand_j": 1348, "i_bitand_op_j": 1348, "i_bitcount": 1348, "i_bitor_j": 1348, "i_bitor_op_j": 1348, "i_bitxor_j": 1348, "i_bitxor_op_j": 1348, "iceberg": [160, 832], "icon": [46, 330], "id": [32, 39, 46, 65, 140, 144, 149, 160, 237, 287, 294, 307, 316, 330, 629, 690, 691, 730, 820, 866, 908, 917, 934, 940, 1214, 1316, 1329, 1357, 1358, 1360], "id_char": 1360, "id_var": [246, 297, 330, 874, 900, 934], "ideal": [138, 139], "ident": [39, 136, 193, 194, 330, 456, 628, 629, 820, 839, 840, 934, 1015, 1017, 1067, 1213, 1214, 1329], "identif": [149, 155], "identifi": [136, 146, 246, 253, 295, 297, 308, 330, 874, 898, 900, 934], "idiograph": 940, "idiomat": [816, 844, 851, 884, 903, 917, 934], "idx": [158, 221, 234, 307, 330, 366, 379, 560, 860, 908, 934, 983, 1174, 1258], "idx_lit": 1258, "idx_rx": 1258, "ieee": [728, 820], "if_set": [11, 36], "if_table_exist": [44, 330], "ifnul": 1350, "ignor": [45, 146, 173, 174, 178, 244, 280, 299, 330, 342, 344, 367, 387, 423, 453, 475, 477, 478, 530, 539, 602, 603, 666, 682, 736, 738, 750, 786, 804, 820, 901, 934, 940, 947, 948, 971, 990, 1030, 1064, 1089, 1091, 1092, 1144, 1153, 1191, 1192, 1245, 1261, 1329], "ignore_error": [144, 145, 154, 158, 162], "ignore_nul": [244, 280, 330, 342, 344, 367, 475, 477, 478, 539, 666, 682, 736, 738, 750, 786, 804, 820, 947, 948, 971, 1089, 1091, 1092, 1153, 1245, 1261, 1329], "ignore_spac": 940, "ij": 691, "ij67": 691, "ijkl": 1352, "ilmsuxu": [667, 675, 676, 679, 690, 691, 1246, 1254, 1255, 1258, 1269, 1270], "imbal": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "imdb_scor": 1338, "immedi": [184, 620, 741, 745, 760, 761, 763, 764, 775, 776, 779, 792, 795, 798, 802, 807, 808, 811, 820, 1205, 1329, 1339], "immut": [288, 330, 1310, 1329], "impact": [221, 330, 860, 934, 1338, 1357], "impl": 160, "implement": [51, 130, 146, 188, 222, 240, 316, 330, 333, 334, 498, 569, 593, 594, 596, 598, 600, 601, 715, 725, 782, 820, 917, 1110, 1182, 1228, 1230, 1312, 1329, 1334], "implic": [422, 820, 847, 934], "implicit": [299, 330, 901, 934], "implicitli": [212, 330, 485, 810, 820, 856, 934, 1357], "implod": [820, 1329, 1347], "import": [16, 22, 34, 41, 43, 45, 46, 47, 48, 51, 57, 72, 75, 129, 130, 133, 134, 140, 144, 146, 147, 153, 154, 158, 164, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 192, 199, 200, 201, 204, 219, 221, 234, 236, 253, 255, 270, 277, 285, 287, 292, 297, 298, 300, 330, 333, 334, 388, 421, 422, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 576, 577, 583, 610, 631, 633, 635, 637, 639, 641, 644, 646, 648, 746, 759, 760, 761, 762, 763, 764, 765, 779, 799, 807, 808, 816, 820, 832, 838, 842, 846, 847, 848, 850, 860, 865, 870, 887, 900, 934, 938, 991, 1018, 1020, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1090, 1120, 1123, 1125, 1126, 1215, 1238, 1302, 1329, 1334, 1339, 1354, 1357, 1360], "improv": [44, 55, 150, 161, 235, 330, 568, 820, 864, 934], "in_plac": [225, 274, 302, 330, 1206, 1235, 1242, 1329], "includ": [13, 26, 36, 43, 45, 46, 52, 62, 134, 146, 148, 149, 154, 155, 156, 158, 159, 160, 161, 162, 163, 174, 175, 184, 195, 199, 207, 212, 237, 253, 255, 265, 276, 292, 294, 298, 299, 330, 420, 455, 485, 489, 500, 506, 576, 617, 632, 634, 636, 638, 640, 642, 643, 645, 647, 690, 691, 695, 696, 699, 700, 746, 755, 796, 797, 820, 846, 856, 866, 892, 901, 934, 940, 1028, 1029, 1066, 1088, 1099, 1112, 1117, 1203, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1269, 1270, 1274, 1275, 1278, 1329, 1357], "include_bom": [43, 52, 330, 934], "include_boundari": [221, 330, 860, 934], "include_break": [420, 617, 820, 1028, 1203, 1329], "include_breakpoint": [500, 820, 1112, 1329], "include_categor": 940, "include_categori": [500, 820, 1112, 1329], "include_col": 174, "include_file_path": [149, 154, 155, 156, 158, 161, 162, 163], "include_head": [43, 46, 52, 145, 294, 330, 934], "include_index": 134, "include_init": 755, "include_kei": [253, 265, 330], "include_nul": [299, 330, 901, 934], "inclus": [189, 221, 262, 330, 459, 506, 630, 633, 635, 637, 639, 641, 644, 646, 648, 695, 696, 741, 760, 761, 763, 764, 775, 776, 779, 807, 808, 820, 860, 883, 934, 1070, 1117, 1274, 1275, 1329], "incom": 146, "incompat": 123, "incomplet": [625, 820, 1210, 1329], "incorpor": 1357, "incorrect": [271, 330, 470, 568, 569, 653, 820, 888, 917, 934, 1081, 1231, 1329], "incorrectli": [144, 560], "increas": [46, 57, 144, 149, 155, 156, 163, 330, 419, 629, 820, 1027, 1214, 1329], "independ": [63, 64, 171, 174, 178, 292, 330, 656, 820, 841, 842, 852, 879, 890, 934], "index": [46, 111, 130, 134, 137, 144, 145, 150, 152, 154, 156, 158, 161, 162, 163, 166, 188, 215, 217, 221, 226, 231, 233, 255, 260, 262, 263, 264, 273, 275, 287, 288, 290, 297, 299, 300, 306, 307, 330, 340, 353, 354, 355, 357, 360, 361, 366, 374, 379, 476, 492, 493, 495, 502, 525, 526, 535, 536, 537, 553, 554, 560, 630, 633, 635, 637, 639, 641, 644, 646, 648, 652, 654, 661, 667, 675, 679, 681, 694, 705, 715, 744, 775, 778, 820, 858, 860, 883, 889, 891, 900, 901, 907, 908, 934, 940, 957, 958, 959, 960, 961, 964, 965, 970, 978, 983, 1090, 1103, 1104, 1114, 1131, 1139, 1140, 1149, 1150, 1151, 1167, 1168, 1174, 1195, 1228, 1229, 1233, 1241, 1254, 1258, 1260, 1273, 1284, 1329, 1334, 1347, 1352], "index_column": [221, 262, 330, 630, 820, 860, 883, 934], "index_of": [820, 1329], "indexord": [287, 288, 330], "indic": [7, 43, 46, 47, 51, 52, 53, 54, 55, 71, 72, 74, 89, 104, 114, 141, 142, 144, 145, 146, 149, 150, 152, 154, 155, 156, 158, 161, 162, 163, 171, 172, 178, 221, 262, 265, 273, 285, 330, 356, 374, 492, 500, 507, 508, 509, 511, 512, 513, 514, 515, 516, 535, 553, 573, 574, 575, 576, 577, 578, 579, 610, 630, 633, 635, 637, 639, 641, 644, 646, 648, 652, 654, 744, 745, 791, 820, 860, 883, 889, 934, 940, 978, 1011, 1103, 1112, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1149, 1167, 1228, 1229, 1233, 1305, 1329, 1360], "indistinguish": [43, 52, 330, 934], "individu": [46, 55, 139, 184, 262, 287, 288, 292, 330, 569, 676, 718, 820, 841, 883, 934, 940, 1014, 1255, 1329], "inequ": [604, 820], "inexact": [167, 168, 169, 170], "inf": [171, 174, 178, 352, 420, 508, 511, 617, 728, 820, 956, 1020, 1028, 1120, 1123, 1180, 1198, 1203, 1317, 1329, 1354], "infer": [7, 43, 47, 51, 52, 53, 54, 55, 73, 88, 104, 129, 131, 132, 133, 134, 135, 144, 145, 146, 149, 153, 154, 155, 156, 158, 161, 162, 163, 240, 330, 568, 569, 626, 683, 704, 706, 707, 708, 711, 765, 780, 795, 820, 934, 1182, 1211, 1262, 1283, 1285, 1286, 1287, 1290, 1329], "infer_schema": [144, 158], "infer_schema_length": [132, 135, 140, 144, 145, 146, 149, 153, 154, 155, 158, 162, 330, 683, 934, 1262], "inference_length": [708, 1287], "inference_s": [240, 330], "infin": [712, 728, 820, 1291], "infinit": [511, 728, 820, 1123, 1329], "influenc": [149, 870, 934], "influxdb": 146, "info": [148, 159, 160, 166], "inform": [7, 25, 29, 43, 44, 47, 51, 52, 53, 54, 55, 62, 139, 141, 148, 154, 156, 158, 159, 160, 161, 162, 163, 167, 169, 186, 197, 199, 330, 334, 518, 569, 660, 667, 675, 676, 679, 690, 691, 820, 841, 846, 879, 934, 938, 942, 1010, 1132, 1240, 1246, 1254, 1255, 1258, 1269, 1270, 1329], "inherit": [263, 330, 422, 820, 847, 934], "init": [184, 1338], "initcap": 1350, "initi": [2, 38, 39, 40, 46, 88, 139, 184, 330, 755, 769, 810, 1357], "initialis": [75, 146, 184, 934], "inject": [46, 57, 330], "inlin": [30, 265, 330, 667, 675, 676, 679, 690, 691, 1246, 1254, 1255, 1258, 1269, 1270, 1347], "inner": [66, 84, 173, 235, 237, 299, 330, 367, 378, 424, 539, 559, 569, 623, 725, 799, 820, 864, 866, 901, 934, 971, 982, 1031, 1153, 1173, 1182, 1312, 1329, 1345, 1357], "inner_dtyp": [173, 176], "innermost": [173, 176], "innter": 970, "inprocessqueri": [841, 934], "input": [0, 57, 63, 104, 132, 134, 141, 144, 145, 191, 201, 220, 237, 240, 244, 253, 255, 259, 268, 269, 273, 276, 280, 293, 304, 305, 309, 330, 339, 400, 402, 406, 409, 476, 479, 491, 506, 564, 568, 569, 581, 610, 624, 625, 657, 663, 681, 692, 694, 700, 701, 702, 703, 705, 707, 719, 727, 735, 737, 739, 741, 744, 747, 748, 749, 750, 758, 765, 767, 775, 776, 780, 781, 782, 784, 786, 789, 798, 802, 804, 810, 816, 820, 832, 836, 848, 859, 866, 881, 885, 886, 889, 892, 897, 904, 905, 910, 934, 1016, 1090, 1117, 1178, 1179, 1182, 1201, 1209, 1210, 1233, 1237, 1260, 1273, 1284, 1286, 1329, 1351, 1352, 1354], "input_wildcard_expans": [141, 820], "insensit": [668, 676, 678, 680, 690, 691, 692, 940, 1246, 1247, 1255, 1257, 1258, 1259, 1269, 1270, 1271], "insensitive_match": [667, 679], "insert": [44, 144, 145, 150, 152, 154, 156, 158, 161, 162, 163, 226, 294, 296, 330, 652, 666, 682, 714, 820, 899, 934, 1229, 1245, 1261, 1293, 1329], "insert_aft": [46, 330], "insert_befor": [46, 330], "insert_chart": [46, 330], "insert_column": 330, "insid": [64, 568, 820, 842, 934], "inspect": [820, 934], "instal": [38, 39, 40, 108, 134, 144, 145, 147, 150, 152, 197, 289, 330, 427, 584, 746, 890, 934, 1034, 1311, 1329], "instanc": [7, 43, 47, 51, 52, 53, 54, 55, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 174, 178, 209, 214, 330, 581, 755, 769, 816, 832, 838, 870, 907, 908, 934, 1095, 1329], "instanti": [44, 46, 146, 176, 268, 286, 287, 304, 330, 885, 904, 934, 939, 1307, 1308, 1329], "instantli": [64, 842, 934], "instead": [43, 45, 49, 50, 57, 64, 66, 131, 132, 135, 144, 145, 146, 149, 155, 156, 158, 163, 164, 171, 172, 173, 174, 178, 190, 191, 219, 232, 233, 236, 240, 246, 251, 253, 263, 264, 265, 268, 269, 270, 273, 287, 288, 289, 293, 305, 306, 330, 333, 334, 355, 374, 400, 401, 404, 405, 420, 434, 459, 476, 479, 489, 553, 583, 617, 624, 654, 666, 674, 685, 686, 699, 700, 701, 702, 703, 714, 727, 734, 741, 743, 745, 752, 760, 761, 763, 764, 765, 775, 776, 779, 792, 795, 798, 799, 802, 807, 808, 811, 820, 835, 836, 842, 852, 865, 874, 885, 886, 887, 889, 897, 905, 906, 907, 909, 934, 940, 959, 978, 987, 1003, 1007, 1008, 1028, 1041, 1049, 1050, 1070, 1090, 1109, 1167, 1203, 1209, 1228, 1230, 1233, 1242, 1245, 1253, 1264, 1265, 1278, 1279, 1280, 1293, 1310, 1311, 1329, 1334, 1338, 1339, 1343, 1357, 1358], "int": [7, 16, 18, 19, 20, 23, 31, 32, 43, 44, 46, 47, 51, 52, 53, 54, 55, 59, 66, 73, 132, 135, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 191, 193, 199, 207, 210, 211, 215, 217, 219, 222, 223, 224, 226, 231, 233, 234, 236, 239, 240, 250, 251, 260, 262, 263, 266, 272, 273, 275, 278, 281, 286, 290, 293, 298, 301, 303, 306, 307, 313, 324, 330, 339, 362, 366, 374, 376, 379, 381, 382, 399, 400, 419, 423, 427, 452, 475, 477, 478, 482, 483, 484, 490, 492, 493, 495, 498, 499, 500, 522, 528, 530, 535, 536, 537, 538, 548, 553, 554, 556, 558, 559, 560, 562, 609, 611, 614, 615, 617, 620, 623, 626, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 656, 661, 665, 675, 681, 683, 688, 689, 690, 694, 696, 697, 705, 708, 709, 714, 722, 726, 727, 733, 735, 741, 751, 753, 759, 762, 765, 771, 773, 775, 776, 779, 791, 792, 795, 796, 797, 801, 802, 805, 806, 809, 811, 820, 836, 839, 846, 854, 855, 858, 861, 865, 869, 879, 889, 891, 894, 896, 897, 902, 903, 907, 908, 909, 914, 925, 934, 939, 940, 957, 958, 966, 970, 978, 980, 983, 985, 1002, 1003, 1014, 1015, 1021, 1027, 1030, 1031, 1034, 1063, 1088, 1089, 1091, 1092, 1096, 1097, 1098, 1103, 1104, 1110, 1111, 1112, 1114, 1131, 1135, 1136, 1142, 1144, 1149, 1150, 1151, 1152, 1162, 1167, 1168, 1170, 1172, 1173, 1174, 1176, 1188, 1189, 1191, 1192, 1195, 1197, 1198, 1201, 1202, 1203, 1205, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1236, 1241, 1244, 1254, 1260, 1262, 1267, 1268, 1269, 1273, 1275, 1276, 1284, 1287, 1288, 1293, 1300, 1301, 1307, 1314, 1319, 1329, 1341, 1344, 1357, 1360], "int16": [1, 60, 292, 330, 417, 418, 450, 721, 820, 940, 1025, 1026, 1061, 1300, 1307, 1329], "int32": [1, 46, 60, 65, 129, 132, 171, 173, 174, 221, 234, 262, 287, 330, 365, 366, 368, 387, 401, 430, 440, 441, 442, 443, 448, 471, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 725, 795, 820, 860, 883, 934, 939, 940, 966, 969, 970, 972, 990, 1037, 1047, 1051, 1052, 1053, 1059, 1082, 1090, 1180, 1312, 1313, 1329], "int64": [1, 45, 46, 59, 60, 65, 66, 88, 106, 144, 153, 195, 205, 214, 221, 254, 262, 267, 268, 282, 289, 330, 360, 361, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 417, 418, 460, 461, 462, 463, 464, 465, 466, 470, 476, 479, 568, 569, 595, 597, 599, 614, 622, 630, 633, 635, 637, 639, 641, 644, 646, 648, 683, 709, 721, 725, 741, 748, 767, 775, 776, 780, 795, 802, 816, 820, 843, 851, 860, 878, 883, 884, 885, 934, 940, 964, 965, 967, 968, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 985, 1025, 1026, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1081, 1083, 1090, 1182, 1207, 1288, 1300, 1310, 1311, 1312, 1313, 1329], "int64arrai": [1304, 1329], "int8": [1, 60, 88, 214, 330, 378, 379, 417, 418, 435, 438, 444, 445, 451, 455, 468, 469, 559, 721, 792, 795, 811, 820, 939, 982, 983, 1025, 1026, 1030, 1042, 1045, 1055, 1056, 1062, 1066, 1079, 1080, 1173, 1212, 1300, 1310, 1317, 1329], "int_rang": [221, 298, 307, 316, 330, 741, 778, 798, 860, 870, 908, 917, 934], "integ": [43, 46, 52, 71, 72, 74, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 165, 172, 174, 177, 179, 204, 221, 262, 285, 288, 330, 343, 408, 455, 488, 489, 609, 615, 617, 622, 629, 630, 642, 681, 705, 709, 735, 741, 771, 775, 776, 795, 820, 850, 860, 883, 934, 940, 1013, 1066, 1102, 1201, 1203, 1207, 1214, 1221, 1228, 1260, 1284, 1288, 1310, 1329, 1351, 1357, 1360], "integer_list": 84, "integr": [46, 292, 330, 633, 635, 637, 639, 641, 644, 646, 648, 820, 1360], "intend": [1, 167, 168, 169, 170, 714, 1293], "intens": [240, 316, 330, 610, 820, 1182, 1329], "interact": [174, 178, 199, 330, 333, 846, 934, 1329, 1334], "interchang": [130, 188], "interest": [145, 456, 459, 1067, 1070], "interfac": [0, 119, 120, 183, 187, 832, 943, 1357], "interfer": 938, "interleav": 1352, "intermedi": [227, 330, 863, 934, 1360], "intern": [47, 48, 146, 165, 233, 282, 330, 489, 820, 1304, 1329, 1339], "interoper": [186, 942], "interpol": [199, 257, 322, 330, 484, 505, 572, 618, 640, 641, 793, 820, 846, 880, 923, 934, 1029, 1116, 1204, 1220, 1329, 1346], "interpolate_bi": [820, 1329], "interpolationmethod": [504, 820, 1115, 1329], "interpret": [133, 135, 144, 145, 158, 330, 387, 934, 990], "intersect": [46, 330, 550, 940, 1164, 1356], "interv": [221, 262, 300, 330, 420, 454, 467, 500, 506, 617, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 779, 807, 808, 820, 860, 883, 934, 1028, 1042, 1044, 1045, 1051, 1053, 1055, 1056, 1059, 1061, 1062, 1065, 1069, 1078, 1079, 1112, 1117, 1203, 1329, 1346], "intoexpr": [141, 191, 220, 221, 262, 268, 269, 273, 276, 293, 304, 305, 309, 330, 345, 363, 383, 386, 389, 400, 427, 452, 476, 482, 492, 500, 502, 505, 506, 529, 549, 550, 551, 552, 610, 624, 625, 633, 635, 637, 639, 641, 644, 646, 648, 652, 654, 663, 668, 678, 680, 692, 695, 696, 697, 699, 700, 701, 702, 703, 719, 727, 737, 739, 744, 747, 748, 749, 750, 751, 753, 755, 758, 762, 769, 779, 784, 786, 789, 795, 798, 802, 804, 820, 836, 859, 860, 883, 885, 886, 889, 892, 897, 904, 905, 910, 934, 967, 986, 989, 992, 1034, 1090, 1096, 1114, 1116, 1117, 1143, 1209, 1210, 1229, 1233, 1259, 1274, 1275, 1276, 1278, 1279, 1280, 1281, 1282, 1329], "intoexprcolumn": [212, 226, 330, 362, 366, 367, 374, 399, 400, 409, 454, 482, 485, 528, 536, 539, 548, 553, 611, 615, 651, 654, 675, 681, 684, 694, 705, 709, 714, 726, 727, 741, 746, 760, 761, 763, 764, 775, 776, 807, 808, 810, 820, 856, 889, 934, 966, 970, 971, 978, 1016, 1065, 1078, 1096, 1142, 1150, 1153, 1162, 1167, 1198, 1254, 1260, 1263, 1273, 1284, 1293, 1329], "introduc": [56, 97, 704, 706, 707, 1283, 1285, 1286], "introduct": 1356, "intuit": [489, 820, 940], "invalid": [43, 52, 120, 144, 145, 158, 192, 330, 401, 683, 684, 709, 728, 820, 934, 987, 1003, 1262, 1263, 1288, 1329], "invalid_valu": 987, "invalidoperationerror": [625, 820, 1210, 1329, 1355], "invari": [870, 934], "invers": [347, 348, 349, 350, 351, 352, 820, 951, 952, 953, 954, 955, 956, 1310, 1329, 1354], "invert": 940, "invok": [184, 568, 820], "involv": [212, 330, 856, 934], "io": [41, 43, 46, 47, 48, 51, 142, 144, 150, 151, 152, 153, 154, 157, 158, 160, 161, 162, 200, 270, 330, 422, 491, 583, 820, 847, 887, 934], "iobas": [49, 50, 153, 154, 200, 270, 330, 422, 583, 587, 820, 847, 887, 934], "ipc": [47, 48, 53, 150, 151, 152, 161, 164, 330, 832, 934], "ipccompress": [47, 48, 330], "is_between": [820, 1329], "is_dupl": [330, 820, 1329], "is_elementwis": [141, 568, 820], "is_empti": [330, 1329], "is_finit": [820, 1329], "is_first_distinct": [820, 1329], "is_in": [106, 212, 330, 820, 1329], "is_infinit": [820, 1329], "is_last_distinct": [820, 1329], "is_nan": [203, 330, 820, 849, 934, 1329], "is_not_nan": [820, 1329], "is_not_nul": [820, 1329], "is_nul": [204, 330, 820, 850, 934, 1329], "is_numer": 1360, "is_odd": [268, 330, 885, 934, 940], "is_selector": 940, "is_sort": 1329, "is_uniqu": [330, 820, 1329], "isn": 810, "iso": [440, 459, 468, 469, 1047, 1070, 1079, 1080, 1352], "iso8601": [144, 145, 158, 459, 1070], "iso_lang": 1352, "iso_year": 471, "isodow": 1353, "isoweek": 1353, "isoyear": 1353, "issu": [99, 100, 103, 104, 107, 114, 116, 127, 144, 145, 146, 158, 330, 417, 418, 721, 820, 1025, 1026, 1300, 1329, 1357], "ital": [46, 330], "item": [19, 65, 145, 219, 263, 266, 330, 362, 366, 367, 423, 481, 528, 530, 537, 539, 548, 651, 697, 820, 966, 970, 971, 1030, 1094, 1142, 1144, 1151, 1153, 1162, 1227, 1276, 1329], "iter": [63, 64, 65, 75, 129, 132, 139, 141, 146, 177, 179, 191, 201, 212, 220, 221, 232, 233, 234, 237, 262, 263, 264, 265, 268, 269, 276, 293, 294, 304, 305, 308, 309, 330, 400, 419, 427, 485, 610, 663, 719, 727, 737, 739, 744, 746, 747, 748, 749, 750, 758, 784, 786, 789, 798, 802, 804, 810, 816, 820, 836, 848, 856, 859, 860, 866, 883, 885, 886, 892, 897, 904, 905, 910, 934, 939, 940, 1027, 1034, 1099, 1228, 1329, 1360], "iter_batch": 146, "iter_column": 330, "iter_row": [234, 263, 264, 265, 330], "iter_slic": 330, "its": [76, 98, 136, 166, 207, 288, 330, 431, 454, 467, 476, 568, 628, 663, 718, 810, 820, 844, 851, 903, 934, 938, 1010, 1038, 1065, 1078, 1088, 1090, 1213, 1310, 1329, 1359], "itself": [172, 330, 333, 334, 569, 632, 634, 636, 638, 640, 642, 643, 645, 647, 796, 797, 820, 868, 934, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1329, 1334, 1338, 1339, 1357], "ix": [255, 330], "j": [294, 330, 1348], "jax": [287, 330, 1308, 1329], "jax_enable_x64": [287, 330], "jaxexporttyp": [287, 330], "jjk": 940, "jkl": [676, 1255], "jklmn": 1352, "job": [837, 934], "join": [52, 53, 54, 55, 56, 57, 63, 64, 65, 97, 212, 236, 237, 299, 330, 485, 504, 610, 666, 799, 820, 841, 842, 852, 856, 865, 866, 879, 890, 901, 906, 934, 1245, 1339, 1341, 1347, 1356, 1357], "join_asof": [235, 330, 864, 934], "join_nul": [235, 330, 864, 934], "join_wher": [330, 934], "joinstrategi": [57, 235, 330, 864, 934], "joinvalid": [235, 330, 864, 934], "jpy": 1360, "json": [8, 9, 11, 12, 49, 50, 140, 141, 153, 154, 160, 162, 200, 270, 330, 422, 491, 583, 587, 683, 684, 716, 820, 832, 847, 887, 934, 1262, 1263, 1296], "json_path": [684, 1263], "json_path_match": [683, 1262], "json_stat": 11, "json_str": [153, 154], "json_val": [684, 1263], "jsonencod": 140, "jsonpath": [683, 684, 1262, 1263], "jst": [136, 940], "jul": [704, 1283, 1352], "juli": [1070, 1352, 1353], "just": [46, 134, 146, 158, 246, 297, 330, 874, 900, 934, 940], "k": [191, 265, 293, 294, 330, 399, 400, 414, 518, 726, 727, 820, 836, 897, 934, 1002, 1022, 1132, 1314, 1329], "k_2": [660, 820, 1240, 1329], "k_3": [660, 820, 1240, 1329], "kadokawa": [687, 1266], "kanji": 940, "karen": [255, 330], "kathmandu": [1040, 1041, 1068], "kb": [207, 330, 388, 991, 1088, 1329], "kde": [1329, 1334], "keep": [57, 144, 145, 154, 158, 161, 162, 212, 295, 299, 300, 330, 491, 568, 586, 594, 624, 747, 820, 856, 898, 901, 934, 1209, 1329], "kei": [7, 43, 45, 46, 47, 51, 52, 53, 54, 55, 57, 62, 65, 148, 154, 156, 158, 159, 160, 161, 162, 163, 189, 221, 233, 235, 236, 247, 253, 259, 261, 264, 265, 299, 330, 485, 569, 624, 625, 692, 760, 763, 802, 820, 860, 864, 865, 875, 881, 882, 901, 934, 940, 944, 1209, 1210, 1271, 1329, 1345], "kept": [295, 330, 898, 934], "keyerror": 22, "keystrok": 816, "keyword": [7, 45, 148, 156, 159, 174, 178, 197, 220, 254, 263, 268, 269, 289, 304, 305, 309, 330, 485, 614, 719, 798, 802, 810, 820, 859, 878, 885, 886, 904, 905, 910, 934, 1311, 1329, 1342], "kl": 691, "kleen": [342, 344, 736, 737, 738, 739, 820, 947, 948, 1329], "klmnoopqrstuvwxyz": [234, 330], "knight": 1338, "know": [57, 146, 255, 297, 330, 560, 568, 820, 900, 934], "known": [150, 379, 560, 917, 983, 1174], "kurtosi": [820, 1329], "kuzu_db_conn": 146, "kwarg": [37, 38, 42, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 141, 143, 146, 147, 174, 176, 178, 197, 212, 254, 289, 330, 333, 614, 820, 856, 878, 909, 934, 1311, 1329, 1334, 1342, 1357], "k\u00f9zudb": 146, "l": 779, "l1": 65, "l2": 65, "label": [221, 287, 292, 330, 333, 334, 420, 617, 631, 632, 634, 636, 638, 640, 643, 645, 647, 820, 860, 879, 934, 1028, 1203, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1329, 1334], "label_column": [292, 330], "labelangl": [330, 333, 1329, 1334], "lag": [273, 330, 374, 553, 654, 749, 820, 889, 934, 978, 1167, 1233, 1329], "lake": [45, 148, 159, 330, 832], "lambda": [158, 214, 240, 254, 255, 259, 316, 330, 379, 477, 478, 560, 568, 569, 594, 595, 755, 756, 769, 781, 782, 794, 820, 870, 878, 881, 917, 934, 983, 1091, 1092, 1174, 1182, 1329], "land": [427, 1034], "languag": [158, 221, 236, 262, 300, 330, 449, 454, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078, 1090, 1329], "larg": [16, 17, 20, 57, 146, 149, 155, 163], "large_str": [234, 282, 289, 330], "larger": [16, 52, 53, 54, 55, 63, 64, 489, 751, 820, 841, 842, 934], "largest": [191, 293, 330, 400, 726, 727, 820, 836, 897, 934, 1314, 1329], "last": [45, 154, 158, 161, 162, 167, 168, 169, 170, 223, 236, 239, 255, 265, 276, 281, 288, 295, 324, 330, 355, 366, 375, 419, 435, 446, 450, 468, 490, 512, 537, 555, 558, 560, 593, 594, 596, 598, 600, 601, 610, 625, 662, 663, 681, 697, 705, 722, 744, 805, 816, 820, 865, 892, 896, 898, 925, 934, 940, 959, 970, 979, 1027, 1042, 1057, 1061, 1079, 1111, 1124, 1136, 1151, 1169, 1172, 1210, 1242, 1260, 1276, 1284, 1301, 1310, 1329, 1350, 1352], "last_column": [46, 330], "later": [236, 270, 330, 583, 865, 887, 934], "latest": [38, 130, 148, 159, 188, 452, 453, 581, 704, 707, 762, 1063, 1064, 1283, 1286], "latt": 940, "latter": [46, 209, 330, 1095, 1329], "lazi": [1, 65, 158, 174, 236, 254, 255, 277, 330, 569, 771, 792, 795, 811, 820, 846, 864, 865, 906, 910, 911, 913, 915, 917, 918, 919, 920, 921, 922, 923, 924, 934, 940, 1338, 1339, 1340, 1341, 1342, 1344, 1357, 1360], "lazili": [144, 145, 158, 159, 160, 161, 162, 163, 842, 934], "lazy_fram": [63, 64], "lazyfram": [0, 1, 7, 57, 58, 59, 60, 61, 63, 64, 65, 139, 158, 159, 160, 161, 162, 163, 164, 167, 168, 174, 195, 200, 238, 254, 255, 270, 277, 330, 422, 485, 560, 583, 798, 799, 820, 832, 931, 932, 933, 939, 940, 1338, 1339, 1342, 1344, 1357, 1358, 1360], "lazygroupbi": [859, 860, 883, 934], "lbl": [287, 292, 330], "ldf": [1, 910, 911, 913, 915, 918, 919, 920, 921, 922, 923, 924], "ldot": [476, 820, 1090, 1329], "le": [672, 820, 1329], "lead": [20, 51, 136, 164, 244, 271, 273, 280, 330, 374, 492, 495, 553, 560, 568, 569, 653, 654, 699, 701, 751, 786, 804, 820, 870, 888, 889, 917, 934, 978, 1167, 1182, 1231, 1233, 1278, 1280, 1329], "leap": [439, 449, 1046, 1060], "leap_year": 439, "learn": [292, 330], "least": [65, 110, 255, 330, 396, 397, 611, 675, 677, 820, 999, 1000, 1198, 1254, 1256, 1329, 1350], "leav": [12, 246, 297, 330, 560, 874, 900, 934], "left": [21, 22, 46, 57, 167, 168, 169, 170, 221, 235, 236, 262, 299, 330, 420, 475, 476, 477, 478, 504, 506, 617, 630, 633, 635, 637, 639, 641, 644, 646, 648, 652, 725, 747, 755, 756, 760, 761, 763, 764, 769, 779, 794, 807, 808, 810, 820, 860, 864, 865, 883, 901, 934, 1028, 1089, 1090, 1091, 1092, 1117, 1203, 1229, 1312, 1329, 1341, 1345, 1350], "left_clos": [420, 617, 820, 1028, 1203, 1329], "left_on": [235, 236, 299, 330, 864, 865, 901, 934], "left_right": [235, 330, 864, 934], "leftmost": [652, 820, 1229, 1329, 1352], "len": [18, 46, 174, 178, 195, 234, 255, 307, 311, 316, 330, 413, 569, 580, 582, 628, 752, 775, 779, 820, 843, 903, 908, 912, 917, 934, 939, 1021, 1213, 1329], "len_byt": [18, 405, 686, 687, 1008, 1265], "len_char": [404, 685, 1007, 1264], "length": [65, 66, 84, 141, 149, 155, 158, 172, 176, 219, 221, 262, 275, 330, 333, 404, 419, 454, 467, 554, 560, 581, 624, 625, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 661, 681, 685, 686, 688, 689, 692, 694, 705, 714, 748, 779, 792, 795, 796, 797, 811, 820, 860, 879, 883, 891, 934, 1007, 1014, 1027, 1038, 1065, 1078, 1168, 1174, 1195, 1209, 1210, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1241, 1260, 1264, 1265, 1267, 1268, 1271, 1273, 1284, 1293, 1329, 1346, 1347, 1350], "leq": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "less": [158, 236, 330, 489, 520, 567, 568, 697, 820, 865, 934, 1276, 1360], "letter": [208, 313, 324, 330, 479, 668, 676, 678, 680, 692, 712, 767, 820, 853, 914, 925, 934, 940, 1247, 1255, 1257, 1259, 1271, 1291, 1352], "level": [16, 46, 47, 48, 51, 55, 140, 158, 161, 162, 163, 214, 240, 251, 277, 282, 330, 334, 485, 820, 832, 893, 934, 1304, 1329, 1357], "lexic": [69, 940, 1011], "lf": [52, 53, 54, 55, 60, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 907, 908, 912, 916, 934, 1346, 1357, 1360], "lf1": [799, 893, 934, 1342, 1344, 1358], "lf2": [799, 893, 934, 1342, 1344, 1358], "lf3": [934, 1342], "lf4": [934, 1342], "lf5": 934, "lf6": 934, "lf_other": [906, 934], "lib": [820, 1304, 1329], "librari": [1, 112, 141, 146, 149, 568, 820, 938, 1360], "life": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "lifetim": [184, 831, 1344], "light": [46, 330], "like": [41, 43, 45, 47, 48, 49, 50, 51, 64, 130, 141, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 200, 221, 228, 230, 235, 265, 270, 287, 288, 330, 333, 422, 428, 491, 532, 568, 586, 620, 675, 700, 701, 732, 816, 820, 837, 842, 847, 860, 934, 1035, 1146, 1205, 1254, 1318, 1329, 1334], "limit": [16, 17, 55, 146, 147, 180, 211, 330, 382, 484, 490, 820, 855, 934, 1098, 1329, 1347, 1356], "line": [16, 26, 46, 144, 145, 149, 158, 219, 228, 230, 330, 333, 675, 1254, 1329, 1334], "line_termin": [43, 52, 330, 934], "linear": [199, 227, 257, 322, 330, 504, 505, 527, 572, 618, 640, 641, 749, 750, 793, 820, 846, 863, 880, 923, 934, 1029, 1115, 1116, 1141, 1204, 1220, 1329], "lineitem": [138, 145, 147], "link": 938, "list": [1, 4, 5, 6, 19, 39, 45, 46, 57, 58, 60, 63, 64, 66, 72, 88, 104, 129, 131, 132, 133, 135, 136, 138, 139, 142, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 172, 173, 174, 178, 196, 201, 205, 207, 208, 212, 218, 220, 221, 225, 233, 250, 253, 262, 263, 264, 265, 268, 276, 283, 284, 292, 294, 295, 296, 298, 304, 309, 310, 330, 340, 367, 378, 379, 380, 420, 427, 481, 487, 492, 501, 510, 568, 569, 581, 582, 610, 617, 623, 626, 631, 632, 634, 636, 638, 640, 643, 645, 647, 662, 663, 674, 676, 678, 680, 695, 715, 717, 718, 725, 744, 746, 749, 760, 761, 763, 764, 766, 774, 776, 780, 782, 800, 802, 808, 816, 820, 844, 851, 853, 856, 859, 860, 885, 892, 898, 899, 904, 906, 910, 911, 934, 939, 940, 971, 982, 983, 984, 1014, 1028, 1034, 1088, 1094, 1103, 1106, 1112, 1113, 1122, 1182, 1203, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1247, 1253, 1255, 1257, 1259, 1271, 1274, 1309, 1312, 1329, 1338, 1343, 1347, 1349, 1359, 1360], "list_of_seri": 782, "listtostructwidthstrategi": [560, 1174], "lit": [1, 341, 383, 506, 577, 593, 679, 748, 749, 755, 769, 792, 795, 811, 820, 1098, 1329], "liter": [7, 21, 22, 26, 43, 45, 47, 51, 52, 53, 54, 55, 146, 148, 154, 156, 158, 159, 161, 162, 163, 177, 178, 179, 250, 268, 269, 273, 299, 304, 305, 330, 341, 383, 402, 406, 409, 431, 452, 473, 474, 482, 489, 494, 496, 506, 520, 567, 577, 589, 591, 604, 605, 615, 624, 625, 667, 668, 669, 678, 679, 680, 690, 691, 692, 719, 720, 728, 737, 739, 741, 747, 748, 749, 750, 758, 759, 762, 775, 779, 780, 784, 786, 789, 798, 802, 804, 806, 820, 855, 885, 886, 889, 901, 904, 905, 934, 940, 986, 1016, 1038, 1063, 1086, 1096, 1117, 1194, 1209, 1210, 1228, 1230, 1233, 1246, 1247, 1248, 1257, 1258, 1259, 1269, 1270, 1271, 1329, 1352], "littl": [264, 330, 387, 990], "lmn": 940, "ln": [475, 476, 477, 478, 820, 1089, 1090, 1091, 1092, 1329, 1350], "ln_a": 1351, "load": [9, 11, 12, 132, 134, 141, 146, 148, 149, 155, 159, 160, 177, 179, 330, 820, 832, 934, 1360], "load_from_fil": [8, 11, 12], "load_sheet_by_nam": 149, "load_tabl": 149, "load_workbook": 149, "loader": [292, 330], "lobster": [679, 1258], "loc": [330, 334], "local": [10, 45, 146, 148, 159, 160, 163, 330, 467, 612, 613, 820, 1006, 1010, 1040, 1041, 1065, 1068, 1078, 1199, 1200, 1329, 1339], "localhost": 146, "localis": [454, 467, 1078], "locat": [46, 156, 158, 161, 163, 209, 260, 290, 296, 330, 652, 820, 899, 934, 1095, 1103, 1228, 1229, 1329], "lock": 180, "log": [35, 59, 400, 472, 565, 591, 615, 727, 820, 1084, 1329, 1350], "log10": [820, 1329, 1350], "log10_a": 1351, "log16_a": 1351, "log1p": [820, 1329, 1350], "log1p_a": 1351, "log2": 1350, "logarithm": [563, 564, 565, 820, 1177, 1178, 1179, 1329, 1351], "logic": [65, 240, 316, 330, 333, 334, 342, 344, 422, 569, 725, 736, 737, 738, 739, 782, 820, 847, 852, 864, 887, 917, 934, 947, 948, 1182, 1310, 1312, 1329, 1334], "london": [432, 436, 453, 1039, 1043, 1064], "london_timezon": [453, 1064], "london_to_amsterdam": [453, 1064], "long": [208, 246, 255, 297, 298, 330, 387, 853, 874, 900, 934, 990], "longer": [144, 145, 158], "longest": 560, "look": [16, 221, 330, 383, 560, 860, 934, 986], "lookup": 816, "loop": [146, 569, 820], "lose": [429, 1036], "lossi": [144, 145, 158], "love": [668, 692, 1247, 1271], "low": [23, 146, 409, 617, 820, 1203, 1329], "low_memori": [144, 145, 154, 156, 158, 162, 163], "lower": [158, 199, 221, 257, 322, 330, 409, 506, 566, 594, 618, 622, 640, 641, 741, 760, 761, 763, 764, 779, 793, 807, 808, 820, 846, 860, 880, 923, 934, 1016, 1029, 1117, 1180, 1204, 1207, 1220, 1317, 1329, 1347, 1350], "lower_bound": [221, 330, 409, 506, 820, 860, 934, 1016, 1117, 1317, 1329], "lowercas": [600, 710, 712, 1289, 1291, 1352], "lowest": [566, 820], "lru_cach": [240, 330, 569, 820, 1182, 1329], "lst": 173, "lt": [166, 485, 734, 820, 1329], "ltrim": 1350, "lyric": [668, 692, 1247, 1271], "lz4": [47, 48, 51, 53, 55, 330, 934], "lzo": [51, 55, 330, 934], "m": [72, 74, 235, 330, 428, 429, 431, 436, 437, 456, 458, 459, 470, 675, 704, 706, 707, 711, 762, 763, 764, 765, 771, 779, 864, 934, 940, 1035, 1036, 1038, 1043, 1044, 1067, 1069, 1070, 1081, 1254, 1283, 1285, 1286, 1290, 1342, 1352, 1353], "m_2": [660, 820, 1240, 1329], "m_3": [660, 820, 1240, 1329], "m_i": [660, 820, 1240, 1329], "machin": 1360, "maco": 166, "made": [46, 146, 330, 459, 1070], "mai": [1, 2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 65, 73, 75, 79, 129, 131, 132, 133, 135, 139, 140, 142, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 172, 174, 175, 176, 177, 178, 179, 184, 199, 200, 207, 209, 221, 235, 236, 237, 240, 262, 270, 277, 287, 289, 292, 299, 300, 330, 333, 334, 404, 419, 420, 422, 427, 428, 429, 440, 449, 454, 456, 467, 479, 500, 535, 560, 568, 569, 580, 583, 617, 630, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 678, 680, 683, 685, 691, 746, 748, 755, 756, 760, 761, 763, 764, 769, 779, 794, 807, 808, 820, 841, 842, 846, 847, 852, 860, 864, 865, 866, 870, 883, 887, 893, 901, 907, 908, 917, 934, 1007, 1010, 1011, 1027, 1028, 1029, 1034, 1035, 1036, 1047, 1060, 1065, 1067, 1078, 1088, 1095, 1112, 1149, 1182, 1203, 1215, 1218, 1220, 1221, 1257, 1259, 1262, 1264, 1308, 1311, 1313, 1329, 1334, 1360], "main": [166, 842, 934], "maintain": [52, 53, 54, 55, 276, 330, 380, 561, 652, 663, 729, 744, 820, 846, 892, 934, 984, 1175, 1229, 1315, 1329], "maintain_ord": [52, 53, 54, 55, 220, 235, 253, 255, 276, 295, 300, 310, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 340, 380, 390, 395, 398, 400, 492, 495, 561, 569, 663, 727, 729, 744, 820, 842, 852, 859, 864, 879, 890, 892, 898, 911, 913, 915, 918, 919, 920, 921, 922, 923, 924, 934, 984, 1175, 1315, 1329], "maintainorderjoin": [235, 330, 864, 934], "major": [149, 287, 330], "make": [46, 65, 88, 129, 134, 141, 144, 145, 148, 149, 150, 152, 156, 159, 247, 251, 258, 288, 300, 330, 333, 477, 478, 500, 600, 601, 610, 623, 696, 820, 875, 934, 1091, 1092, 1112, 1275, 1310, 1329], "man": [693, 1272], "manag": [56, 96, 97, 831, 832, 1344, 1357], "mandatori": [46, 330], "mango": [402, 406, 672, 698, 1004, 1009, 1251, 1277], "mani": [146, 147, 163, 209, 330, 678, 680, 692, 1095, 1257, 1271, 1329, 1333], "manner": 146, "many_to_mani": [235, 330, 864, 934], "many_to_on": [235, 330, 864, 934], "map": [88, 131, 132, 144, 145, 146, 147, 150, 151, 156, 157, 158, 161, 174, 192, 195, 213, 233, 240, 259, 263, 264, 265, 267, 283, 330, 341, 454, 467, 568, 569, 593, 595, 596, 598, 600, 601, 624, 625, 692, 732, 781, 820, 838, 881, 884, 934, 939, 940, 1029, 1065, 1078, 1182, 1209, 1210, 1271, 1318, 1329, 1339, 1341, 1342, 1357], "map_": 116, "map_batch": [820, 934], "map_el": [107, 240, 330, 568, 735, 820, 1329], "map_field": [597, 599], "map_row": 330, "mapelementsstrategi": [569, 820], "mapping_strategi": [610, 820], "march": [456, 1067], "mariadb": 147, "mark": [46, 140, 330, 401, 820, 1003, 1329], "mark_area": [1329, 1334], "mark_attr": [330, 333, 1329, 1334], "mark_bar": [330, 333, 1329, 1334], "mark_lin": [330, 333], "mark_point": [330, 333], "markdown": [13, 26, 184], "marker": [46, 330], "mask": [163, 174, 178, 228, 230, 330, 384, 507, 509, 512, 517, 612, 613, 667, 670, 679, 820, 987, 1099, 1117, 1118, 1121, 1124, 1130, 1199, 1200, 1230, 1246, 1249, 1258, 1320, 1329], "mass": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "massag": [246, 297, 330, 874, 900, 934], "match": [45, 46, 65, 72, 118, 129, 131, 132, 133, 135, 144, 146, 153, 154, 156, 162, 163, 167, 168, 169, 170, 192, 211, 235, 236, 263, 299, 330, 402, 406, 576, 577, 578, 624, 625, 642, 667, 668, 669, 672, 675, 676, 678, 679, 680, 683, 684, 690, 691, 692, 698, 704, 706, 707, 810, 816, 820, 838, 855, 864, 865, 901, 934, 940, 1004, 1009, 1087, 1209, 1210, 1221, 1246, 1247, 1248, 1251, 1254, 1255, 1257, 1258, 1259, 1262, 1263, 1269, 1270, 1271, 1277, 1283, 1285, 1286, 1329, 1352], "matches_overlap": [678, 680, 1259], "matches_supertyp": [211, 330, 855, 934], "materi": [139, 240, 265, 316, 330, 841, 879, 917, 927, 934, 940, 1182, 1329], "materialis": [233, 234, 263, 264, 330], "math": [1, 16, 61, 255, 330, 421, 820, 1018, 1020, 1238, 1302, 1329, 1350, 1354, 1356], "mathemat": [728, 766, 820, 1350], "mathshortcut": [1, 61], "matplotlib": [166, 584, 879, 890, 934], "matter": [221, 233, 262, 264, 265, 284, 330, 630, 700, 701, 820, 860, 883, 934], "max": [31, 46, 51, 55, 140, 199, 211, 220, 242, 255, 262, 330, 334, 415, 484, 560, 568, 610, 620, 624, 625, 630, 632, 633, 653, 697, 748, 760, 763, 784, 800, 820, 846, 855, 859, 883, 934, 1023, 1029, 1098, 1174, 1205, 1216, 1231, 1276, 1329, 1338, 1347, 1350], "max_a": [262, 330, 630, 820, 883, 934], "max_binary_s": 146, "max_col": [172, 174], "max_colname_length": [219, 330], "max_color": [46, 330], "max_data_s": 178, "max_elem": 1347, "max_horizont": [330, 783], "max_items_per_column": [219, 330], "max_level": 140, "max_siz": [173, 174, 176, 178, 1360], "max_text_s": 146, "max_valu": 1360, "max_width": [560, 1174], "maxim": [317, 353, 820, 918, 957, 1329], "maximum": [16, 32, 43, 51, 52, 55, 73, 132, 135, 144, 145, 146, 149, 153, 154, 155, 158, 162, 164, 172, 173, 174, 176, 178, 219, 221, 241, 242, 330, 360, 405, 525, 570, 602, 612, 620, 681, 683, 686, 694, 705, 783, 784, 820, 860, 871, 934, 964, 1008, 1048, 1139, 1183, 1191, 1199, 1205, 1260, 1262, 1265, 1273, 1284, 1329, 1346], "mb": [207, 330, 388, 1088, 1329], "me": [668, 692, 712, 1247, 1271, 1291], "mean": [51, 55, 144, 145, 150, 156, 158, 161, 184, 199, 211, 220, 221, 236, 244, 255, 262, 300, 309, 330, 449, 454, 467, 481, 484, 489, 630, 633, 634, 635, 637, 639, 641, 644, 646, 648, 660, 666, 675, 682, 760, 761, 763, 764, 765, 786, 807, 808, 810, 820, 846, 855, 859, 860, 865, 870, 883, 910, 934, 1029, 1060, 1065, 1078, 1094, 1098, 1217, 1240, 1245, 1254, 1261, 1329, 1346, 1347], "mean_horizont": [330, 785], "measur": [246, 297, 330, 334, 874, 900, 934], "measure_a": [330, 334], "measure_b": [330, 334], "median": [199, 255, 330, 484, 636, 637, 820, 846, 906, 934, 1029, 1218, 1329, 1350], "mediat": 1357, "medium": [46, 330], "megan": [247, 330, 875, 934], "melt": [297, 330, 900, 934], "member": [221, 330, 860, 934, 1122, 1329], "membership": [362, 528, 966, 1142], "memori": [20, 51, 55, 63, 64, 65, 129, 130, 133, 134, 135, 144, 145, 146, 148, 149, 150, 154, 156, 158, 159, 161, 162, 163, 188, 209, 240, 264, 265, 274, 288, 316, 330, 610, 621, 655, 820, 841, 842, 909, 934, 1095, 1182, 1206, 1234, 1235, 1310, 1329], "memory_map": [150, 156, 161], "memory_resourc": 909, "merg": [45, 235, 236, 247, 330, 864, 865, 875, 934], "merge_sort": [330, 934], "messi": [675, 677, 1254, 1256], "met": 810, "meta": [98, 422, 673, 820, 1252], "metadata": [0, 3, 7, 160, 832], "method": [2, 10, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 128, 130, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 164, 171, 174, 178, 184, 186, 195, 199, 200, 203, 204, 209, 216, 220, 227, 233, 240, 251, 257, 263, 264, 265, 273, 295, 304, 311, 316, 322, 330, 339, 342, 343, 374, 409, 422, 456, 459, 473, 474, 482, 489, 491, 494, 496, 504, 520, 553, 567, 569, 587, 589, 591, 593, 594, 596, 598, 600, 601, 604, 605, 606, 609, 615, 618, 620, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 654, 668, 678, 680, 692, 700, 701, 702, 703, 708, 714, 720, 728, 730, 735, 751, 782, 793, 812, 813, 815, 816, 820, 821, 822, 825, 826, 827, 828, 829, 832, 842, 846, 847, 849, 850, 863, 880, 889, 898, 904, 909, 912, 917, 923, 934, 939, 942, 949, 978, 1016, 1029, 1067, 1070, 1085, 1086, 1095, 1096, 1105, 1107, 1115, 1134, 1167, 1181, 1182, 1193, 1194, 1204, 1205, 1220, 1233, 1247, 1257, 1259, 1271, 1287, 1293, 1312, 1321, 1323, 1325, 1329, 1330, 1333, 1335, 1336, 1337, 1339, 1343], "metric": 146, "micro": [455, 1066], "microsecond": [72, 74, 221, 233, 236, 262, 264, 265, 284, 300, 330, 449, 452, 454, 459, 462, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 762, 763, 764, 765, 806, 807, 808, 820, 860, 865, 879, 883, 934, 940, 1060, 1063, 1065, 1073, 1078, 1090, 1329, 1353], "microsoft": [39, 46, 330], "mid_color": [46, 330], "midnight": 89, "midpoint": [199, 257, 322, 330, 618, 640, 641, 793, 820, 846, 880, 923, 934, 1029, 1204, 1220, 1329], "might": [144, 145, 158, 180, 235, 236, 255, 288, 297, 330, 569, 730, 820, 864, 865, 892, 900, 934], "millennia": 1353, "millennium": 1353, "milli": [455, 1066], "millisecond": [221, 236, 262, 300, 330, 438, 444, 449, 454, 463, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 763, 764, 765, 779, 807, 808, 820, 860, 865, 883, 934, 940, 1060, 1065, 1074, 1078, 1090, 1329, 1353], "milliseconds_diff": [462, 463, 465], "mimic": 749, "min": [46, 51, 55, 141, 199, 211, 249, 255, 262, 330, 416, 484, 569, 610, 620, 630, 638, 639, 760, 763, 789, 798, 820, 846, 855, 883, 934, 1024, 1029, 1098, 1205, 1219, 1329, 1347, 1350, 1353, 1360], "min_a": [262, 330, 630, 820, 883, 934], "min_col": [172, 174], "min_color": [46, 330], "min_elem": 1347, "min_horizont": [330, 788, 798], "min_sampl": [419, 475, 477, 478, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 796, 797, 820, 1027, 1089, 1091, 1092, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1329], "min_siz": [173, 174, 176, 178, 1360], "min_valu": 1360, "mincol": 172, "minim": [320, 354, 361, 526, 655, 663, 820, 921, 958, 965, 1140, 1186, 1234, 1329], "minimum": [51, 55, 172, 173, 174, 176, 178, 214, 248, 249, 330, 475, 477, 478, 588, 603, 613, 620, 788, 789, 820, 876, 934, 1054, 1089, 1091, 1092, 1192, 1200, 1205, 1329, 1346, 1360], "minu": [449, 606, 820, 1060], "minut": [221, 236, 262, 300, 330, 438, 441, 443, 448, 449, 452, 454, 455, 464, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 762, 763, 764, 765, 806, 807, 808, 820, 860, 865, 883, 934, 940, 1060, 1063, 1065, 1075, 1078, 1090, 1329, 1353], "minutes_diff": 464, "misc": 1344, "miscellan": 832, "mismatch": [65, 121, 154, 162, 167, 169], "miss": [65, 144, 145, 158, 210, 216, 330, 382, 475, 477, 478, 483, 490, 513, 514, 560, 820, 854, 934, 1089, 1091, 1092, 1097, 1329], "missing_utf8_is_empty_str": [144, 145, 158], "mix": [17, 236, 288, 330, 748, 799, 865, 893, 934, 940, 1029, 1329], "mixin": 1, "mlnm": 442, "mm": [46, 330], "mn": 1352, "mno": [22, 26], "mnop": 1352, "mo": 765, "mocha": 940, "mod": [820, 1350], "mode": [44, 45, 46, 52, 53, 54, 55, 63, 64, 167, 169, 255, 277, 330, 676, 792, 795, 811, 820, 841, 842, 852, 934, 1255, 1329, 1338, 1339, 1357], "model": [292, 330], "modifi": [144, 145, 158, 180, 184, 209, 225, 232, 233, 302, 330, 356, 453, 470, 667, 675, 676, 679, 690, 691, 710, 712, 713, 820, 949, 1064, 1081, 1095, 1246, 1254, 1255, 1258, 1269, 1270, 1289, 1291, 1292, 1329], "modul": [100, 108, 149, 819, 938, 940, 1360], "modulu": [589, 820], "moment": [51, 197, 330, 518, 660, 820, 1132, 1240, 1329], "mon": [330, 333, 1353], "mondai": [221, 330, 427, 467, 469, 746, 860, 934, 1034, 1078, 1080], "monkei": [688, 689, 1267, 1268], "month": [221, 236, 262, 300, 330, 435, 446, 447, 449, 452, 454, 456, 459, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 759, 760, 761, 762, 763, 764, 765, 807, 808, 820, 860, 865, 883, 934, 1042, 1057, 1058, 1060, 1063, 1065, 1067, 1070, 1078, 1090, 1329, 1353], "month_nam": [456, 459], "monthbegin": [447, 1058], "monthend": [446, 1057], "moos": 940, "more": [26, 46, 51, 55, 57, 65, 96, 97, 126, 129, 130, 131, 132, 133, 134, 135, 139, 141, 146, 147, 148, 149, 153, 154, 155, 156, 159, 160, 162, 167, 169, 174, 184, 186, 197, 199, 203, 212, 232, 233, 240, 246, 251, 263, 264, 266, 277, 287, 288, 292, 295, 297, 316, 330, 334, 343, 380, 404, 485, 489, 497, 518, 548, 561, 565, 568, 569, 609, 610, 651, 660, 676, 685, 704, 706, 707, 729, 740, 752, 768, 774, 777, 785, 787, 790, 791, 800, 810, 816, 820, 846, 849, 850, 856, 874, 893, 898, 900, 909, 934, 938, 940, 942, 984, 1007, 1010, 1029, 1108, 1109, 1132, 1162, 1175, 1182, 1227, 1240, 1255, 1264, 1283, 1285, 1286, 1308, 1310, 1315, 1329, 1344, 1345, 1355, 1358, 1359, 1360], "more_bi": [253, 276, 330, 663, 820, 892, 934], "more_column": [208, 296, 330, 479, 767, 820, 853, 899, 934, 940], "more_expr": [610, 744, 747, 748, 749, 750, 820], "more_nam": [715, 816], "most": [46, 129, 144, 145, 147, 158, 167, 168, 169, 170, 288, 330, 393, 394, 581, 590, 611, 625, 697, 820, 996, 997, 1187, 1198, 1210, 1276, 1310, 1329, 1341, 1357], "mostli": [282, 330, 485, 820], "move": [255, 265, 330, 427, 475, 476, 477, 478, 632, 634, 638, 645, 820, 1034, 1089, 1090, 1091, 1092, 1216, 1217, 1219, 1223, 1329], "mr": 909, "mssql": [44, 330], "much": [240, 298, 316, 330, 404, 405, 419, 535, 569, 685, 686, 782, 820, 917, 1007, 1008, 1027, 1149, 1182, 1264, 1265, 1329], "mul": 820, "multi": [14, 46, 144, 145, 292, 330, 479, 675, 820, 1254], "multi_fram": [46, 330], "multicolselector": 189, "multiindexselector": [189, 944], "multipl": [46, 63, 64, 65, 113, 144, 145, 149, 155, 158, 161, 162, 163, 172, 174, 178, 201, 207, 209, 212, 220, 221, 225, 234, 237, 253, 255, 265, 268, 276, 299, 304, 309, 330, 400, 535, 568, 574, 581, 590, 591, 610, 624, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 663, 715, 727, 744, 752, 769, 781, 783, 788, 794, 800, 803, 810, 816, 820, 832, 841, 842, 848, 856, 859, 860, 866, 885, 892, 901, 904, 910, 917, 934, 949, 979, 1088, 1095, 1149, 1169, 1187, 1209, 1211, 1242, 1329, 1342, 1347], "multipli": [568, 631, 632, 634, 636, 638, 640, 643, 645, 647, 719, 820, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1329], "multithread": [276, 330, 663, 744, 820, 892, 934, 979, 1169, 1242, 1329], "must": [46, 75, 130, 131, 139, 141, 144, 148, 156, 159, 160, 163, 164, 199, 208, 221, 236, 237, 247, 255, 262, 263, 330, 420, 560, 569, 584, 617, 624, 625, 630, 692, 748, 760, 761, 810, 820, 846, 853, 860, 865, 866, 870, 875, 883, 890, 909, 934, 1028, 1029, 1203, 1209, 1210, 1271, 1329], "mutual": [263, 330], "my": [160, 164, 330, 333, 1329, 1334], "my_column": 917, "my_column_": [294, 330], "my_column_0": [294, 330], "my_column_1": [294, 330], "my_column_2": [294, 330], "my_custom_aggreg": 782, "my_fil": 150, "my_holidai": [427, 746, 1034], "my_larger_than_ram_fil": [52, 53, 54, 55, 934], "my_long_fil": 158, "my_struct": 802, "mydf": 158, "myrol": 147, "mysql": 147, "n": [1, 18, 19, 23, 31, 32, 43, 50, 52, 58, 59, 60, 61, 72, 74, 138, 139, 144, 145, 149, 154, 158, 174, 193, 209, 215, 221, 223, 233, 234, 239, 240, 264, 265, 266, 273, 278, 281, 284, 286, 301, 313, 315, 324, 330, 346, 374, 379, 388, 390, 395, 398, 399, 400, 404, 405, 419, 423, 427, 429, 431, 437, 458, 470, 476, 482, 485, 493, 499, 522, 530, 536, 538, 548, 549, 553, 556, 558, 560, 562, 611, 614, 623, 643, 644, 647, 648, 651, 654, 660, 665, 681, 685, 686, 690, 691, 696, 697, 699, 700, 705, 707, 722, 726, 727, 728, 732, 733, 735, 753, 762, 763, 764, 765, 771, 773, 792, 795, 796, 797, 798, 801, 805, 809, 811, 820, 839, 858, 860, 861, 869, 889, 894, 896, 902, 914, 916, 925, 934, 940, 978, 983, 991, 1002, 1007, 1008, 1015, 1027, 1030, 1034, 1036, 1038, 1044, 1069, 1081, 1090, 1095, 1096, 1104, 1111, 1136, 1144, 1150, 1152, 1162, 1163, 1167, 1172, 1174, 1198, 1222, 1224, 1227, 1233, 1240, 1244, 1260, 1264, 1265, 1269, 1270, 1275, 1276, 1284, 1286, 1301, 1307, 1314, 1318, 1319, 1329, 1341, 1342, 1349, 1352, 1353, 1355, 1357, 1360], "n0": [379, 560], "n00": [983, 1174], "n01": [983, 1174], "n02": [983, 1174], "n1": [379, 560], "n2": [1, 379], "n3": 1, "n_1": [485, 820], "n_2": [485, 820], "n_3": [485, 820], "n_bar": 1346, "n_bit": 1352, "n_byte": [388, 404, 405, 685, 686, 1352], "n_char": [404, 405, 685, 686, 1352], "n_chunk": [330, 949, 1095, 1206, 1329], "n_elem": 1347, "n_even": 940, "n_field_strategi": [560, 1174], "n_film": 1338, "n_foo_uniqu": 1346, "n_kilobyt": 388, "n_row": [139, 142, 144, 145, 150, 152, 154, 156, 158, 161, 162, 163, 234, 330, 934], "n_thread": [144, 145], "n_uniqu": [330, 346, 820, 1329], "na": [289, 330, 698, 1311, 1329], "naiv": [431, 432, 707, 1038, 1039, 1286], "name": [1, 3, 5, 6, 7, 24, 28, 30, 38, 41, 43, 44, 46, 52, 58, 59, 60, 61, 76, 88, 105, 129, 131, 132, 133, 134, 135, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 169, 170, 171, 172, 174, 177, 178, 179, 191, 192, 195, 196, 201, 202, 203, 204, 208, 212, 213, 216, 217, 219, 220, 231, 232, 233, 235, 236, 237, 240, 242, 244, 246, 247, 249, 253, 255, 259, 263, 264, 265, 267, 268, 269, 276, 277, 280, 283, 285, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 305, 306, 307, 308, 309, 315, 330, 334, 341, 379, 383, 384, 386, 389, 400, 409, 420, 456, 459, 479, 485, 506, 513, 514, 515, 516, 560, 569, 574, 578, 580, 582, 586, 610, 617, 627, 663, 676, 677, 690, 691, 692, 715, 717, 719, 727, 732, 736, 737, 738, 739, 740, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 767, 768, 773, 774, 777, 783, 784, 785, 786, 787, 788, 789, 790, 793, 796, 797, 798, 799, 801, 802, 803, 804, 805, 809, 810, 816, 820, 836, 838, 843, 844, 848, 849, 850, 853, 856, 859, 864, 865, 866, 874, 875, 881, 884, 885, 886, 892, 893, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 910, 916, 934, 939, 940, 946, 983, 1015, 1028, 1067, 1070, 1087, 1174, 1203, 1208, 1254, 1255, 1256, 1269, 1270, 1294, 1297, 1305, 1306, 1311, 1318, 1329, 1334, 1339, 1340, 1341, 1342, 1343, 1344, 1356, 1357, 1360], "name_gener": [294, 330], "named_agg": [309, 910], "named_bi": [220, 330, 859, 934], "named_expr": [268, 269, 304, 305, 330, 719, 798, 802, 885, 886, 904, 905, 934], "named_fram": [1342, 1357], "nameless": 134, "namespac": [1, 3, 5, 6, 7, 146, 329, 330, 333, 715, 799, 819, 832, 932, 933, 938, 1329, 1334, 1360], "namespaceinfo": 5, "nan": [134, 174, 188, 203, 210, 288, 289, 330, 425, 426, 473, 474, 483, 494, 496, 504, 513, 514, 515, 516, 520, 567, 570, 588, 602, 603, 604, 605, 631, 657, 728, 751, 820, 849, 854, 934, 952, 956, 1032, 1033, 1097, 1125, 1126, 1191, 1192, 1215, 1237, 1310, 1311, 1329, 1360], "nan_as_nul": 188, "nan_max": [820, 1329], "nan_min": [820, 1329], "nan_to_nul": [134, 330, 934, 1329], "nana": 1352, "nanmax": [602, 603, 820, 1191, 1192, 1329], "nanosecond": [89, 221, 236, 262, 300, 330, 449, 454, 455, 465, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 763, 764, 765, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1066, 1076, 1078, 1090, 1329, 1353], "nansum": [631, 820, 1215, 1329], "nativ": [16, 44, 144, 146, 149, 150, 152, 156, 233, 240, 264, 265, 284, 288, 316, 330, 569, 782, 799, 820, 826, 893, 917, 934, 938, 1182, 1310, 1329, 1333, 1357, 1360], "natur": [565, 820, 1179, 1329, 1345, 1351], "ndarrai": [133, 186, 212, 288, 330, 492, 652, 820, 856, 934, 942, 1103, 1228, 1229, 1310, 1329], "ndjson": [54, 934], "ne": [605, 820, 1194, 1329], "ne_miss": [212, 330, 820, 856, 934, 1086, 1329], "nearest": [59, 199, 236, 257, 322, 330, 408, 488, 504, 618, 640, 641, 793, 820, 846, 865, 880, 923, 934, 1013, 1029, 1102, 1115, 1204, 1220, 1329, 1351], "nearest_pow2": 59, "necessari": [43, 44, 52, 56, 97, 149, 288, 330, 934, 1310, 1329], "need": [65, 99, 108, 136, 144, 145, 147, 156, 158, 161, 163, 184, 221, 262, 265, 274, 330, 333, 560, 630, 655, 690, 691, 692, 708, 765, 792, 795, 811, 820, 860, 883, 934, 1234, 1269, 1270, 1271, 1287, 1329, 1334, 1360], "neg": [19, 71, 72, 73, 74, 144, 145, 150, 152, 156, 165, 223, 239, 262, 273, 275, 281, 307, 330, 374, 553, 554, 614, 615, 630, 654, 661, 681, 694, 705, 820, 883, 889, 891, 907, 908, 934, 940, 978, 1111, 1136, 1167, 1168, 1201, 1233, 1241, 1260, 1273, 1284, 1301, 1329], "negat": [607, 820, 1196, 1329], "neither": [136, 149, 155, 266, 330, 379, 560, 983, 1174], "nest": [56, 136, 140, 175, 176, 207, 330, 832, 1088, 1329, 1357, 1360], "nesting_level": 175, "net": [676, 1255], "netherland": [236, 330, 865, 934], "never": [43, 52, 146, 235, 236, 263, 330, 864, 865, 934], "new": [44, 45, 46, 158, 184, 189, 215, 225, 226, 240, 251, 252, 255, 259, 294, 296, 298, 299, 304, 305, 330, 341, 431, 481, 491, 493, 504, 594, 595, 610, 624, 625, 629, 687, 690, 691, 696, 697, 715, 717, 816, 820, 832, 858, 881, 899, 901, 904, 905, 917, 934, 944, 946, 1038, 1094, 1104, 1195, 1208, 1209, 1210, 1214, 1269, 1270, 1275, 1276, 1294, 1297, 1306, 1329, 1357, 1359], "new_column": [144, 145, 149, 158], "new_dai": 452, "new_dat": 449, "new_df": [299, 330, 901, 934], "new_fil": [41, 43, 47, 48, 51, 330], "new_from_index": 1329, "new_id": [294, 330], "new_lf": [901, 934], "new_tabl": 1359, "new_valu": [755, 756, 769, 794], "new_york": 763, "newli": 57, "newlin": [50, 144, 154, 158, 162, 330], "next": [24, 59, 221, 236, 262, 300, 330, 382, 427, 449, 454, 467, 620, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1034, 1060, 1065, 1078, 1205, 1329], "next_batch": 145, "next_pow2": 59, "nfc": [687, 1266, 1352], "nfd": [687, 1266, 1352], "nfkc": [687, 1266, 1352], "nfkd": [687, 1266, 1352], "nfruit": 705, "nl": [427, 746, 1034], "nnel_id": 136, "no1": 940, "no_default": [216, 330, 624, 625, 692, 820, 1209, 1210, 1271, 1329], "no_optim": [52, 53, 54, 55, 63, 64, 841, 842, 870, 879, 934], "nodataerror": [144, 145, 149, 155, 158], "nodd": [675, 1254], "node": [837, 841, 862, 870, 874, 879, 881, 934], "nodefault": [216, 330, 624, 625, 692, 820, 1209, 1210, 1271, 1329], "non": [10, 11, 43, 45, 46, 52, 57, 72, 73, 134, 141, 165, 191, 198, 234, 246, 262, 268, 269, 273, 293, 294, 297, 299, 304, 305, 330, 382, 399, 400, 404, 409, 413, 414, 427, 453, 490, 506, 560, 568, 569, 575, 610, 611, 624, 625, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 669, 676, 685, 690, 691, 692, 712, 714, 719, 726, 727, 737, 739, 747, 748, 749, 750, 752, 754, 758, 765, 784, 786, 789, 796, 797, 798, 802, 804, 820, 836, 845, 874, 883, 885, 886, 889, 897, 900, 901, 904, 905, 934, 940, 1002, 1007, 1016, 1021, 1022, 1029, 1034, 1064, 1117, 1174, 1182, 1198, 1209, 1210, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1233, 1248, 1255, 1264, 1269, 1270, 1291, 1293, 1310, 1314, 1329, 1349, 1357], "non_exist": [453, 1064], "non_numer": [43, 52, 330, 934], "none": [1, 2, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 66, 69, 72, 73, 74, 75, 76, 84, 88, 97, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 186, 187, 193, 198, 199, 203, 204, 210, 211, 212, 214, 216, 219, 221, 222, 227, 231, 235, 236, 238, 240, 243, 246, 251, 252, 255, 262, 263, 266, 270, 273, 275, 276, 282, 283, 285, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 311, 315, 330, 342, 344, 345, 357, 358, 359, 366, 367, 379, 382, 402, 404, 405, 406, 409, 413, 414, 415, 418, 420, 425, 426, 434, 449, 452, 453, 459, 474, 475, 476, 477, 478, 479, 482, 483, 484, 490, 497, 498, 500, 502, 504, 505, 506, 513, 514, 515, 516, 521, 523, 524, 531, 537, 539, 541, 548, 549, 550, 551, 552, 554, 560, 568, 569, 580, 583, 584, 585, 587, 592, 605, 606, 607, 608, 610, 611, 617, 620, 621, 624, 625, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 651, 654, 655, 656, 657, 661, 662, 666, 667, 669, 671, 672, 673, 676, 679, 681, 682, 683, 684, 685, 686, 688, 689, 694, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 709, 711, 714, 715, 716, 717, 718, 725, 732, 737, 738, 739, 741, 747, 748, 749, 750, 751, 752, 754, 758, 760, 761, 762, 763, 764, 765, 767, 768, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 789, 795, 796, 797, 802, 804, 806, 807, 808, 810, 820, 839, 840, 842, 845, 846, 849, 850, 852, 854, 855, 856, 860, 863, 864, 865, 868, 870, 874, 877, 883, 887, 889, 890, 891, 892, 898, 899, 900, 901, 906, 909, 912, 916, 917, 926, 927, 934, 939, 940, 942, 943, 947, 948, 950, 957, 958, 962, 963, 970, 971, 983, 993, 998, 1001, 1004, 1007, 1008, 1009, 1015, 1016, 1021, 1022, 1028, 1029, 1031, 1032, 1033, 1041, 1048, 1049, 1050, 1054, 1063, 1064, 1070, 1084, 1086, 1089, 1090, 1091, 1092, 1096, 1097, 1098, 1100, 1108, 1110, 1112, 1114, 1115, 1116, 1117, 1127, 1128, 1131, 1132, 1133, 1135, 1137, 1138, 1141, 1145, 1151, 1153, 1155, 1162, 1163, 1164, 1165, 1166, 1168, 1174, 1182, 1183, 1184, 1185, 1186, 1194, 1197, 1203, 1204, 1205, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1227, 1228, 1229, 1230, 1233, 1236, 1237, 1240, 1241, 1244, 1245, 1246, 1248, 1250, 1251, 1252, 1255, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1283, 1284, 1285, 1286, 1288, 1290, 1293, 1296, 1304, 1306, 1307, 1308, 1310, 1311, 1312, 1318, 1319, 1329, 1338, 1340, 1341, 1342, 1344, 1347, 1349, 1353, 1357], "nonexist": [453, 1064], "nor": [149, 155, 266, 330], "normal": [45, 140, 221, 330, 472, 518, 660, 732, 820, 860, 934, 1084, 1132, 1240, 1318, 1329, 1350], "normalised_scor": 146, "norowsreturnederror": [263, 330], "north": 75, "not_": [304, 330, 820, 904, 934, 940, 1329], "not_c": [304, 330, 904, 934], "notabl": 146, "notat": [17, 46, 330], "note": [10, 16, 26, 45, 46, 51, 56, 57, 64, 65, 71, 72, 74, 89, 96, 97, 129, 130, 131, 133, 135, 136, 140, 144, 146, 147, 148, 149, 153, 154, 155, 158, 159, 160, 162, 164, 167, 169, 172, 174, 178, 180, 184, 188, 195, 197, 199, 200, 203, 210, 212, 221, 222, 231, 232, 233, 235, 236, 240, 247, 251, 254, 255, 259, 262, 263, 264, 265, 270, 273, 277, 284, 287, 289, 292, 294, 295, 297, 299, 300, 304, 306, 307, 330, 374, 387, 402, 404, 405, 406, 409, 417, 418, 422, 425, 426, 432, 446, 447, 449, 454, 459, 467, 476, 483, 489, 491, 498, 506, 513, 514, 532, 535, 553, 560, 569, 583, 584, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 654, 656, 660, 666, 667, 668, 674, 675, 676, 677, 678, 679, 680, 681, 685, 686, 690, 691, 692, 694, 699, 700, 701, 704, 705, 712, 714, 715, 721, 728, 737, 739, 746, 755, 760, 761, 763, 764, 765, 769, 779, 780, 792, 794, 795, 799, 807, 808, 810, 811, 816, 820, 831, 842, 846, 847, 849, 854, 856, 860, 865, 875, 881, 883, 887, 889, 890, 892, 893, 898, 900, 901, 904, 907, 908, 934, 938, 940, 978, 990, 1007, 1008, 1016, 1025, 1026, 1029, 1032, 1033, 1039, 1057, 1058, 1060, 1065, 1070, 1078, 1090, 1097, 1110, 1117, 1146, 1149, 1167, 1182, 1209, 1210, 1214, 1221, 1228, 1230, 1233, 1235, 1240, 1245, 1246, 1247, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1264, 1265, 1269, 1270, 1271, 1273, 1278, 1279, 1280, 1283, 1284, 1291, 1293, 1300, 1311, 1313, 1329, 1338, 1339, 1343, 1344, 1355, 1357], "noth": [26, 675, 684, 1254, 1263], "notic": [146, 212, 330, 856, 934, 1329], "notimplementederror": 188, "now": [57, 149, 262, 288, 330, 577, 883, 934, 1310, 1329], "np": [133, 186, 212, 288, 330, 492, 568, 652, 820, 856, 934, 942, 1103, 1120, 1123, 1125, 1126, 1228, 1229, 1329], "npt": [186, 942], "nr": [313, 324, 914, 925], "nth": [215, 330, 493, 697, 816, 820, 858, 934, 1104, 1276, 1329], "nthe": [675, 1254], "nthose": [675, 1254], "nu": 672, "null": [22, 43, 45, 51, 52, 55, 57, 65, 72, 131, 132, 135, 140, 144, 145, 154, 156, 158, 162, 163, 164, 171, 174, 178, 188, 191, 192, 193, 198, 199, 203, 204, 206, 211, 212, 214, 227, 235, 243, 244, 245, 252, 255, 257, 273, 276, 278, 279, 280, 283, 288, 289, 293, 296, 299, 301, 304, 311, 330, 342, 344, 345, 355, 358, 359, 366, 367, 374, 375, 382, 384, 387, 399, 400, 401, 402, 404, 405, 406, 409, 413, 414, 415, 418, 423, 425, 426, 449, 452, 453, 460, 461, 462, 463, 464, 465, 466, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 490, 497, 502, 504, 505, 513, 514, 515, 516, 521, 523, 524, 530, 531, 534, 535, 537, 539, 540, 541, 549, 550, 551, 552, 553, 555, 560, 568, 569, 592, 605, 606, 607, 608, 610, 611, 621, 625, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 654, 655, 657, 662, 663, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 685, 686, 688, 689, 694, 696, 697, 698, 704, 705, 707, 709, 714, 715, 716, 717, 718, 725, 726, 727, 736, 737, 738, 739, 744, 747, 748, 749, 750, 752, 754, 758, 762, 767, 778, 780, 784, 786, 789, 796, 797, 802, 804, 810, 820, 836, 839, 845, 846, 849, 850, 855, 856, 863, 864, 877, 889, 892, 897, 899, 901, 904, 906, 912, 934, 940, 947, 948, 959, 962, 963, 970, 971, 978, 979, 987, 990, 1002, 1003, 1004, 1007, 1008, 1009, 1015, 1016, 1021, 1022, 1030, 1032, 1033, 1063, 1064, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1086, 1087, 1089, 1090, 1091, 1092, 1096, 1098, 1099, 1108, 1109, 1114, 1115, 1116, 1127, 1128, 1129, 1135, 1137, 1138, 1141, 1144, 1145, 1148, 1149, 1151, 1153, 1154, 1155, 1164, 1166, 1167, 1169, 1174, 1182, 1194, 1197, 1198, 1210, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1233, 1237, 1242, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1273, 1275, 1276, 1277, 1283, 1284, 1286, 1288, 1293, 1296, 1307, 1310, 1311, 1312, 1314, 1329, 1341, 1345, 1347, 1349, 1353, 1355, 1357, 1358, 1360], "null_behavior": [423, 530, 820, 1030, 1144, 1329], "null_count": [51, 55, 199, 204, 330, 419, 820, 846, 934, 1027, 1029, 1329], "null_equ": [206, 330, 1087, 1329], "null_on_oob": [366, 535, 537, 970, 1149, 1151], "null_prob": [171, 174, 178], "null_valu": [43, 52, 144, 145, 158, 330, 934], "nullabl": [45, 330], "nullbehavior": [423, 530, 820, 1030, 1144, 1329], "nullif": 1350, "nulls_last": [276, 330, 355, 375, 555, 610, 662, 663, 744, 820, 892, 934, 959, 979, 1129, 1169, 1242, 1329], "num": [19, 46, 291, 330, 506, 820, 1117, 1329], "num_row": 188, "num_sampl": 779, "number": [7, 16, 17, 18, 19, 20, 23, 31, 43, 44, 46, 47, 51, 52, 53, 54, 55, 56, 57, 71, 72, 73, 89, 97, 118, 129, 131, 132, 133, 135, 138, 140, 144, 145, 146, 147, 149, 153, 154, 155, 156, 158, 161, 162, 163, 165, 172, 174, 177, 179, 180, 181, 191, 193, 198, 207, 208, 210, 211, 219, 223, 224, 233, 234, 239, 250, 251, 262, 266, 273, 278, 281, 293, 298, 301, 303, 311, 313, 315, 324, 330, 356, 372, 374, 379, 382, 391, 392, 393, 394, 396, 397, 399, 400, 405, 413, 419, 420, 423, 427, 430, 438, 440, 442, 444, 445, 455, 468, 469, 471, 475, 476, 477, 478, 482, 483, 484, 490, 499, 513, 514, 521, 522, 530, 538, 541, 546, 548, 553, 556, 558, 560, 562, 610, 614, 617, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 656, 665, 681, 683, 685, 686, 690, 694, 696, 697, 705, 708, 722, 726, 727, 733, 746, 751, 752, 753, 765, 773, 778, 779, 796, 797, 801, 805, 809, 820, 836, 839, 845, 853, 854, 855, 861, 869, 879, 889, 894, 896, 897, 902, 903, 912, 914, 916, 925, 934, 939, 976, 978, 983, 994, 995, 996, 997, 999, 1000, 1002, 1008, 1015, 1021, 1027, 1028, 1030, 1034, 1037, 1045, 1047, 1052, 1055, 1056, 1066, 1079, 1080, 1082, 1088, 1089, 1090, 1091, 1092, 1096, 1097, 1098, 1111, 1135, 1136, 1144, 1152, 1155, 1160, 1162, 1167, 1172, 1174, 1188, 1189, 1203, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1233, 1236, 1244, 1260, 1262, 1264, 1265, 1269, 1273, 1275, 1276, 1284, 1287, 1301, 1314, 1319, 1329, 1345, 1348, 1351, 1360], "number_of_two": [363, 529], "numbers_decim": 708, "numer": [16, 22, 43, 46, 52, 148, 159, 192, 201, 236, 288, 289, 297, 298, 330, 339, 387, 401, 409, 489, 506, 565, 589, 591, 615, 623, 655, 657, 677, 714, 720, 728, 779, 820, 832, 838, 848, 865, 900, 934, 940, 990, 1003, 1016, 1029, 1117, 1234, 1237, 1256, 1293, 1310, 1329, 1351, 1360], "numeric_dtyp": 1360, "numericliter": [409, 779, 820, 1016, 1329], "numpi": [103, 133, 166, 186, 197, 233, 264, 265, 284, 288, 289, 330, 568, 602, 603, 631, 820, 934, 942, 1120, 1123, 1125, 1126, 1191, 1192, 1215, 1310, 1311, 1329], "nworld": 699, "o": [150, 161, 388, 399, 400, 419, 674, 726, 727, 820, 991, 1002, 1027, 1253, 1278, 1314, 1329, 1342], "oauth": 160, "obj": 940, "object": [41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 65, 88, 106, 130, 131, 136, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 172, 174, 175, 187, 188, 195, 200, 220, 221, 236, 238, 253, 262, 265, 270, 277, 287, 288, 289, 330, 422, 583, 760, 761, 763, 764, 780, 799, 807, 808, 820, 832, 841, 847, 860, 865, 868, 883, 893, 931, 934, 940, 943, 1304, 1329, 1339, 1341, 1344, 1357, 1359], "observ": [235, 330, 420, 475, 476, 477, 478, 617, 820, 864, 934, 1028, 1089, 1090, 1091, 1092, 1203, 1329], "obtain": 560, "obvious": 717, "occur": [46, 63, 64, 104, 113, 119, 237, 330, 363, 529, 590, 620, 820, 841, 842, 852, 866, 879, 890, 934, 967, 1143, 1187, 1205, 1310, 1329], "occurr": [500, 502, 509, 512, 732, 820, 1112, 1114, 1121, 1124, 1318, 1329], "oct": 1352, "octet_length": 1350, "octob": [459, 1070, 1352], "od": [155, 832], "odbc": [44, 146, 330], "odd": 675, "odi": [678, 680, 1259], "off": [52, 53, 54, 55, 63, 64, 144, 145, 158, 235, 236, 330, 427, 746, 841, 842, 852, 864, 865, 870, 879, 934, 1034], "offer": [254, 330, 614, 820, 878, 934, 1353, 1357], "offic": [46, 330], "offset": [74, 144, 145, 150, 152, 154, 156, 158, 161, 162, 163, 215, 221, 262, 275, 306, 307, 330, 427, 428, 436, 446, 447, 449, 454, 467, 493, 536, 554, 630, 661, 679, 680, 694, 707, 820, 858, 860, 883, 891, 907, 908, 934, 1034, 1035, 1043, 1057, 1058, 1060, 1065, 1078, 1104, 1150, 1168, 1241, 1258, 1259, 1273, 1286, 1329, 1356], "offset_bi": 765, "often": [147, 184, 221, 262, 330, 363, 529, 623, 630, 820, 860, 883, 934, 967, 1143, 1344, 1357], "ok": 560, "old": [45, 259, 330, 624, 625, 820, 881, 934, 1209, 1210, 1329], "old_tabl": 1359, "older": [51, 55, 330, 934], "oldw": 700, "omit": [33, 132, 136, 149, 155, 172, 184, 251, 265, 287, 292, 330, 760, 763, 775, 776, 807, 808, 940, 1358], "onc": [144, 145, 180, 240, 264, 266, 309, 330, 548, 568, 569, 651, 702, 703, 820, 837, 910, 934, 1162, 1182, 1227, 1281, 1282, 1329, 1342], "one": [26, 43, 44, 46, 52, 57, 65, 110, 129, 131, 132, 133, 134, 135, 144, 145, 149, 153, 154, 155, 158, 162, 177, 179, 184, 192, 200, 203, 211, 212, 219, 220, 221, 233, 237, 238, 246, 255, 262, 263, 264, 270, 273, 288, 291, 297, 310, 330, 340, 374, 420, 422, 484, 485, 489, 492, 495, 497, 553, 560, 565, 583, 593, 594, 596, 598, 600, 601, 610, 629, 630, 654, 662, 675, 676, 677, 692, 715, 760, 763, 782, 800, 810, 816, 820, 838, 847, 849, 850, 855, 856, 859, 860, 866, 874, 883, 887, 889, 900, 906, 911, 934, 949, 978, 983, 1028, 1098, 1108, 1109, 1167, 1174, 1179, 1203, 1214, 1233, 1254, 1255, 1256, 1271, 1294, 1310, 1329, 1344, 1345, 1347, 1351, 1352, 1359], "one_to_mani": [235, 330, 864, 934], "one_to_on": [235, 330, 864, 934], "oneormoredatatyp": [46, 172, 330], "ones": [633, 635, 637, 639, 641, 644, 646, 648, 820, 940], "onf": [694, 1273], "onli": [1, 7, 11, 16, 19, 26, 36, 43, 44, 46, 52, 56, 57, 62, 65, 97, 139, 141, 144, 145, 146, 149, 150, 152, 154, 156, 158, 161, 162, 163, 164, 167, 168, 169, 170, 174, 178, 184, 203, 204, 209, 221, 222, 233, 236, 237, 240, 255, 262, 264, 265, 284, 286, 287, 288, 299, 300, 316, 330, 340, 342, 344, 356, 408, 409, 422, 427, 449, 457, 459, 479, 488, 498, 568, 569, 576, 577, 593, 594, 595, 596, 597, 598, 599, 600, 601, 610, 622, 668, 678, 680, 692, 730, 746, 782, 820, 844, 847, 849, 850, 851, 860, 865, 866, 883, 884, 901, 903, 917, 934, 940, 947, 948, 949, 1013, 1016, 1034, 1060, 1070, 1095, 1102, 1110, 1182, 1207, 1247, 1257, 1259, 1271, 1304, 1307, 1310, 1329, 1338, 1341, 1357, 1358, 1360], "onlin": [209, 330, 1095, 1329], "ont": [678, 680, 1257, 1259], "onto": 174, "oof": [693, 1272, 1347, 1352], "op": [26, 144, 145, 178, 259, 330, 576, 623, 820, 868, 881, 934, 1329], "opac": [330, 333, 1329, 1334], "opaqu": 917, "open": [46, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 200, 330, 422, 820, 847, 934], "openoffic": 155, "openpyxl": [149, 166], "oper": [10, 46, 56, 65, 97, 106, 109, 116, 123, 129, 131, 132, 133, 134, 135, 141, 144, 146, 194, 209, 212, 214, 220, 226, 238, 240, 247, 251, 253, 254, 255, 258, 260, 262, 265, 266, 271, 273, 282, 288, 289, 294, 297, 298, 308, 309, 330, 339, 340, 343, 374, 414, 415, 416, 417, 418, 419, 473, 474, 489, 491, 494, 496, 520, 548, 549, 550, 551, 552, 553, 560, 567, 586, 589, 591, 592, 593, 594, 596, 598, 600, 601, 604, 605, 606, 609, 610, 615, 622, 651, 654, 720, 728, 735, 736, 738, 749, 750, 754, 766, 799, 810, 820, 832, 840, 844, 846, 851, 856, 859, 864, 874, 875, 884, 888, 889, 893, 900, 903, 910, 934, 978, 1017, 1022, 1023, 1024, 1025, 1026, 1027, 1085, 1086, 1095, 1105, 1107, 1134, 1162, 1163, 1164, 1165, 1166, 1167, 1181, 1193, 1194, 1207, 1227, 1233, 1269, 1304, 1309, 1310, 1311, 1329, 1348, 1356, 1357], "operand": [728, 820], "opp": 940, "oppos": 746, "opposit": [273, 330, 374, 553, 654, 820, 889, 934, 978, 1167, 1233, 1329], "opt": [292, 330], "optim": [52, 53, 54, 55, 63, 64, 156, 158, 161, 162, 163, 233, 238, 254, 258, 264, 295, 330, 837, 841, 842, 852, 870, 879, 890, 898, 907, 908, 917, 934, 1012, 1228, 1329], "optimis": [146, 240, 265, 316, 330, 934, 938, 1182, 1230, 1329, 1360], "optimist": 20, "option": [7, 8, 9, 10, 11, 12, 13, 36, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 73, 75, 144, 146, 147, 148, 149, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 166, 171, 172, 173, 174, 177, 178, 179, 200, 216, 221, 231, 236, 246, 270, 277, 283, 294, 297, 299, 330, 387, 422, 427, 518, 576, 577, 583, 610, 631, 632, 634, 636, 638, 640, 643, 645, 647, 660, 668, 678, 680, 692, 694, 732, 802, 810, 820, 832, 841, 847, 860, 864, 865, 874, 887, 893, 900, 901, 909, 934, 940, 990, 1034, 1132, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1240, 1247, 1257, 1259, 1271, 1273, 1306, 1318, 1329, 1347, 1352], "optional_memb": [510, 820, 1122, 1329], "or_": 820, "oracl": 147, "orang": [196, 311, 312, 314, 315, 317, 318, 320, 322, 323, 330, 400, 727, 820, 912, 913, 915, 916, 918, 919, 921, 923, 924, 1352], "order": [16, 46, 52, 53, 54, 55, 57, 63, 69, 132, 144, 146, 165, 167, 168, 169, 170, 191, 195, 196, 203, 204, 205, 212, 220, 221, 235, 237, 247, 253, 254, 255, 262, 264, 266, 267, 271, 276, 287, 288, 293, 295, 300, 330, 355, 375, 380, 399, 400, 425, 426, 485, 531, 548, 555, 561, 610, 615, 620, 630, 651, 652, 653, 662, 663, 693, 700, 701, 702, 703, 717, 726, 727, 729, 730, 732, 744, 799, 810, 820, 831, 836, 844, 849, 850, 851, 856, 859, 860, 864, 866, 874, 875, 883, 884, 888, 892, 893, 897, 898, 934, 938, 939, 940, 959, 979, 984, 1002, 1011, 1032, 1033, 1099, 1129, 1145, 1162, 1169, 1175, 1201, 1205, 1212, 1227, 1229, 1231, 1242, 1272, 1297, 1314, 1315, 1316, 1318, 1329, 1338, 1341, 1347, 1356, 1357, 1360], "order_bi": [610, 820], "ordin": [450, 620, 820, 1061, 1205, 1329, 1358], "ordinal_dai": [435, 469], "org": [26, 47, 48, 130, 146, 147, 150, 152, 186, 187, 188, 197, 330, 584, 687, 890, 934, 942, 943, 1266], "orient": [58, 60, 104, 133, 135, 251, 330, 934, 1338], "origin": [57, 144, 145, 158, 203, 204, 212, 295, 330, 425, 426, 453, 454, 467, 485, 531, 569, 593, 610, 622, 623, 624, 625, 626, 628, 669, 675, 684, 742, 743, 820, 849, 850, 856, 898, 934, 1032, 1033, 1064, 1065, 1078, 1099, 1145, 1209, 1210, 1211, 1213, 1248, 1254, 1263, 1329], "orjson": 140, "orld": 1279, "orson": 140, "other": [1, 26, 42, 46, 51, 64, 65, 143, 144, 145, 146, 149, 158, 163, 167, 168, 169, 170, 204, 206, 209, 212, 235, 236, 237, 246, 247, 255, 263, 265, 268, 269, 292, 297, 299, 302, 304, 305, 328, 330, 333, 339, 343, 345, 355, 356, 409, 424, 459, 473, 474, 485, 489, 494, 496, 506, 510, 520, 527, 549, 550, 551, 552, 567, 573, 579, 589, 591, 604, 605, 609, 624, 625, 656, 663, 692, 719, 720, 725, 728, 735, 737, 739, 744, 747, 748, 749, 750, 758, 765, 784, 786, 789, 798, 802, 804, 820, 832, 842, 856, 864, 865, 866, 874, 875, 885, 886, 900, 901, 904, 905, 906, 934, 940, 949, 1016, 1031, 1070, 1085, 1086, 1087, 1095, 1105, 1107, 1122, 1134, 1141, 1163, 1164, 1165, 1166, 1181, 1193, 1194, 1209, 1210, 1312, 1320, 1328, 1329, 1334, 1344, 1357], "other_df": [235, 330], "other_lf": [864, 934], "otherwis": [44, 146, 149, 156, 161, 173, 176, 180, 216, 240, 247, 265, 268, 287, 292, 316, 330, 379, 384, 405, 409, 420, 475, 476, 477, 478, 560, 569, 580, 610, 614, 615, 617, 622, 657, 667, 670, 674, 679, 681, 686, 690, 691, 694, 705, 732, 736, 765, 768, 777, 782, 810, 820, 875, 885, 917, 934, 939, 983, 987, 1008, 1016, 1028, 1089, 1090, 1091, 1092, 1174, 1182, 1201, 1203, 1207, 1228, 1230, 1237, 1246, 1249, 1253, 1258, 1260, 1265, 1269, 1270, 1273, 1284, 1318, 1329, 1349], "our": 189, "out": [14, 20, 44, 52, 53, 54, 55, 111, 136, 163, 166, 174, 178, 212, 262, 265, 330, 366, 384, 535, 537, 667, 670, 679, 810, 856, 883, 934, 970, 987, 1149, 1151, 1246, 1249, 1258, 1355], "outcom": [610, 820], "outer": [57, 299, 330, 901, 934], "outermost": 56, "outlin": 13, "output": [0, 14, 36, 43, 46, 47, 48, 49, 50, 51, 52, 191, 199, 233, 240, 244, 247, 253, 255, 264, 268, 270, 280, 293, 300, 304, 330, 342, 344, 367, 399, 400, 405, 420, 459, 539, 560, 568, 569, 580, 583, 594, 617, 624, 666, 682, 686, 726, 727, 732, 736, 737, 738, 739, 749, 750, 751, 779, 781, 782, 786, 804, 820, 832, 836, 846, 852, 870, 874, 875, 885, 887, 897, 904, 917, 934, 947, 948, 971, 1002, 1008, 1028, 1070, 1153, 1182, 1203, 1245, 1261, 1265, 1314, 1318, 1329], "output_path": [584, 890, 934], "outsid": [409, 820, 1016, 1329], "over": [65, 138, 139, 144, 145, 146, 149, 155, 158, 163, 174, 175, 191, 209, 232, 233, 234, 240, 247, 263, 264, 265, 277, 293, 294, 308, 316, 330, 334, 399, 400, 419, 422, 476, 484, 568, 569, 580, 582, 583, 584, 585, 586, 594, 595, 620, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 726, 727, 755, 756, 769, 781, 782, 794, 799, 820, 836, 841, 875, 893, 897, 909, 917, 931, 934, 940, 1002, 1027, 1090, 1095, 1182, 1216, 1217, 1219, 1223, 1314, 1329, 1357], "overflow": [401, 417, 418, 709, 721, 820, 838, 934, 1003, 1025, 1026, 1288, 1300, 1329], "overhead": [56, 97, 158, 161, 162, 163], "overlap": [669, 676, 678, 680, 1248, 1255, 1257, 1259], "overrid": [1, 46, 129, 131, 132, 133, 134, 135, 144, 146, 147, 149, 153, 154, 155, 162, 171, 172, 178, 180, 330, 934], "overridden": [46, 129, 131, 133, 135, 153, 154, 162, 180, 330, 934], "overview": [330, 820, 832, 934, 1329, 1356, 1360], "overwrit": [20, 44, 45, 129, 131, 132, 133, 135, 140, 144, 145, 153, 154, 158, 162, 188, 299, 330, 341, 719, 820, 901, 934], "overwrite_schema": [45, 330], "ow": 699, "own": [810, 1310, 1329, 1360], "p": [59, 254, 330, 614, 802, 820, 878, 934, 940, 1258, 1260, 1342], "p13dt14h0": 459, "p1dt42": 459, "pa": [45, 129, 164, 330, 799], "pa_tabl": 799, "pacif": [428, 1035], "pack": [251, 330], "packag": [38, 39, 40, 141, 146, 330, 334, 427, 746, 1034], "pad": [688, 689, 714, 1267, 1268, 1293], "pad_end": [689, 1268], "pad_start": [688, 714, 1267, 1293], "page": [51, 55, 150, 156, 161, 163, 330, 820, 832, 934, 1329, 1356], "pair": [129, 131, 132, 133, 135, 153, 154, 162, 259, 330, 881, 934, 1360], "pairwis": [197, 330], "panda": [44, 130, 134, 140, 166, 212, 221, 289, 295, 297, 330, 446, 447, 725, 799, 820, 856, 860, 898, 900, 934, 1057, 1058, 1311, 1312, 1329, 1339, 1341, 1357], "pandas_df": 1357, "pane": [46, 330], "panic": 112, "pap": 1260, "papa": 681, "papai": [681, 1260], "papaya": [681, 694, 705, 1260, 1273, 1284], "parallel": [63, 65, 138, 147, 156, 163, 221, 236, 238, 254, 269, 305, 330, 419, 532, 732, 810, 820, 832, 860, 864, 865, 886, 905, 917, 934, 1027, 1146, 1318, 1329], "parallelis": [240, 316, 330, 1182, 1329], "parallelstrategi": [156, 163], "param": [46, 129, 131, 132, 133, 135, 144, 145, 153, 154, 158, 162, 173, 174, 178, 263, 330, 934], "paramet": [2, 3, 5, 6, 7, 8, 9, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 84, 88, 98, 104, 113, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 188, 189, 191, 192, 193, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 231, 233, 234, 235, 236, 237, 239, 240, 244, 246, 247, 250, 251, 253, 254, 255, 257, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 313, 315, 316, 322, 324, 330, 339, 341, 342, 343, 344, 345, 355, 362, 363, 366, 367, 374, 375, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 399, 400, 401, 402, 406, 409, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 429, 431, 432, 437, 449, 452, 453, 454, 455, 456, 458, 459, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 504, 505, 506, 510, 518, 520, 522, 527, 528, 529, 530, 532, 535, 536, 537, 538, 539, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 567, 568, 569, 576, 577, 583, 584, 585, 589, 591, 594, 595, 596, 597, 598, 599, 604, 605, 609, 610, 611, 614, 615, 617, 618, 620, 622, 623, 624, 625, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 714, 715, 717, 719, 720, 722, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 820, 836, 838, 839, 841, 842, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 861, 864, 865, 866, 869, 870, 874, 875, 878, 879, 880, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 914, 916, 917, 923, 925, 934, 939, 940, 944, 946, 947, 948, 949, 959, 966, 967, 970, 971, 978, 979, 983, 984, 986, 987, 988, 989, 990, 992, 1002, 1003, 1004, 1009, 1015, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1036, 1038, 1039, 1044, 1060, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1078, 1081, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1099, 1103, 1104, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1129, 1132, 1136, 1141, 1142, 1143, 1144, 1146, 1149, 1150, 1151, 1152, 1153, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1173, 1174, 1175, 1182, 1194, 1198, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1236, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1293, 1294, 1297, 1301, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1314, 1315, 1318, 1319, 1320, 1329, 1338, 1339, 1340, 1341, 1342, 1344, 1349, 1352, 1357], "parameteris": 146, "parametr": 832, "paramount": [870, 934], "parent": [46, 76, 214, 330], "parenthes": 24, "parquet": [51, 55, 156, 157, 163, 330, 832, 934], "parquetcompress": [51, 330], "pars": [43, 52, 143, 144, 145, 147, 149, 154, 155, 156, 158, 161, 162, 163, 191, 220, 268, 269, 273, 276, 293, 304, 305, 309, 330, 400, 409, 506, 610, 624, 625, 663, 683, 692, 708, 709, 719, 727, 737, 739, 744, 747, 748, 749, 750, 758, 771, 784, 786, 789, 798, 800, 802, 804, 810, 820, 836, 859, 885, 886, 889, 892, 897, 904, 905, 910, 934, 1016, 1117, 1209, 1210, 1233, 1262, 1287, 1288, 1329, 1338], "parseerror": [709, 1288], "parser": [144, 149], "part": [129, 149, 184, 189, 287, 292, 330, 610, 676, 696, 697, 820, 852, 879, 890, 906, 934, 944, 1255, 1275, 1276, 1353], "parti": [568, 820], "partial": [132, 144, 158, 330, 934], "particip": [46, 330], "particular": [45, 144, 149, 150, 152, 191, 207, 293, 330, 399, 400, 726, 727, 820, 836, 897, 934, 1002, 1088, 1314, 1329], "partit": [51, 147, 156, 159, 161, 163, 164, 234, 253, 330, 610, 820], "partition_bi": [51, 145, 234, 330, 610, 820], "partition_chunk_size_byt": [51, 330], "partition_col": [51, 147, 330], "partition_df": 145, "partition_num": 147, "partition_on": 147, "partition_rang": 147, "partitioned_object": [51, 330], "pass": [38, 39, 40, 42, 44, 45, 46, 51, 57, 104, 131, 140, 141, 143, 146, 147, 149, 156, 158, 161, 164, 167, 169, 172, 174, 176, 178, 191, 197, 201, 220, 221, 223, 236, 239, 253, 254, 255, 259, 262, 268, 273, 276, 281, 289, 292, 293, 300, 304, 309, 330, 374, 400, 427, 437, 449, 453, 459, 482, 503, 553, 568, 569, 584, 610, 614, 624, 625, 630, 654, 663, 692, 699, 700, 701, 727, 736, 744, 746, 771, 802, 810, 816, 820, 836, 848, 859, 860, 862, 865, 870, 878, 881, 883, 885, 889, 890, 892, 897, 904, 909, 910, 917, 934, 939, 978, 1034, 1044, 1064, 1070, 1096, 1111, 1136, 1167, 1182, 1209, 1210, 1233, 1271, 1278, 1279, 1280, 1301, 1311, 1329, 1342, 1357], "pass_nam": [569, 820], "pass_name_to_appli": [141, 820], "password": [144, 147, 150, 152], "past": [42, 330, 870, 934], "pat": [679, 1258], "patch": 75, "path": [9, 12, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 200, 270, 330, 422, 583, 584, 587, 653, 820, 847, 887, 890, 934, 938, 1231, 1263, 1329, 1360], "pathlib": [41, 43, 47, 48, 51, 158, 330], "pattern": [100, 144, 145, 149, 158, 161, 162, 163, 233, 330, 402, 406, 578, 667, 668, 669, 672, 675, 676, 677, 678, 679, 680, 690, 691, 692, 698, 917, 940, 1004, 1009, 1228, 1230, 1246, 1247, 1248, 1251, 1254, 1255, 1256, 1257, 1258, 1259, 1269, 1270, 1271, 1277, 1329, 1352], "paya": 705, "pct": 174, "pct_chang": [820, 1329], "pd": [130, 134, 725, 799, 820, 1311, 1312, 1329, 1339, 1357], "pd_df": 134, "pd_frame": 799, "pd_seri": 134, "pdsh": [138, 145], "pea": 681, "peak": [264, 330, 612, 613, 820, 1199, 1200, 1329], "peak_max": [820, 1329], "peak_min": [820, 1329], "pear": [681, 694, 705, 1260, 1273, 1284], "pearson": [197, 330, 518, 660, 751, 820, 1132, 1240, 1329], "penalti": [704, 706, 707, 1283, 1285, 1286], "per": [20, 43, 46, 52, 141, 149, 172, 174, 191, 219, 251, 252, 255, 269, 276, 293, 305, 319, 321, 322, 330, 366, 400, 532, 535, 537, 568, 569, 593, 594, 596, 598, 600, 601, 663, 727, 732, 744, 820, 836, 886, 892, 897, 905, 920, 922, 923, 934, 970, 1146, 1149, 1151, 1318, 1329], "percent": [611, 820, 1198, 1329], "percentag": [171, 174, 178, 611, 820, 1198, 1329], "percentil": [199, 330, 846, 934, 1029, 1329], "perform": [44, 51, 53, 55, 57, 102, 107, 109, 114, 116, 123, 130, 144, 145, 146, 150, 154, 156, 158, 161, 162, 163, 188, 212, 220, 221, 235, 236, 237, 240, 258, 262, 264, 265, 288, 316, 330, 390, 395, 398, 404, 405, 489, 560, 568, 569, 610, 630, 668, 678, 680, 685, 686, 692, 704, 706, 707, 820, 856, 860, 864, 865, 866, 883, 892, 907, 908, 934, 993, 998, 1001, 1007, 1008, 1182, 1247, 1257, 1259, 1264, 1265, 1271, 1283, 1285, 1286, 1310, 1329], "perhap": [294, 330], "period": [144, 145, 158, 221, 262, 330, 454, 467, 475, 477, 478, 611, 630, 760, 761, 763, 764, 807, 808, 820, 860, 883, 934, 1065, 1078, 1089, 1091, 1092, 1198, 1329], "persist": 1344, "phase": [44, 298, 330], "philadelphia": [690, 691], "phone": [712, 1291], "physic": [56, 69, 97, 144, 145, 236, 255, 330, 725, 820, 837, 864, 865, 934, 1010, 1312, 1329], "pi": [16, 421, 820, 1018, 1020, 1238, 1302, 1329, 1350, 1354], "pick": [175, 810], "pickl": [422, 820, 847, 934], "pip": [427, 746, 1034], "pipe": [330, 820, 934], "pipelin": [149, 292, 330], "pitfal": 114, "pivot": [298, 330, 940], "pivot_long": [297, 330, 900, 934], "pivot_wid": [255, 330], "pivotagg": [255, 330], "pixel": [46, 330], "pk": [472, 820, 1084, 1329], "pl": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 101, 104, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 180, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 820, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 939, 940, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1104, 1106, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1329, 1334, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1358, 1360], "pl_frame": 799, "place": [16, 17, 43, 52, 184, 202, 209, 225, 226, 255, 260, 265, 276, 302, 330, 334, 355, 367, 375, 539, 555, 662, 663, 744, 820, 892, 934, 949, 959, 971, 979, 1095, 1153, 1169, 1206, 1242, 1329], "placehold": 770, "plai": [18, 750], "plain": [852, 934], "plan": [236, 238, 330, 422, 820, 837, 841, 847, 852, 864, 865, 887, 890, 934, 1359], "plane": [742, 743], "platform": 166, "ple": 1352, "pleas": [134, 146, 147, 212, 221, 246, 330, 334, 476, 752, 765, 820, 856, 860, 874, 934, 1090, 1329], "plenti": 940, "plot": [330, 879, 890, 934, 1329], "plu": [420, 565, 820, 1028, 1179, 1203, 1329, 1351], "plugin": [0, 820, 832], "plugin_path": 141, "point": [2, 3, 4, 5, 6, 7, 16, 17, 37, 38, 39, 40, 43, 45, 46, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 77, 78, 79, 139, 140, 148, 154, 156, 158, 159, 161, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 203, 210, 221, 237, 238, 277, 287, 292, 299, 330, 333, 334, 408, 419, 420, 425, 454, 455, 483, 488, 489, 500, 513, 514, 548, 569, 617, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 649, 651, 748, 779, 820, 841, 842, 849, 852, 854, 860, 866, 870, 881, 893, 901, 934, 1011, 1013, 1027, 1028, 1032, 1065, 1066, 1097, 1102, 1112, 1162, 1203, 1215, 1218, 1220, 1221, 1225, 1227, 1308, 1313, 1329, 1334, 1357], "poison": [602, 603, 820, 1191, 1192, 1329], "pola": 330, "polar": [1, 330, 333, 334, 819, 820, 826, 832, 934, 938, 939, 940, 1329, 1333, 1334, 1356, 1357, 1359], "polars_df": 1357, "polars_file_cache_ttl": [154, 158, 161, 162], "polars_hypothesis_profil": [177, 179], "polars_max_thread": 180, "polars_seri": 1357, "polars_verbos": [841, 934], "polarsdatafram": 188, "polarsdataset": [292, 330], "polarsdatatyp": [66, 76, 84, 144, 145, 158, 171, 172, 173, 174, 175, 178, 192, 240, 287, 292, 330, 387, 401, 479, 568, 569, 624, 625, 683, 767, 780, 781, 782, 792, 795, 811, 816, 820, 838, 934, 940, 990, 1003, 1182, 1209, 1210, 1262, 1329], "polarsintegertyp": [741, 775, 776], "polarstemporaltyp": [704, 1283], "polarstyp": 65, "pool": [20, 64, 180, 181, 842, 934], "poor": 146, "pop2": [236, 330, 865, 934], "popul": [236, 330, 865, 934], "port": [44, 144, 146, 147, 150, 152, 330], "portion": 1352, "pos_a": 1352, "posit": [46, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 189, 201, 208, 220, 253, 268, 269, 273, 276, 296, 304, 305, 309, 330, 374, 475, 477, 478, 479, 553, 610, 615, 617, 654, 663, 677, 690, 691, 709, 719, 742, 743, 744, 747, 748, 749, 750, 767, 798, 802, 816, 820, 848, 853, 859, 885, 886, 889, 892, 899, 904, 905, 910, 934, 940, 978, 1089, 1091, 1092, 1167, 1201, 1203, 1233, 1256, 1288, 1329, 1358], "position": 1329, "possibl": [46, 51, 55, 104, 106, 131, 132, 135, 144, 149, 171, 174, 178, 220, 233, 240, 264, 295, 316, 330, 566, 569, 580, 631, 697, 731, 820, 841, 859, 892, 898, 934, 1182, 1215, 1276, 1329], "post": [57, 75], "postgresql": [44, 146, 147, 330, 610, 820, 1355], "potenti": [114, 116, 141, 158, 161, 162, 233, 263, 265, 330, 593, 690, 691, 844, 846, 851, 884, 903, 934, 1269, 1270], "pow": [820, 1329, 1350], "pow_n": 59, "power": [800, 1201, 1329, 1351], "powersofn": 59, "pre": [560, 569, 617, 792, 795, 811, 820, 1203, 1329], "preced": [174, 940], "precis": [16, 17, 43, 46, 52, 73, 146, 233, 264, 265, 284, 287, 292, 330, 429, 708, 779, 934, 940, 1036, 1287], "predefin": [255, 330], "predic": [45, 52, 53, 54, 55, 63, 64, 139, 158, 161, 162, 163, 164, 192, 212, 231, 236, 237, 263, 330, 401, 485, 734, 769, 810, 820, 841, 842, 852, 856, 865, 866, 870, 879, 881, 890, 907, 908, 934, 1099, 1228, 1230, 1329], "predicate_pushdown": [52, 53, 54, 55, 63, 64, 841, 842, 852, 870, 879, 890, 934], "predict": [258, 300, 330], "prefer": [144, 145, 149, 158, 179, 191, 209, 233, 240, 263, 264, 293, 316, 330, 399, 400, 479, 569, 726, 727, 820, 836, 897, 934, 938, 1002, 1095, 1182, 1314, 1329, 1339, 1360], "prefilt": 163, "prefix": [45, 144, 145, 158, 184, 330, 341, 389, 406, 459, 578, 594, 597, 598, 600, 601, 698, 701, 702, 714, 820, 940, 992, 1009, 1277, 1281, 1293], "prefix_": 597, "prefix_a": 597, "prefix_b": 597, "prefix_field": [595, 599], "presenc": [768, 777, 940], "present": [132, 174, 216, 330, 510, 584, 700, 701, 820, 890, 934], "preserv": [203, 204, 212, 220, 235, 237, 240, 288, 289, 330, 425, 426, 427, 446, 447, 485, 531, 610, 624, 657, 674, 820, 849, 850, 856, 864, 866, 934, 1032, 1033, 1034, 1099, 1145, 1209, 1237, 1253, 1311, 1329], "pressur": [55, 144, 145, 154, 156, 158, 162, 163, 655, 820, 934, 1234, 1329], "presum": [568, 820], "prev_pow2": 59, "prevent": [288, 330, 341, 417, 418, 593, 721, 820, 934, 1025, 1026, 1300, 1329], "preview": [219, 330], "previou": [59, 184, 330, 333, 427, 593, 594, 596, 598, 600, 601, 611, 717, 820, 1034, 1198, 1329, 1334], "previous": [8, 9], "price": [330, 333, 1360], "primari": [149, 938, 1357, 1360], "primarili": 1, "primit": [45, 330, 510, 820], "print": [15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 31, 33, 34, 145, 166, 167, 169, 205, 219, 220, 234, 238, 286, 308, 330, 503, 585, 760, 763, 820, 841, 862, 934, 940, 1122, 1307, 1329, 1360], "prior": [134, 330, 333, 1329, 1334], "prioriti": 175, "probabl": [472, 617, 820, 1084, 1203, 1329], "process": [20, 43, 52, 53, 54, 55, 63, 64, 144, 145, 146, 158, 180, 264, 330, 841, 842, 934], "process_index": [287, 330], "produc": [8, 9, 139, 174, 178, 192, 235, 330, 363, 401, 529, 580, 779, 781, 820, 864, 870, 934, 967, 1143], "product": [57, 197, 235, 330, 417, 424, 820, 864, 934, 1025, 1031, 1329], "profil": [38, 177, 179, 841, 934], "profile_nam": 38, "programmat": [199, 330, 846, 934], "progress": [73, 75, 79], "project": [52, 53, 54, 55, 63, 64, 139, 158, 160, 161, 162, 163, 662, 663, 820, 841, 842, 852, 870, 879, 881, 890, 934], "projection_pushdown": [52, 53, 54, 55, 63, 64, 841, 842, 852, 870, 879, 890, 934], "prompt": 136, "propag": [367, 474, 539, 602, 603, 605, 666, 682, 749, 750, 820, 971, 1086, 1153, 1191, 1192, 1194, 1245, 1261, 1329], "propagate_nan": 751, "proper": [237, 330, 866, 934], "properti": [45, 46, 188, 195, 196, 205, 213, 224, 267, 272, 303, 307, 330, 333, 334, 843, 844, 851, 884, 903, 908, 934, 939, 940, 1083, 1101, 1190, 1232, 1329, 1334, 1360], "proport": [732, 820, 1318, 1329], "protocol": [45, 130, 146, 147, 188, 330], "prototyp": 816, "provid": [7, 37, 38, 39, 40, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 144, 145, 147, 148, 149, 154, 156, 158, 159, 160, 161, 162, 163, 174, 178, 212, 216, 231, 277, 287, 330, 333, 384, 385, 459, 479, 500, 560, 568, 569, 670, 671, 675, 683, 684, 700, 701, 702, 703, 771, 802, 820, 832, 841, 856, 893, 909, 931, 934, 987, 988, 1070, 1112, 1131, 1182, 1249, 1250, 1254, 1262, 1263, 1308, 1329, 1342, 1349, 1352, 1357, 1360], "provis": 833, "prune": [156, 161, 163, 870, 934], "pt0": 459, "public": [147, 330, 820, 832, 934, 1329, 1356], "pulp": 1338, "pure": [46, 330], "purpos": [592, 820, 934], "push": [158, 161, 162, 163, 164, 192, 330, 401, 820], "pushdown": [52, 53, 54, 55, 63, 64, 139, 841, 842, 852, 870, 879, 881, 890, 907, 908, 934, 1228, 1230, 1329], "put": [43, 52, 75, 330, 334, 934], "pwd": 146, "py": 160, "pyarrow": [45, 51, 129, 134, 144, 147, 148, 150, 152, 156, 159, 164, 166, 282, 288, 289, 330, 799, 832, 1304, 1310, 1311, 1329, 1339, 1341, 1357], "pyarrow_opt": [51, 148, 156, 159, 330], "pyarrow_t": 1357, "pycapsul": [187, 943], "pycapsuleinterfac": [187, 943], "pydant": 166, "pyiceberg": [160, 166], "pyodbc": [44, 330], "pyodbc_uri": [44, 330], "pyspark": 180, "pytest": [167, 169], "python": [0, 38, 39, 40, 47, 48, 75, 86, 100, 130, 144, 145, 150, 152, 166, 167, 169, 188, 233, 240, 264, 265, 284, 316, 330, 422, 427, 431, 489, 568, 569, 677, 746, 760, 761, 763, 764, 807, 808, 810, 820, 826, 847, 917, 934, 938, 939, 1034, 1038, 1048, 1049, 1050, 1054, 1182, 1256, 1309, 1329, 1333, 1356], "pythondatatyp": [66, 84, 192, 330, 816, 838, 934, 940], "pythonliter": [950, 993, 998, 1001, 1100, 1133, 1183, 1184, 1185, 1186, 1228, 1329], "pytorch": [292, 330, 1313, 1329], "q": [265, 330, 802, 1329, 1334, 1342], "q1": [46, 330], "q2": [46, 330], "q3": [46, 330], "q4": [46, 330], "qcut": [420, 820, 1028, 1329], "qhoo": 1360, "qmark": 146, "qqr": 940, "quad": [476, 820, 1090, 1329], "qualifi": [44, 330], "quantifi": [676, 1255], "quantil": [330, 617, 640, 641, 820, 934, 1203, 1220, 1329, 1346], "quantile_cont": 1350, "quantile_disc": 1350, "quarter": [221, 236, 262, 300, 330, 449, 454, 467, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078, 1353], "queri": [52, 53, 54, 55, 63, 64, 146, 147, 150, 158, 161, 162, 163, 209, 238, 254, 277, 330, 560, 568, 569, 684, 799, 820, 841, 842, 852, 879, 890, 893, 907, 908, 909, 917, 926, 934, 1095, 1182, 1263, 1329, 1338, 1339, 1341, 1345, 1356, 1358, 1359], "quick": [816, 1029, 1329, 1360], "quit": [236, 330, 865, 934], "quot": [43, 44, 52, 144, 145, 147, 158, 330, 712, 934, 1291], "quota_project_id": 40, "quote_char": [43, 52, 144, 145, 158, 330, 934], "quote_plu": 147, "quote_styl": [43, 52, 330, 934], "quotes_titl": 712, "quotient": 1351, "r": [144, 145, 158, 330, 575, 614, 669, 674, 675, 676, 677, 690, 691, 820, 940, 1248, 1253, 1254, 1255, 1256, 1269, 1270, 1284, 1342, 1352], "r1": 65, "r2": 65, "r3": 65, "rab": [667, 693, 1246, 1272, 1347], "rad": 1354, "radian": [421, 742, 820, 1350], "radix": [709, 1288], "rai": [742, 743], "raini": [690, 691, 1269, 1270], "rais": [1, 21, 22, 26, 45, 65, 101, 102, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 144, 145, 149, 155, 156, 158, 163, 167, 169, 188, 192, 216, 236, 255, 263, 288, 330, 366, 384, 401, 427, 452, 453, 535, 537, 580, 615, 617, 625, 667, 670, 679, 704, 706, 707, 709, 711, 762, 780, 820, 865, 909, 934, 970, 987, 1034, 1063, 1064, 1149, 1151, 1201, 1203, 1210, 1246, 1249, 1258, 1283, 1285, 1286, 1288, 1290, 1310, 1329], "raise_if_empti": [144, 145, 149, 155, 158], "raise_if_undetermin": 580, "raise_on_fail": 909, "raker": 140, "ram": [52, 53, 54, 55, 934], "ran": [141, 820], "random": [46, 47, 150, 165, 172, 222, 266, 330, 498, 548, 620, 651, 656, 732, 820, 832, 1110, 1162, 1205, 1227, 1236, 1318, 1329], "randomli": 173, "rang": [23, 46, 146, 147, 199, 207, 221, 234, 330, 346, 421, 427, 435, 445, 450, 451, 452, 454, 467, 468, 504, 741, 746, 749, 759, 760, 761, 762, 763, 764, 775, 776, 779, 806, 807, 808, 820, 846, 860, 934, 940, 1029, 1034, 1042, 1056, 1061, 1062, 1063, 1065, 1078, 1079, 1088, 1198, 1329, 1352], "rank": [355, 532, 744, 751, 766, 820, 959, 1146, 1329], "rankmethod": [620, 820, 1205, 1329], "rare": [428, 1035], "rather": [236, 330, 491, 568, 585, 617, 629, 714, 820, 865, 934, 1203, 1214, 1293, 1329], "raw": 147, "raw_output": [584, 890, 934], "re": [216, 221, 232, 295, 297, 330, 446, 447, 456, 459, 860, 898, 900, 934, 1057, 1058, 1067, 1070, 1357], "reach": [688, 689, 714, 1267, 1268, 1293], "read": [7, 42, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 200, 209, 330, 333, 422, 491, 810, 820, 847, 934, 1095, 1329, 1334], "read_arrow_batches_from_odbc": 146, "read_clipboard": [42, 330], "read_csv": [143, 149, 158], "read_csv_batch": 138, "read_databas": 147, "read_database_uri": 146, "read_excel": 155, "read_ndjson": 153, "read_od": 149, "read_opt": 149, "read_parquet": 163, "read_tabl": 156, "readabl": 816, "reader": [51, 55, 138, 139, 144, 145, 150, 152, 156, 330, 934], "readi": 927, "readthedoc": [46, 330], "real": [676, 1255], "realli": [419, 668, 692, 820, 1027, 1247, 1271, 1329], "realloc": [154, 158, 161, 162, 209, 330, 1095, 1329], "rearrang": [240, 330], "reason": [180, 199, 330, 560, 568, 820, 846, 934], "receiv": [57, 146, 158, 240, 254, 316, 330, 569, 614, 820, 878, 934, 1360], "recent": [167, 168, 169, 170, 288, 330, 611, 625, 820, 1198, 1210, 1310, 1329, 1341, 1357], "rechunk": [65, 129, 134, 144, 145, 148, 150, 152, 154, 156, 158, 159, 161, 162, 163, 209, 330, 820, 1014, 1095, 1106, 1188, 1329], "recognis": [21, 22, 26, 940], "recommend": [46, 180, 199, 233, 238, 254, 330, 560, 837, 846, 934, 940], "record": [43, 48, 52, 140, 152, 164, 330, 934], "record_batch": [234, 330], "recordbatch": [129, 234, 330, 799, 1339, 1341, 1357], "recurs": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "red": [56, 96, 97, 316, 732, 820, 917, 1318, 1329], "redempt": 1338, "redshift": 147, "reduc": [55, 144, 145, 154, 156, 158, 161, 162, 163, 264, 317, 318, 320, 323, 330, 655, 756, 769, 820, 918, 919, 921, 924, 934, 1184, 1202, 1234, 1300, 1329], "reduct": [214, 330, 569, 820], "ref": [675, 677, 1254, 1256], "refer": [0, 38, 46, 100, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 197, 200, 330, 334, 422, 456, 459, 620, 675, 690, 691, 704, 706, 707, 711, 820, 847, 934, 1067, 1070, 1205, 1269, 1270, 1283, 1285, 1286, 1290, 1329], "referenc": [46, 330, 568, 690, 691, 717, 820, 1269, 1270, 1339, 1357], "reg": 140, "regard": [144, 751], "regardless": [134, 191, 220, 236, 293, 330, 400, 432, 684, 727, 810, 820, 836, 865, 897, 934, 1039, 1263], "regex": [98, 479, 575, 576, 578, 667, 669, 675, 676, 677, 679, 690, 691, 715, 767, 820, 940, 1246, 1248, 1254, 1255, 1256, 1258, 1269, 1270], "regexp_lik": 1350, "region": [46, 160, 330], "region_nam": 38, "regist": [1, 58, 59, 60, 61, 139, 141, 177, 179, 277, 330, 820, 893, 934, 938, 1338, 1339, 1341, 1342, 1343, 1344, 1357, 1359], "register_dataframe_namespac": [1, 59, 60, 61], "register_expr_namespac": [1, 58, 60, 61], "register_glob": [1340, 1342, 1344, 1357], "register_io_sourc": 938, "register_lazyframe_namespac": [1, 58, 59, 61], "register_mani": [1340, 1341, 1344], "register_plugin": 820, "register_plugin_funct": 820, "register_series_namespac": [1, 58, 59, 60], "registr": [277, 330, 799, 832, 893, 934, 1344, 1357], "regrid": [504, 820], "regular": [137, 233, 263, 264, 300, 307, 330, 479, 667, 668, 669, 673, 675, 676, 677, 678, 679, 680, 690, 691, 692, 746, 767, 816, 820, 908, 934, 940, 1246, 1247, 1248, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1269, 1270, 1271, 1355], "reinterpret": [820, 1329], "rel": [46, 147, 148, 159, 160, 167, 168, 169, 170, 330, 449, 475, 477, 478, 732, 820, 1060, 1089, 1091, 1092, 1318, 1329], "relat": [146, 184, 690, 691, 940, 1269, 1270, 1345], "releas": [64, 235, 330, 569, 820, 842, 864, 934, 1360], "release_year": 1338, "relev": 65, "reli": [235, 330, 864, 934], "reliabl": [96, 97], "remain": [144, 145, 158, 203, 204, 207, 212, 255, 330, 425, 426, 485, 531, 624, 696, 697, 820, 849, 850, 856, 870, 934, 1032, 1033, 1088, 1099, 1145, 1209, 1275, 1276, 1329, 1344], "remaind": [387, 697, 990, 1276, 1351], "remap": 99, "remot": [144, 145, 150, 152], "remov": [10, 144, 145, 158, 188, 201, 285, 330, 479, 594, 699, 700, 701, 702, 703, 767, 820, 848, 934, 1278, 1279, 1280, 1281, 1282, 1305, 1329, 1359], "removes_pronoun": 692, "renam": [1, 132, 144, 145, 181, 220, 268, 269, 304, 305, 309, 311, 330, 341, 491, 586, 587, 593, 594, 595, 596, 598, 600, 601, 717, 719, 798, 802, 820, 859, 885, 886, 904, 905, 910, 912, 934, 946, 1258, 1297, 1306, 1329, 1357], "rename_field": [696, 697, 1275, 1276], "render": [584, 890, 934], "render_as_str": 146, "reoconstruct": [265, 330], "repeat": [150, 161, 621, 623, 792, 811, 820], "repeat_bi": 820, "replac": [44, 45, 144, 145, 158, 210, 211, 260, 294, 297, 304, 305, 330, 333, 431, 453, 483, 568, 569, 625, 691, 692, 707, 820, 854, 900, 904, 905, 934, 1038, 1064, 1097, 1210, 1228, 1230, 1270, 1271, 1286, 1329, 1334, 1350], "replace_al": [625, 690, 820, 1209, 1210, 1269, 1329], "replace_column": 330, "replace_strict": [624, 820, 1209, 1329], "replace_time_zon": [428, 434, 436, 1040, 1041, 1068], "replace_with": [692, 1271], "replic": [725, 820, 1312, 1329], "report": [146, 687, 1266], "repr": [136, 402, 406, 459, 1004, 1009, 1070], "repres": [43, 46, 52, 71, 72, 74, 85, 89, 94, 129, 131, 133, 134, 135, 146, 255, 277, 278, 287, 288, 301, 308, 330, 405, 489, 513, 514, 556, 562, 568, 665, 681, 686, 690, 691, 694, 705, 733, 736, 753, 765, 767, 780, 781, 782, 791, 796, 797, 801, 809, 816, 820, 893, 894, 902, 934, 940, 1008, 1228, 1244, 1260, 1265, 1269, 1270, 1273, 1284, 1310, 1319, 1329, 1357], "represent": [16, 49, 50, 71, 72, 74, 89, 136, 270, 286, 330, 402, 404, 405, 406, 430, 435, 438, 440, 441, 442, 443, 444, 445, 448, 450, 451, 455, 468, 469, 471, 583, 725, 820, 852, 868, 887, 934, 1004, 1007, 1008, 1009, 1010, 1037, 1042, 1045, 1046, 1047, 1051, 1052, 1053, 1055, 1056, 1059, 1061, 1062, 1066, 1079, 1080, 1082, 1307, 1312, 1329, 1348], "request": 40, "requested_schema": [187, 943], "requir": [1, 38, 39, 40, 45, 46, 57, 65, 134, 146, 147, 167, 168, 169, 170, 197, 203, 263, 287, 288, 289, 292, 330, 380, 402, 406, 475, 477, 478, 561, 569, 610, 633, 635, 637, 639, 641, 644, 646, 648, 655, 704, 706, 707, 729, 795, 820, 844, 849, 850, 851, 892, 903, 934, 984, 1087, 1089, 1091, 1092, 1175, 1234, 1269, 1283, 1285, 1286, 1310, 1311, 1315, 1329], "require_al": 940, "rerais": [64, 842, 934], "rerun": [209, 330, 1095, 1329], "resampl": [221, 330, 860, 934], "reset": [10, 184], "reset_index": [134, 221, 330, 860, 934], "reshap": [255, 288, 330, 533, 748, 820, 1147, 1329], "resolv": [431, 560, 843, 844, 851, 884, 903, 934], "resourc": [909, 938], "respect": [46, 144, 158, 330, 668, 678, 680, 692, 940, 1247, 1257, 1259, 1271, 1313, 1329], "respons": [147, 247, 330, 875, 934], "rest": [712, 1291], "restor": [184, 330, 333, 1329, 1334], "restore_default": 184, "restrict": [36, 697, 1276], "result": [19, 43, 49, 50, 51, 52, 53, 54, 55, 57, 65, 133, 134, 135, 146, 147, 149, 158, 161, 163, 164, 178, 209, 212, 221, 222, 235, 236, 237, 251, 255, 262, 265, 270, 271, 273, 287, 288, 289, 300, 307, 309, 315, 330, 427, 454, 456, 459, 467, 475, 476, 477, 478, 482, 489, 498, 506, 518, 559, 560, 568, 569, 583, 610, 615, 617, 624, 625, 626, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 653, 654, 674, 691, 695, 696, 707, 728, 732, 755, 756, 760, 762, 763, 764, 765, 780, 781, 792, 795, 796, 797, 799, 811, 820, 837, 841, 846, 856, 860, 864, 865, 866, 870, 879, 883, 887, 888, 889, 908, 910, 916, 927, 928, 934, 940, 949, 1065, 1067, 1070, 1078, 1089, 1091, 1092, 1095, 1096, 1110, 1117, 1132, 1173, 1182, 1201, 1203, 1209, 1210, 1211, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1231, 1233, 1253, 1274, 1275, 1286, 1310, 1311, 1318, 1329, 1339, 1345, 1357, 1358, 1360], "resultset": 146, "retri": [7, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 161, 162, 163, 330, 934], "retriev": [2, 3, 7, 216, 287, 330, 360, 361, 525, 526, 715, 791, 964, 965, 1139, 1140, 1294, 1308, 1329, 1345], "return": [1, 7, 11, 12, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 107, 110, 118, 126, 129, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 180, 181, 186, 189, 191, 193, 196, 197, 198, 202, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 221, 223, 224, 225, 229, 231, 232, 233, 234, 235, 238, 239, 240, 242, 244, 249, 250, 251, 253, 254, 255, 259, 262, 263, 264, 265, 266, 270, 277, 280, 281, 287, 288, 289, 292, 293, 294, 295, 300, 303, 304, 305, 311, 313, 315, 316, 319, 324, 330, 342, 344, 347, 348, 349, 350, 351, 352, 355, 356, 360, 361, 362, 364, 366, 367, 378, 383, 384, 385, 386, 387, 388, 389, 399, 400, 404, 405, 410, 411, 412, 413, 414, 420, 421, 427, 428, 430, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 481, 489, 492, 493, 495, 499, 500, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 525, 526, 528, 533, 535, 537, 538, 539, 541, 548, 558, 559, 566, 568, 569, 581, 583, 584, 585, 590, 614, 617, 619, 623, 624, 625, 626, 628, 629, 651, 652, 657, 658, 659, 666, 667, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 693, 694, 695, 696, 697, 705, 709, 714, 722, 723, 724, 726, 727, 728, 730, 731, 732, 735, 736, 741, 742, 743, 744, 745, 746, 752, 754, 759, 760, 761, 762, 763, 764, 765, 768, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 792, 795, 798, 799, 802, 805, 806, 807, 808, 810, 811, 820, 836, 839, 841, 842, 844, 845, 846, 851, 852, 858, 860, 861, 864, 868, 869, 870, 878, 879, 881, 883, 887, 890, 896, 897, 898, 903, 904, 905, 912, 914, 916, 920, 925, 927, 934, 939, 940, 942, 944, 947, 948, 949, 957, 958, 960, 961, 962, 963, 964, 965, 966, 968, 970, 971, 982, 984, 986, 987, 988, 990, 991, 1002, 1006, 1007, 1008, 1015, 1021, 1022, 1028, 1029, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1088, 1090, 1094, 1095, 1100, 1104, 1111, 1112, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1147, 1149, 1151, 1152, 1153, 1155, 1162, 1172, 1173, 1180, 1182, 1187, 1196, 1203, 1209, 1210, 1211, 1212, 1213, 1214, 1227, 1229, 1237, 1245, 1246, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1272, 1273, 1274, 1275, 1276, 1284, 1288, 1293, 1301, 1304, 1311, 1314, 1316, 1317, 1318, 1320, 1329, 1338, 1339, 1343, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1355, 1357, 1358, 1359, 1360], "return_as_str": [219, 330, 585], "return_dtyp": [46, 240, 330, 568, 569, 624, 625, 735, 781, 782, 820, 1182, 1209, 1210, 1329], "return_typ": [287, 292, 330], "returns_scalar": [141, 568, 569, 782, 820], "reus": [63, 64, 184, 841, 842, 852, 879, 890, 934], "reusabl": 184, "rev": [237, 330, 866, 934], "revers": [191, 207, 293, 330, 400, 414, 415, 416, 417, 418, 594, 596, 598, 727, 748, 754, 820, 836, 897, 934, 1022, 1023, 1024, 1025, 1026, 1329, 1347, 1350], "reverse_": 596, "reverse_a": 596, "reverse_b": 596, "revert": [13, 15, 16], "rhap": [678, 680, 1259], "rhapsodi": [678, 680, 1259], "right": [15, 16, 21, 22, 24, 33, 46, 73, 144, 145, 167, 168, 169, 170, 221, 235, 236, 262, 299, 330, 420, 475, 476, 477, 478, 506, 549, 550, 551, 552, 617, 630, 633, 635, 637, 639, 641, 644, 646, 648, 652, 660, 747, 760, 761, 763, 764, 779, 807, 808, 820, 860, 864, 865, 883, 901, 934, 1028, 1089, 1090, 1091, 1092, 1117, 1163, 1164, 1165, 1166, 1203, 1229, 1240, 1329, 1345, 1350], "right_left": [235, 330, 864, 934], "right_on": [235, 236, 299, 330, 864, 865, 901, 934], "rightmost": [652, 820, 1229, 1329, 1352], "rld": [699, 701, 1280], "rle": [629, 820, 1214, 1329], "rle_id": [628, 820, 1329], "rle_id_a": [629, 820], "rle_id_ab": [629, 820], "rmm": 909, "rn": [144, 145, 158], "role": [38, 147], "roll": [221, 330, 427, 446, 447, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 749, 796, 797, 820, 860, 934, 1034, 1057, 1058, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1329], "rollback": [447, 1058], "rolled_forward": 427, "rollforward": [446, 1057], "rolling_map": [820, 1329], "rolling_max": [820, 1329], "rolling_max_bi": 820, "rolling_mean": [820, 1329], "rolling_mean_bi": 820, "rolling_median": [820, 1329], "rolling_median_bi": 820, "rolling_min": [820, 1329], "rolling_min_bi": 820, "rolling_quantil": [820, 1329], "rolling_quantile_bi": 820, "rolling_row_max": [633, 820], "rolling_row_mean": [635, 820], "rolling_row_median": [637, 820], "rolling_row_min": [639, 820], "rolling_row_quantil": [641, 820], "rolling_row_std": [644, 820], "rolling_row_sum": [646, 820], "rolling_row_var": [648, 820], "rolling_skew": [820, 1329], "rolling_std": [820, 1329], "rolling_std_bi": 820, "rolling_sum": [631, 820, 1215, 1329], "rolling_sum_bi": 820, "rolling_var": [820, 1329], "rolling_var_bi": 820, "rollinggroupbi": [262, 330], "rollinginterpolationmethod": [199, 257, 322, 330, 618, 640, 641, 793, 820, 846, 880, 923, 934, 1029, 1204, 1220, 1329], "ronaldo": [675, 1254], "root": [148, 159, 407, 582, 593, 594, 596, 598, 600, 601, 664, 819, 820, 1012, 1243, 1329, 1351], "rotat": [330, 333, 1329, 1334], "round": [26, 46, 59, 136, 146, 330, 408, 412, 488, 650, 723, 820, 1013, 1102, 1226, 1329, 1350], "round_sig_fig": [820, 1329], "round_str": 1065, "round_td": 1065, "rounded_corn": 26, "row": [20, 26, 31, 43, 44, 46, 51, 52, 55, 57, 58, 60, 65, 104, 110, 118, 126, 132, 133, 134, 135, 136, 139, 140, 144, 145, 146, 149, 150, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 167, 168, 174, 189, 191, 192, 193, 203, 204, 209, 212, 214, 215, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 246, 247, 251, 255, 262, 265, 266, 275, 281, 284, 286, 287, 292, 293, 295, 297, 298, 299, 306, 307, 311, 313, 315, 316, 324, 330, 334, 355, 356, 364, 379, 400, 401, 481, 489, 493, 499, 522, 533, 560, 610, 611, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 656, 661, 663, 674, 683, 722, 727, 741, 744, 750, 752, 769, 773, 775, 776, 778, 794, 796, 797, 805, 810, 820, 836, 839, 849, 850, 856, 857, 858, 860, 861, 864, 865, 866, 867, 869, 870, 874, 875, 891, 896, 897, 898, 900, 901, 907, 908, 912, 914, 916, 917, 925, 934, 944, 959, 968, 1094, 1095, 1104, 1111, 1136, 1147, 1198, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1241, 1253, 1262, 1301, 1329, 1338, 1345, 1347, 1358, 1360], "row_group": [156, 163], "row_group_s": [51, 55, 330, 934], "row_height": [46, 330], "row_index": [46, 330], "row_index_nam": [144, 145, 150, 152, 154, 156, 158, 161, 162, 163], "row_index_offset": [144, 145, 150, 152, 154, 156, 158, 161, 162, 163], "row_nr": [306, 330, 907, 934], "row_tot": [46, 330], "rowname_col": [330, 334], "rows_by_kei": [233, 264, 283, 330], "rowserror": [263, 330], "rowtotalsdefinit": [46, 330], "rstrip": 594, "rtol": [167, 168, 169, 170], "rtrim": 1350, "ru": 1352, "rule": [144, 156, 158, 163, 214, 330, 668, 692, 707, 1247, 1271, 1286], "run": [52, 53, 54, 55, 63, 64, 72, 146, 174, 177, 178, 179, 220, 235, 238, 240, 269, 295, 305, 316, 330, 405, 419, 532, 568, 569, 628, 629, 686, 798, 820, 841, 842, 852, 859, 864, 870, 874, 879, 886, 890, 898, 905, 909, 934, 938, 940, 1008, 1027, 1146, 1182, 1213, 1214, 1265, 1329, 1357, 1360], "runtim": 938, "runtimeerror": [288, 330, 1310, 1329], "rust": [43, 51, 52, 100, 112, 141, 149, 150, 152, 156, 240, 316, 330, 677, 934, 938, 1182, 1256, 1329], "s1": [56, 96, 97, 169, 170, 214, 330, 983, 1086, 1087, 1106, 1131, 1141, 1174, 1194, 1206, 1320, 1329], "s2": [1, 56, 96, 97, 169, 170, 214, 330, 983, 1014, 1031, 1086, 1087, 1106, 1122, 1131, 1141, 1174, 1188, 1194, 1206, 1320, 1329], "s3": [1, 45, 148, 159, 160, 163, 164, 330, 983, 1174, 1329], "s_": 459, "s_bar": 1347, "s_dt": [459, 1352, 1353], "s_dt1": 1352, "s_dt2": 1352, "s_dtm": 459, "s_foo": 1347, "s_from_str_repr": [1307, 1329], "s_head_5": 681, "s_head_n": 681, "s_tail_5": 705, "s_tail_n": 705, "s_td": 459, "s_tm": [459, 1352, 1353], "safe": [622, 820, 1207, 1329], "sale": [610, 820], "sam": 18, "same": [26, 45, 46, 56, 57, 63, 64, 65, 96, 97, 113, 150, 158, 167, 168, 169, 170, 172, 184, 212, 220, 236, 240, 255, 264, 265, 276, 295, 304, 305, 309, 316, 330, 338, 345, 378, 404, 425, 426, 459, 485, 489, 491, 492, 495, 559, 573, 579, 610, 624, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 656, 663, 674, 685, 717, 816, 820, 841, 842, 856, 859, 865, 868, 870, 892, 898, 904, 905, 910, 934, 940, 945, 982, 1007, 1032, 1033, 1038, 1070, 1173, 1182, 1209, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1253, 1264, 1320, 1329, 1343, 1345, 1353], "samoa": [428, 1035], "sampl": [144, 145, 316, 330, 656, 660, 779, 820, 917, 1240, 1329, 1346], "sample_s": [144, 145], "sampled_from": 1360, "sandwich": [217, 330], "sat": [330, 333], "satisfi": [506, 820, 1117, 1329], "saturdai": [221, 330, 860, 934], "save": [8, 9, 12, 221, 236, 262, 300, 330, 428, 436, 449, 454, 467, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 765, 807, 808, 816, 820, 832, 860, 865, 883, 934, 1043, 1060, 1065, 1078], "save_to_fil": 11, "say\u014dnara": 1, "scalar": [141, 189, 231, 240, 263, 330, 405, 568, 652, 681, 686, 694, 705, 780, 782, 820, 944, 1008, 1131, 1229, 1260, 1265, 1273, 1284, 1329], "scale": [34, 73, 207, 330, 388, 569, 614, 708, 820, 940, 1088, 1287, 1329], "scale_negative_even": [614, 820], "scan": [7, 132, 135, 144, 145, 146, 149, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 330, 683, 934, 1262], "scan_csv": [52, 53, 54, 55, 144, 145, 934], "scan_parquet": [156, 164], "scan_pyarrow_dataset": [156, 163], "scatter": [330, 333, 1329, 1334], "scenario": 1329, "schedul": [64, 842, 934], "schema": [0, 1, 3, 5, 6, 7, 20, 34, 41, 44, 45, 58, 59, 60, 65, 104, 121, 122, 129, 131, 132, 133, 135, 139, 140, 144, 145, 146, 147, 149, 151, 153, 154, 155, 156, 157, 158, 161, 162, 163, 193, 194, 195, 201, 205, 207, 234, 238, 240, 247, 251, 259, 288, 292, 330, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 434, 559, 560, 569, 580, 595, 597, 599, 683, 735, 802, 820, 832, 839, 840, 843, 844, 848, 851, 870, 875, 881, 903, 917, 934, 940, 1017, 1262, 1329, 1338], "schema_mod": [45, 330], "schema_overrid": [129, 131, 132, 133, 134, 135, 144, 145, 146, 147, 149, 153, 154, 155, 158, 162, 234, 288, 330, 934, 940], "schemadefinit": [129, 131, 132, 133, 135, 153, 154, 162, 330, 934], "schemadict": [88, 129, 131, 132, 133, 134, 135, 139, 144, 146, 147, 149, 155, 156, 158, 161, 163, 330, 802, 870, 917, 934], "schemainitdatatyp": 939, "schindler": 1338, "scientif": [17, 43, 52, 330, 934], "scikit": [292, 330], "scipi": [518, 660, 820, 1132, 1240, 1329], "scope": [39, 40, 184, 831, 940, 1341, 1344, 1357], "score": [46, 255, 330], "script": [330, 333, 1329, 1334], "scroll": [46, 330], "sdiff": 551, "sdk": 2, "search": [236, 330, 560, 668, 678, 680, 692, 865, 892, 934, 1114, 1247, 1257, 1259, 1271, 1329], "search_sort": [820, 1329], "searchsortedsid": [652, 820, 1229, 1329], "searchstrategi": [171, 173, 174, 175, 176, 178], "season": [690, 691], "sec": [1353, 1360], "second": [43, 52, 154, 158, 161, 162, 167, 168, 169, 170, 221, 236, 262, 300, 330, 438, 441, 443, 444, 448, 449, 452, 454, 459, 466, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 690, 691, 704, 707, 762, 763, 764, 765, 806, 807, 808, 810, 820, 860, 865, 883, 934, 940, 1060, 1063, 1065, 1077, 1078, 1090, 1269, 1270, 1283, 1286, 1329, 1352, 1353, 1358, 1360], "second_part": [696, 697, 1275, 1276], "seconds_diff": 466, "secret": [160, 163], "section": [255, 330, 667, 675, 676, 679, 690, 691, 760, 761, 763, 764, 807, 808, 938, 1246, 1254, 1255, 1258, 1269, 1270], "secur": [422, 820, 847, 934], "see": [7, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 63, 64, 72, 139, 141, 146, 147, 148, 149, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 174, 178, 186, 197, 212, 221, 235, 254, 255, 330, 334, 393, 394, 396, 397, 409, 459, 484, 518, 568, 660, 667, 675, 676, 679, 681, 690, 691, 705, 760, 761, 763, 764, 794, 807, 808, 816, 820, 841, 842, 856, 860, 909, 934, 938, 940, 942, 996, 997, 999, 1000, 1010, 1016, 1070, 1132, 1240, 1246, 1254, 1255, 1258, 1260, 1269, 1270, 1284, 1329, 1360], "seed": [165, 222, 266, 330, 498, 548, 620, 651, 656, 820, 1110, 1162, 1205, 1227, 1236, 1329], "seed_1": [222, 330, 498, 820, 1110, 1329], "seed_2": [222, 330, 498, 820, 1110, 1329], "seed_3": [222, 330, 498, 820, 1110, 1329], "seen": [459, 1070], "seen_group": 145, "select": [1, 14, 44, 57, 58, 59, 60, 101, 142, 144, 145, 146, 147, 148, 150, 152, 156, 158, 164, 173, 189, 190, 231, 232, 236, 240, 251, 254, 263, 269, 275, 277, 290, 296, 300, 307, 330, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 364, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 395, 398, 399, 400, 403, 407, 408, 410, 411, 412, 413, 419, 421, 423, 424, 425, 426, 429, 431, 432, 440, 446, 447, 449, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 472, 475, 477, 478, 479, 480, 481, 482, 486, 488, 490, 493, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 511, 517, 518, 519, 521, 522, 532, 533, 560, 563, 564, 565, 566, 568, 569, 570, 571, 572, 576, 588, 590, 592, 593, 595, 597, 599, 602, 603, 607, 608, 609, 610, 612, 613, 616, 618, 619, 620, 621, 622, 623, 626, 627, 628, 631, 642, 649, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 674, 675, 676, 677, 678, 679, 680, 682, 687, 704, 715, 717, 718, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 736, 738, 740, 743, 744, 745, 748, 749, 751, 752, 753, 754, 757, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 783, 785, 787, 788, 790, 791, 794, 795, 799, 800, 801, 802, 803, 805, 809, 816, 820, 835, 841, 844, 865, 878, 886, 891, 893, 899, 906, 908, 909, 934, 940, 944, 1064, 1103, 1146, 1228, 1230, 1241, 1259, 1263, 1283, 1329, 1338, 1339, 1340, 1341, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359], "select_from": [173, 176, 178], "select_seq": [330, 934], "selector": [0, 46, 192, 201, 203, 204, 208, 246, 253, 255, 276, 285, 287, 292, 295, 297, 298, 330, 334, 459, 479, 576, 820, 832, 838, 848, 849, 850, 853, 874, 892, 898, 900, 934], "selectortyp": [46, 330, 940], "self": [1, 58, 59, 60, 61, 63, 64, 277, 308, 330, 799, 820, 841, 842, 852, 879, 890, 893, 906, 934, 949, 994, 995, 996, 997, 999, 1000, 1003, 1017, 1022, 1095, 1099, 1113, 1180, 1182, 1195, 1199, 1200, 1206, 1209, 1210, 1228, 1230, 1231, 1242, 1317, 1320, 1329, 1340, 1341, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357], "semi": [140, 235, 330, 864, 934, 1345], "semigraph": 26, "sens": [144, 150, 152, 247, 300, 330, 610, 820, 875, 934], "sensit": [667, 676, 679, 690, 691, 1246, 1255, 1258, 1269, 1270], "sep": 140, "separ": [15, 16, 30, 33, 42, 43, 52, 138, 140, 143, 144, 145, 149, 158, 253, 255, 285, 294, 296, 330, 364, 367, 459, 533, 539, 569, 674, 750, 755, 756, 820, 899, 934, 968, 971, 1070, 1147, 1153, 1253, 1299, 1305, 1329, 1352], "seq": 32, "seq1": 32, "seq2": 32, "sequenc": [46, 51, 57, 88, 129, 131, 132, 133, 135, 140, 144, 145, 146, 149, 153, 154, 155, 158, 162, 172, 173, 174, 175, 176, 191, 199, 208, 209, 235, 236, 246, 251, 253, 254, 255, 265, 276, 285, 287, 292, 293, 297, 298, 299, 300, 330, 379, 400, 420, 492, 510, 560, 568, 614, 617, 624, 625, 663, 692, 702, 703, 717, 727, 744, 755, 756, 769, 771, 779, 781, 782, 791, 794, 800, 820, 836, 846, 853, 864, 865, 874, 878, 892, 897, 900, 901, 934, 940, 983, 1028, 1029, 1095, 1174, 1203, 1209, 1210, 1271, 1297, 1329], "sequenti": [63, 64, 269, 305, 330, 841, 842, 852, 879, 886, 890, 905, 934], "ser": [1040, 1041, 1068], "seri": [0, 1, 17, 31, 46, 56, 58, 59, 60, 61, 65, 66, 75, 88, 96, 97, 106, 129, 131, 134, 136, 141, 169, 170, 174, 189, 202, 212, 214, 216, 218, 221, 222, 225, 226, 228, 230, 232, 242, 244, 249, 260, 262, 266, 280, 283, 286, 288, 290, 291, 310, 330, 345, 356, 379, 383, 402, 403, 404, 405, 406, 408, 453, 482, 485, 488, 492, 493, 503, 508, 510, 511, 513, 514, 515, 516, 527, 533, 535, 560, 566, 568, 569, 620, 621, 622, 623, 624, 625, 630, 631, 642, 653, 655, 681, 692, 704, 705, 706, 707, 711, 715, 726, 731, 741, 745, 748, 755, 756, 760, 761, 763, 764, 769, 771, 775, 776, 779, 780, 781, 782, 792, 794, 795, 798, 799, 802, 807, 808, 811, 820, 832, 856, 860, 883, 911, 934, 1321, 1323, 1325, 1328, 1330, 1333, 1334, 1335, 1336, 1337, 1339, 1341, 1352, 1357, 1360], "serial": [49, 50, 200, 330, 422, 587, 820, 847, 934], "serializ": [141, 820], "serializationformat": [200, 270, 330, 422, 583, 820, 847, 887, 934], "seriesplot": [1329, 1334], "server": [44, 146, 147, 330], "servic": 38, "service_account": [148, 159], "service_account_json_absolute_path": [148, 159], "session": 146, "set": [2, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 26, 31, 32, 33, 36, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 69, 72, 73, 75, 130, 131, 132, 135, 141, 144, 145, 146, 149, 150, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 188, 196, 203, 204, 213, 216, 220, 222, 233, 235, 236, 244, 246, 264, 266, 268, 270, 275, 280, 285, 287, 288, 292, 294, 295, 297, 298, 299, 304, 330, 333, 342, 344, 366, 367, 379, 391, 393, 394, 396, 397, 409, 420, 452, 453, 470, 498, 510, 535, 537, 539, 548, 549, 550, 551, 552, 554, 560, 568, 569, 576, 577, 583, 614, 617, 624, 625, 631, 632, 634, 636, 638, 640, 643, 645, 647, 651, 656, 660, 661, 666, 682, 683, 690, 691, 694, 699, 700, 701, 702, 703, 704, 706, 707, 711, 732, 736, 738, 741, 745, 750, 760, 761, 762, 763, 764, 765, 775, 776, 779, 780, 786, 792, 795, 796, 797, 798, 802, 804, 807, 808, 810, 811, 820, 832, 841, 842, 849, 850, 852, 859, 864, 865, 870, 874, 885, 887, 891, 898, 900, 901, 904, 917, 934, 947, 948, 970, 971, 983, 987, 994, 996, 997, 999, 1000, 1016, 1028, 1063, 1064, 1081, 1101, 1110, 1122, 1129, 1149, 1151, 1153, 1162, 1163, 1164, 1165, 1166, 1168, 1174, 1182, 1203, 1209, 1210, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1227, 1228, 1229, 1236, 1240, 1241, 1245, 1261, 1262, 1269, 1270, 1273, 1278, 1279, 1280, 1283, 1285, 1286, 1290, 1310, 1318, 1329, 1348, 1356, 1360], "set_": 184, "set_auto_structifi": [268, 304, 330, 885, 904, 934], "set_decimal_separ": 33, "set_environ": 177, "set_except": [64, 842, 934], "set_fmt_float": 36, "set_fmt_str_length": [668, 678, 680, 692, 1247, 1259, 1271], "set_index": [221, 330, 860, 934], "set_legend": [46, 330], "set_sort": [262, 300, 330, 630, 820, 883, 934, 1329], "set_stat": 36, "set_streaming_chunk_s": [841, 934], "set_styl": [46, 330], "set_tbl_column_data_type_inlin": 30, "set_tbl_format": [13, 57], "set_tbl_row": 184, "set_tbl_width_char": 692, "set_thousands_separ": 15, "set_titl": [46, 330], "set_verbos": 184, "setosa": [330, 333], "setup": 1360, "seventeen": [502, 820], "sever": [129, 131, 132, 133, 135, 153, 154, 162, 330, 934, 1360], "sfu": 147, "shape": [1, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 56, 57, 58, 59, 60, 61, 65, 66, 84, 88, 96, 97, 104, 123, 129, 130, 131, 132, 133, 134, 135, 136, 140, 144, 153, 154, 158, 164, 171, 174, 178, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 266, 268, 270, 273, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 588, 589, 590, 591, 592, 593, 594, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 820, 835, 836, 838, 839, 841, 842, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 939, 940, 944, 945, 946, 949, 951, 952, 953, 954, 955, 956, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1102, 1103, 1104, 1106, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1187, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1233, 1234, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1299, 1301, 1302, 1303, 1305, 1306, 1307, 1312, 1314, 1315, 1316, 1317, 1318, 1320, 1329, 1338, 1339, 1340, 1341, 1343, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357, 1358], "share": [167, 168, 169, 170, 207, 330, 1088, 1329], "shawshank": 1338, "sheet": [46, 149, 155, 330], "sheet1": [46, 330], "sheet_id": [149, 155], "sheet_nam": [149, 155], "sheet_zoom": [46, 330], "sheetnam": [149, 155], "shift": [221, 330, 382, 423, 490, 530, 611, 749, 820, 860, 934, 1030, 1144, 1198, 1329], "short": [167, 169, 387, 990], "shorten": [167, 169], "shorter": [144, 145, 158, 560, 775, 776], "shorthand": [330, 333, 1329, 1334], "should": [16, 44, 46, 51, 52, 53, 54, 55, 65, 129, 131, 133, 135, 139, 140, 149, 153, 154, 158, 162, 164, 171, 172, 174, 178, 201, 233, 235, 236, 240, 263, 264, 265, 276, 284, 285, 296, 316, 330, 340, 419, 422, 470, 476, 479, 513, 514, 532, 569, 583, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 652, 660, 663, 690, 691, 732, 744, 765, 767, 780, 782, 796, 797, 810, 816, 820, 841, 847, 848, 864, 865, 870, 887, 892, 899, 934, 940, 1027, 1081, 1090, 1146, 1182, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1229, 1240, 1269, 1270, 1318, 1329, 1339], "show": [36, 46, 199, 204, 219, 238, 252, 330, 500, 584, 820, 846, 879, 890, 934, 1112, 1329, 1343, 1356], "show_graph": [238, 330, 934], "show_plot": [879, 934], "shrink": [274, 330, 655, 820, 1234, 1235, 1329], "shrink_dtyp": [820, 1329], "shrink_to_fit": [330, 1329], "shuffl": [165, 266, 292, 316, 330, 548, 651, 820, 917, 1162, 1227, 1329], "side": [46, 141, 221, 262, 330, 506, 549, 550, 551, 552, 630, 633, 635, 637, 639, 641, 644, 646, 648, 652, 760, 761, 763, 764, 779, 807, 808, 820, 860, 883, 934, 1117, 1163, 1164, 1165, 1166, 1229, 1329], "sign": [71, 72, 74, 79, 80, 81, 82, 83, 89, 449, 622, 690, 691, 714, 820, 940, 1060, 1207, 1269, 1270, 1293, 1329, 1350], "sign_x": 1351, "signed_integ": 940, "signific": [163, 233, 240, 330, 393, 394, 396, 397, 569, 650, 820, 996, 997, 999, 1000, 1182, 1226, 1329], "significantli": [149, 240, 316, 330, 1182, 1329, 1360], "silenc": 104, "silent": [709, 1288], "similar": [42, 51, 143, 180, 214, 236, 273, 295, 297, 330, 374, 456, 459, 553, 610, 654, 719, 778, 810, 820, 865, 889, 898, 900, 934, 978, 1067, 1070, 1167, 1233, 1329], "similarli": [46, 132, 221, 236, 262, 300, 330, 449, 454, 467, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 1060, 1065, 1078], "simpl": [46, 251, 330], "simpler": [940, 1269], "simpli": [158, 755, 769], "simplifi": [52, 53, 54, 55, 63, 64, 841, 842, 852, 879, 890, 934], "simplify_express": [52, 53, 54, 55, 63, 64, 841, 842, 852, 879, 890, 934], "sin": [820, 1329, 1350], "sinc": [45, 66, 71, 72, 89, 144, 145, 146, 148, 154, 158, 159, 161, 162, 171, 172, 173, 174, 178, 181, 190, 246, 288, 306, 311, 330, 434, 437, 470, 491, 568, 587, 624, 666, 674, 734, 743, 751, 771, 820, 835, 852, 874, 892, 906, 907, 912, 934, 1041, 1044, 1049, 1050, 1081, 1109, 1209, 1245, 1253, 1310, 1329], "sind": 1350, "sine": [349, 350, 568, 658, 659, 820, 953, 954, 1238, 1239, 1329, 1354], "singl": [46, 51, 57, 63, 64, 65, 76, 143, 144, 145, 146, 147, 148, 149, 156, 158, 159, 161, 172, 192, 201, 202, 203, 204, 209, 216, 222, 231, 240, 253, 263, 265, 276, 287, 288, 330, 363, 405, 409, 427, 449, 492, 495, 498, 529, 535, 568, 569, 621, 624, 626, 628, 663, 666, 681, 682, 686, 694, 705, 734, 744, 748, 749, 750, 776, 781, 782, 800, 808, 816, 820, 838, 841, 842, 848, 849, 850, 892, 934, 940, 967, 1008, 1016, 1034, 1060, 1095, 1110, 1143, 1149, 1206, 1209, 1211, 1213, 1245, 1260, 1261, 1265, 1273, 1284, 1304, 1310, 1329, 1340], "singlecolselector": 189, "singleindexselector": [189, 944], "sinh": [820, 1329], "sink_csv": 934, "sink_ipc": 934, "sink_ndjson": 934, "sink_parquet": 934, "site_id": [330, 334], "six": [652, 820], "size": [20, 51, 55, 139, 144, 145, 146, 171, 172, 173, 174, 178, 180, 207, 298, 330, 560, 626, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 741, 775, 776, 796, 797, 820, 841, 934, 1088, 1211, 1221, 1329, 1360], "sizeunit": [207, 330, 388, 991, 1088, 1329], "skew": [642, 820, 1221, 1329], "skewtest": [660, 820, 1240, 1329], "skip": [144, 145, 149, 156, 158, 163, 236, 298, 330, 865, 934, 1182, 1329, 1345], "skip_empty_lin": 149, "skip_lin": [144, 158], "skip_nul": [569, 820, 1182, 1329], "skip_row": [144, 145, 158], "skip_rows_after_head": [144, 145, 158], "sklearn": [292, 330], "slice": [52, 53, 54, 55, 58, 63, 64, 141, 207, 223, 234, 281, 330, 538, 558, 569, 580, 582, 631, 632, 634, 636, 638, 640, 643, 645, 647, 681, 705, 820, 841, 842, 852, 870, 879, 890, 934, 1088, 1111, 1152, 1172, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1260, 1284, 1301, 1329, 1352], "slice_pushdown": [52, 53, 54, 55, 63, 64, 841, 842, 852, 870, 879, 890, 934], "slide": [419, 820, 1027, 1329], "slightli": [52, 53, 54, 55, 100, 489, 820, 934, 1353], "slot": [419, 423, 530, 820, 1027, 1030, 1144, 1329], "slow": [116, 132, 135, 144, 145, 146, 149, 153, 154, 155, 158, 162, 163, 330, 419, 569, 631, 683, 820, 917, 934, 1027, 1215, 1262, 1329], "slower": [133, 135, 149, 220, 240, 253, 300, 316, 330, 569, 782, 820, 859, 917, 934, 1182, 1329], "small": [17, 147, 454, 934, 1360], "smaller": [51, 55, 207, 330, 934, 1088, 1329], "smallest": [191, 293, 330, 399, 400, 727, 820, 836, 897, 934, 1002, 1329, 1346, 1349], "smooth": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "snappi": [41, 51, 55, 330, 934], "snapshot": 160, "snapshot_id": 160, "snowflak": [146, 147], "snowi": [690, 691], "so": [1, 46, 147, 149, 158, 180, 184, 219, 221, 237, 255, 262, 330, 356, 366, 422, 489, 506, 537, 560, 569, 630, 690, 691, 692, 699, 700, 701, 715, 820, 847, 860, 866, 883, 934, 940, 970, 1151, 1269, 1270, 1271, 1278, 1279, 1280], "softwar": [42, 143, 330], "solut": [44, 330], "some": [20, 36, 46, 56, 65, 97, 132, 144, 145, 146, 158, 188, 204, 255, 265, 288, 330, 334, 690, 691, 816, 1122, 1269, 1270, 1329, 1360], "some_account": [676, 1255], "some_t": 1359, "someth": [568, 820], "sometim": [765, 819], "somewher": [676, 1255], "sort": [57, 58, 191, 221, 236, 247, 254, 255, 262, 271, 293, 300, 313, 324, 330, 355, 399, 400, 476, 485, 569, 610, 630, 653, 663, 726, 727, 732, 734, 744, 760, 763, 782, 820, 836, 852, 860, 865, 875, 878, 879, 883, 888, 890, 897, 914, 925, 934, 940, 959, 1002, 1090, 1129, 1231, 1314, 1315, 1318, 1329, 1345, 1358, 1360], "sort_bi": 820, "sort_column": [255, 330], "sorted": [236, 330, 865, 934], "sorted_asc": [1101, 1329], "sorted_desc": [1101, 1329], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 820, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1329, 1334, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1357], "source_ac": 136, "source_actor_id": 136, "source_alia": [45, 330], "source_cha": 136, "source_channel_id": 136, "south": 75, "space": [26, 221, 330, 459, 779, 860, 934, 940, 1070], "spam": [243, 330, 676, 1255], "span": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "spanner": [330, 334], "spark": [51, 330], "sparklin": [46, 330], "speak": [660, 820, 1240, 1329], "spearman": 751, "speci": [330, 333], "special": [44, 144, 145, 147, 158, 292, 307, 330, 631, 676, 690, 691, 820, 908, 934, 1182, 1215, 1255, 1269, 1270, 1329], "specif": [1, 36, 45, 46, 47, 48, 100, 129, 131, 133, 135, 140, 144, 147, 148, 149, 153, 154, 155, 159, 160, 162, 192, 233, 235, 282, 287, 330, 456, 459, 704, 706, 707, 711, 732, 820, 838, 864, 934, 939, 940, 1067, 1070, 1283, 1285, 1286, 1290, 1304, 1308, 1318, 1329, 1345, 1357, 1360], "specifi": [3, 5, 6, 7, 43, 44, 45, 46, 51, 52, 57, 101, 104, 107, 122, 125, 144, 149, 155, 156, 158, 163, 175, 191, 192, 207, 208, 211, 216, 220, 221, 235, 236, 253, 255, 262, 263, 265, 268, 269, 273, 276, 287, 293, 296, 304, 305, 309, 330, 400, 409, 452, 459, 475, 477, 478, 479, 484, 610, 623, 625, 632, 634, 636, 638, 640, 643, 645, 647, 654, 663, 719, 727, 744, 747, 748, 749, 750, 760, 761, 763, 764, 765, 767, 798, 802, 807, 808, 816, 820, 836, 838, 853, 855, 859, 860, 864, 865, 883, 885, 886, 889, 892, 897, 899, 904, 905, 910, 934, 940, 1016, 1063, 1070, 1088, 1089, 1091, 1092, 1098, 1210, 1233, 1308, 1329, 1345, 1352, 1359], "speed": [55, 271, 330, 569, 820, 888, 934, 938, 1360], "speedup": [57, 163, 233, 240, 330, 569, 820, 1182, 1329], "split": [1, 46, 51, 58, 234, 330, 674, 696, 697, 1253, 1275, 1276], "split_by_column_dtyp": 60, "split_inclus": 695, "splitfram": [1, 58], "spreadsheet": [42, 143, 149, 155, 255, 330], "spring": [690, 691], "sql": [0, 44, 119, 120, 128, 146, 147, 235, 273, 330, 374, 553, 654, 778, 800, 820, 832, 889, 934, 978, 1167, 1233, 1329, 1338, 1339, 1341, 1343, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1358, 1359], "sql_expr": 1357, "sqlalchemi": [44, 146, 166, 330], "sqlcontext": [277, 330, 799, 893, 934, 1356], "sqlite": [44, 146, 330], "sqrt": [569, 660, 719, 820, 1182, 1240, 1329, 1350], "sqrt_x": 1351, "squar": [1, 61, 316, 518, 626, 664, 820, 917, 1132, 1211, 1243, 1329, 1351], "st": [38, 1360], "stabil": [222, 330, 498, 820, 1110, 1329], "stabl": [156, 186, 197, 199, 200, 222, 266, 270, 277, 330, 422, 498, 565, 583, 725, 820, 846, 847, 874, 887, 892, 893, 934, 942, 1110, 1312, 1329], "stack": [65, 225, 302, 330, 333, 1339], "stai": [568, 656, 820], "standalon": [172, 940], "standard": [13, 16, 46, 146, 278, 287, 292, 330, 440, 477, 643, 644, 660, 665, 684, 687, 801, 816, 820, 894, 934, 1047, 1086, 1091, 1194, 1240, 1244, 1263, 1266, 1329, 1346, 1360], "standardis": [46, 330], "start": [46, 142, 144, 145, 147, 149, 150, 152, 154, 155, 156, 158, 161, 162, 163, 180, 215, 220, 221, 238, 275, 300, 306, 307, 330, 383, 386, 389, 402, 406, 427, 435, 445, 450, 454, 467, 468, 479, 493, 536, 554, 629, 633, 635, 637, 639, 641, 644, 646, 648, 661, 667, 672, 676, 680, 689, 694, 698, 699, 701, 702, 705, 714, 741, 746, 755, 759, 760, 761, 762, 763, 764, 767, 769, 775, 776, 779, 807, 808, 810, 816, 820, 858, 859, 860, 879, 891, 907, 908, 934, 940, 992, 1004, 1009, 1034, 1036, 1039, 1042, 1044, 1045, 1051, 1053, 1055, 1056, 1059, 1061, 1065, 1069, 1078, 1079, 1104, 1150, 1168, 1214, 1241, 1251, 1255, 1259, 1268, 1273, 1277, 1278, 1280, 1284, 1293, 1329, 1345, 1352, 1360], "start_bi": [221, 330, 860, 934], "startbi": [221, 330, 860, 934], "starts_a": 1352, "starts_with": [58, 255, 330, 334, 383, 386, 402, 576, 667, 672, 799, 893, 934, 940, 1004, 1251, 1350], "starts_with_expr": 389, "starts_with_lit": 389, "startup": [287, 330], "stat": [518, 660, 820, 1132, 1240, 1329], "state": [10, 11, 112, 755, 832, 852, 879, 890, 934, 1357], "statement": [610, 810, 820, 1343, 1358], "static": [94, 917], "statist": [51, 55, 144, 145, 156, 161, 163, 199, 330, 477, 478, 518, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 660, 820, 846, 934, 1029, 1091, 1092, 1132, 1221, 1240, 1329], "std": [199, 330, 643, 644, 820, 846, 934, 1029, 1222, 1329], "std_dev": [46, 330], "stddev": 1350, "stddev_samp": 1346, "stdev": [46, 330, 1346], "stdev_samp": 1346, "stdout": [184, 219, 330, 585], "step": [298, 330, 489, 741, 775, 776, 820], "steve": [247, 330, 875, 934], "still": [146, 147], "stock": [330, 333], "stop": [139, 142, 144, 145, 150, 152, 154, 156, 158, 161, 162, 163, 633, 635, 637, 639, 641, 644, 646, 648, 820, 1036, 1039, 1044, 1045, 1051, 1053, 1055, 1059, 1065, 1069], "storag": [7, 43, 45, 47, 51, 52, 53, 54, 55, 144, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 330, 934], "storage_opt": [7, 43, 45, 47, 51, 52, 53, 54, 55, 144, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 330, 934], "store": [45, 144, 160, 209, 233, 264, 330, 403, 628, 820, 1005, 1095, 1213, 1329], "store_id": [610, 820], "str": [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 15, 16, 18, 21, 22, 23, 26, 27, 32, 33, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 72, 75, 76, 98, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 171, 172, 174, 177, 178, 179, 184, 191, 192, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 212, 213, 214, 216, 217, 219, 220, 221, 223, 225, 228, 230, 231, 233, 235, 236, 237, 239, 241, 243, 245, 246, 247, 248, 251, 253, 255, 257, 259, 260, 261, 262, 263, 264, 266, 270, 271, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330, 339, 340, 341, 362, 367, 379, 383, 384, 385, 386, 389, 390, 395, 398, 400, 402, 403, 406, 414, 420, 422, 424, 432, 449, 453, 454, 456, 459, 467, 476, 479, 485, 487, 491, 492, 495, 503, 506, 527, 528, 537, 538, 539, 554, 558, 560, 569, 580, 582, 583, 584, 585, 587, 594, 595, 596, 597, 598, 599, 600, 601, 607, 610, 614, 617, 623, 624, 625, 627, 629, 630, 633, 635, 637, 639, 641, 644, 646, 648, 655, 662, 663, 715, 716, 717, 718, 727, 732, 734, 735, 736, 737, 738, 739, 740, 742, 743, 749, 750, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 816, 820, 827, 836, 838, 841, 842, 844, 846, 847, 848, 849, 850, 852, 853, 856, 859, 860, 862, 864, 865, 866, 874, 875, 878, 879, 881, 882, 883, 887, 888, 890, 891, 892, 893, 897, 898, 899, 900, 901, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 934, 939, 940, 946, 966, 971, 983, 988, 1003, 1004, 1005, 1009, 1028, 1029, 1039, 1060, 1064, 1065, 1067, 1070, 1078, 1090, 1098, 1101, 1141, 1142, 1153, 1174, 1190, 1191, 1192, 1203, 1208, 1209, 1210, 1230, 1294, 1296, 1297, 1305, 1306, 1307, 1308, 1318, 1329, 1335, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1352, 1353, 1357, 1358, 1360], "str_date": 1352, "str_timestamp": 1352, "strategi": [43, 52, 57, 65, 144, 163, 171, 172, 173, 174, 175, 176, 178, 211, 221, 235, 236, 250, 299, 330, 484, 560, 569, 820, 855, 860, 864, 865, 901, 934, 1098, 1174, 1329], "stream": [20, 47, 48, 52, 53, 54, 55, 63, 64, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 220, 235, 295, 330, 568, 820, 841, 842, 852, 859, 864, 870, 874, 879, 890, 892, 898, 934], "streamabl": [870, 874, 900, 934], "strftime": [100, 459, 1070, 1350, 1352], "strict": [131, 132, 135, 140, 192, 201, 259, 330, 384, 401, 459, 667, 670, 679, 704, 706, 707, 709, 711, 820, 838, 848, 881, 934, 940, 987, 1003, 1070, 1246, 1249, 1258, 1283, 1285, 1286, 1288, 1290, 1329], "strictli": [43, 52, 56, 97, 236, 330, 865, 934], "string": [1, 8, 9, 11, 12, 18, 20, 21, 22, 26, 41, 43, 44, 45, 46, 49, 50, 52, 56, 69, 72, 75, 88, 95, 96, 97, 98, 100, 106, 124, 132, 136, 140, 144, 145, 146, 147, 158, 167, 168, 169, 170, 171, 178, 182, 191, 192, 195, 200, 205, 207, 214, 216, 219, 220, 221, 236, 253, 255, 262, 265, 267, 268, 269, 270, 276, 286, 287, 293, 294, 298, 300, 304, 305, 309, 330, 339, 362, 367, 384, 385, 386, 400, 402, 404, 405, 406, 409, 422, 449, 454, 456, 459, 467, 476, 479, 487, 491, 506, 539, 583, 585, 610, 614, 624, 625, 630, 633, 635, 637, 639, 641, 644, 646, 648, 663, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 719, 727, 735, 737, 739, 744, 747, 748, 749, 750, 758, 760, 761, 763, 764, 770, 784, 786, 789, 798, 802, 804, 807, 808, 810, 816, 820, 832, 836, 838, 843, 847, 851, 852, 859, 860, 865, 883, 884, 885, 886, 887, 892, 897, 904, 905, 910, 934, 939, 940, 971, 987, 988, 989, 1004, 1006, 1007, 1008, 1009, 1060, 1065, 1067, 1070, 1078, 1090, 1117, 1153, 1209, 1210, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1296, 1307, 1308, 1329, 1338, 1339, 1347, 1350, 1353, 1356, 1360], "stringcach": [96, 97, 235, 330, 832, 1006, 1010], "stringio": [153, 154, 491, 820], "strings_hex": 671, "strip": [34, 699, 700, 701, 702, 703, 1278, 1279, 1280, 1352], "strip_chars_end": [701, 703], "strip_chars_start": [700, 702], "strip_prefix": [701, 703], "strip_suffix": [700, 702], "strongli": [46, 180, 240, 263, 316, 330, 569, 820, 1182, 1329], "strpo": 1350, "strpost": 1352, "strptime": [262, 330, 453, 630, 820, 883, 934, 1064, 1350], "struct": [14, 76, 125, 136, 251, 268, 291, 296, 304, 330, 379, 420, 500, 560, 568, 569, 595, 597, 599, 617, 628, 629, 677, 683, 696, 697, 725, 732, 755, 756, 758, 781, 820, 885, 899, 904, 917, 934, 983, 1028, 1174, 1182, 1203, 1213, 1256, 1262, 1275, 1276, 1310, 1312, 1329], "struct_col": [715, 717, 718], "struct_seri": 917, "structarrai": [207, 330, 1088, 1329], "structfieldnotfounderror": 717, "structur": [46, 47, 48, 106, 109, 123, 140, 209, 254, 265, 282, 288, 330, 614, 820, 878, 934, 1095, 1304, 1329, 1357], "student": [255, 330], "style": [13, 26, 46, 146, 255, 330], "sub": [316, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 381, 539, 546, 820, 964, 965, 966, 969, 970, 971, 972, 973, 974, 975, 976, 980, 981, 985, 1153, 1160], "subarrai": [358, 359, 962, 963], "subclass": [1, 330], "subexpress": [63, 64, 841, 842, 852, 879, 890, 934], "subinterv": 1346, "subject": [51, 255, 330], "sublist": [366, 525, 526, 528, 530, 534, 535, 536, 537, 538, 539, 540, 549, 554, 558, 560, 970, 1122, 1139, 1140, 1142, 1144, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1163, 1168, 1172, 1174, 1329], "subplan": [63, 64, 841, 842, 852, 879, 890, 934], "subsequ": [46, 156, 163, 258, 289, 330, 560, 799, 810, 852, 934, 1311, 1329, 1344], "subset": [203, 204, 251, 295, 330, 849, 850, 898, 934], "substr": [383, 386, 389, 402, 406, 667, 672, 679, 690, 691, 694, 695, 696, 697, 698, 940, 986, 989, 992, 1004, 1009, 1246, 1251, 1258, 1269, 1270, 1273, 1274, 1275, 1276, 1277, 1350], "subtl": [46, 330], "subtli": [489, 820], "subtract": [518, 720, 820, 1132, 1329], "succe": [144, 145, 158], "success": [669, 676, 1248, 1255], "successfulli": [841, 934], "suffix": [235, 236, 237, 268, 304, 309, 330, 341, 386, 400, 402, 513, 514, 515, 516, 574, 594, 596, 599, 600, 601, 627, 672, 700, 703, 727, 820, 864, 865, 866, 885, 904, 906, 910, 934, 940, 989, 1004, 1251, 1282], "suffix_field": [595, 597], "sugar": [299, 330, 624, 625, 692, 736, 738, 740, 752, 754, 757, 767, 772, 773, 774, 783, 785, 787, 788, 790, 792, 793, 798, 801, 803, 805, 809, 811, 820, 901, 934, 1209, 1210, 1243, 1271, 1329], "suggest": [330, 333, 1329, 1334], "suitabl": [57, 65, 146, 172, 240, 330, 569, 652, 820, 1182, 1229, 1329], "sum": [46, 141, 207, 214, 220, 221, 231, 255, 262, 280, 309, 330, 417, 418, 422, 472, 485, 560, 569, 580, 582, 583, 584, 585, 586, 624, 625, 630, 645, 646, 734, 736, 748, 755, 757, 758, 769, 782, 794, 804, 820, 841, 842, 847, 852, 859, 860, 877, 879, 883, 887, 890, 910, 934, 940, 1025, 1026, 1084, 1088, 1223, 1329, 1338, 1345, 1347, 1350, 1357], "sum_": [660, 820, 1240, 1329], "sum_a": [262, 330, 630, 820, 883, 934], "sum_horizont": [57, 330, 803], "summari": [199, 330, 846, 934, 1029, 1329, 1345], "summer": [690, 691], "sun": [330, 333, 704, 1283], "sundai": [221, 330, 427, 456, 459, 469, 746, 860, 934, 1034, 1067, 1070, 1080], "sunni": [690, 691, 1269, 1270], "supercast": [214, 330], "supertyp": [65, 141, 211, 288, 292, 330, 345, 749, 820, 855, 934, 1329], "suppli": [44, 46, 129, 131, 132, 133, 135, 146, 153, 154, 162, 212, 263, 287, 330, 485, 614, 820, 856, 934, 1308, 1329], "support": [1, 7, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 65, 129, 130, 131, 132, 133, 134, 135, 136, 146, 147, 148, 149, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 171, 175, 178, 184, 233, 234, 235, 236, 264, 265, 275, 276, 284, 289, 292, 330, 459, 476, 554, 610, 624, 625, 661, 663, 668, 678, 680, 681, 690, 691, 692, 694, 705, 816, 820, 826, 841, 864, 865, 891, 892, 934, 940, 1070, 1090, 1168, 1209, 1210, 1241, 1247, 1257, 1259, 1260, 1269, 1270, 1271, 1273, 1284, 1311, 1313, 1329, 1333, 1347, 1352, 1353, 1355, 1356, 1357], "supportsinterchang": 130, "suppos": [189, 255, 330, 569, 820, 1182, 1329], "sure": [65, 129, 134, 141, 144, 145, 148, 150, 152, 156, 159, 258, 330, 820], "surreal_query_to_fram": 146, "surrealdb": 146, "surrealql": 146, "suscept": 934, "swap": [881, 934], "swim": 750, "switch": [428, 841, 934, 1035], "sy": 184, "sydnei": 762, "symbol": [42, 43, 52, 330, 820, 934], "symmetr": [551, 940, 1165], "symmetri": [844, 851, 884, 903, 934], "synchron": [146, 928], "syntact": [299, 330, 624, 625, 692, 736, 738, 740, 752, 754, 757, 767, 772, 773, 774, 783, 785, 787, 788, 790, 792, 793, 798, 801, 803, 805, 809, 811, 820, 901, 934, 1209, 1210, 1243, 1271, 1329], "syntax": [46, 120, 212, 240, 251, 330, 584, 667, 675, 676, 679, 690, 691, 775, 776, 816, 856, 890, 934, 1246, 1254, 1255, 1258, 1269, 1270, 1329, 1353, 1355], "system": [42, 144, 145, 330, 432, 841, 934, 1039], "t": [42, 43, 45, 52, 65, 143, 144, 149, 155, 158, 221, 236, 240, 254, 295, 298, 330, 419, 428, 436, 453, 459, 472, 475, 477, 478, 532, 569, 610, 614, 675, 679, 690, 691, 701, 704, 707, 712, 810, 820, 860, 865, 878, 898, 934, 940, 1027, 1064, 1070, 1084, 1089, 1091, 1092, 1146, 1182, 1254, 1258, 1269, 1270, 1279, 1280, 1283, 1286, 1291, 1329, 1341, 1342, 1352], "t_": [296, 330, 476, 820, 899, 934, 1090, 1329], "t_0": [262, 330, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 820, 883, 934, 1090, 1329], "t_1": [262, 330, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 820, 883, 934, 1090, 1329], "t_a": [296, 330, 899, 934], "t_b": [296, 330, 899, 934], "t_c": [296, 330, 899, 934], "t_d": [296, 330, 899, 934], "t_i": [476, 820, 1090, 1329], "t_id": [237, 330, 866, 934], "t_n": [262, 330, 630, 633, 635, 637, 639, 641, 644, 646, 648, 820, 883, 934], "t_struct": [296, 330, 899, 934], "tab_spann": [330, 334], "tab_stub": [330, 334], "tab_styl": [330, 334], "tabl": [3, 6, 7, 13, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 44, 45, 46, 129, 136, 140, 148, 149, 155, 159, 160, 235, 237, 255, 277, 282, 289, 298, 299, 330, 334, 799, 832, 864, 866, 893, 901, 934, 1339, 1340, 1341, 1342, 1344, 1345, 1356, 1357], "table_nam": [3, 7, 44, 46, 149, 277, 330, 893, 934], "table_path": [45, 148, 159, 160, 330], "table_styl": [46, 330], "tableinfo": [3, 6], "tablemerg": [45, 330], "tablenotfounderror": [45, 330], "tables_scale_100": [138, 145], "tail": [219, 223, 330, 345, 660, 820, 934, 1111, 1240, 1329], "take": [46, 140, 149, 155, 174, 175, 184, 214, 215, 221, 244, 247, 254, 255, 259, 330, 355, 427, 449, 485, 492, 493, 535, 536, 568, 595, 597, 599, 663, 744, 746, 766, 768, 777, 820, 858, 860, 875, 881, 934, 959, 1034, 1060, 1103, 1104, 1149, 1150, 1320, 1329, 1347], "taken": [554, 694, 1168, 1273], "talkin": [712, 1291], "tan": [820, 1329, 1350], "tand": 1350, "tangent": [351, 352, 723, 724, 820, 955, 956, 1302, 1303, 1329, 1354], "tanh": [255, 330, 820, 1329], "target": [1, 44, 45, 46, 62, 149, 292, 330, 675, 690, 691, 704, 706, 707, 940, 1254, 1269, 1270, 1283, 1285, 1286, 1352], "target_alia": [45, 330], "target_t": [44, 330], "task": [64, 842, 934], "tau": [475, 476, 820, 1089, 1090, 1329], "tb": [167, 169, 207, 330, 388, 1088, 1329], "tbl": [138, 145, 1359], "tbl0": 1344, "tbl1": [1342, 1344], "tbl2": [1342, 1344], "tbl3": 1342, "tbl4": 1342, "tbl_cell_numeric_align": [15, 16, 33], "tbl_col": 23, "tbl_format": [26, 184], "tbl_hide_column_data_typ": 26, "tbl_hide_dataframe_shap": 26, "tbl_row": [31, 199, 330, 846, 934], "tbl_width_char": 765, "td": 459, "td1": 940, "td2": 940, "td3": 940, "tdf": [254, 330], "technic": 816, "tell": [668, 692, 1247, 1271], "tempor": [100, 192, 221, 233, 262, 264, 265, 284, 330, 409, 459, 506, 630, 633, 635, 637, 639, 641, 644, 646, 648, 779, 820, 832, 838, 860, 883, 934, 940, 1016, 1070, 1117, 1329, 1350, 1356], "temporalliter": [409, 779, 820, 1016, 1049, 1050, 1329], "temporari": [44, 330], "temporarili": [180, 184, 221, 262, 330, 630, 820, 860, 883, 934], "tenant": 39, "tenant_id": 39, "tend": [167, 169], "tensor": [292, 330, 1313, 1329], "tensordataset": [292, 330], "term": [475, 477, 478, 681, 694, 705, 820, 1089, 1091, 1092, 1260, 1273, 1284, 1329], "termin": [43, 52, 330, 934], "test": [0, 44, 146, 147, 149, 155, 206, 255, 330, 832, 1087, 1329, 1352], "test1": 1344, "test2": 1344, "test3": 1344, "test_1": [255, 330], "test_1_math": [255, 330], "test_1_phys": [255, 330], "test_2": [255, 330], "test_2_math": [255, 330], "test_2_phys": [255, 330], "test_data": 146, "test_df_height": 174, "test_func": 781, "test_lf": [906, 934], "test_miscellan": 1360, "test_numer": 1360, "test_price_calcul": 1360, "test_series_len": 178, "test_tabl": 147, "test_unique_xyz": 172, "testdb": 147, "testing1234": 1344, "text": [143, 146, 404, 405, 673, 681, 685, 686, 687, 690, 691, 693, 694, 705, 800, 1007, 1008, 1260, 1264, 1265, 1272, 1273, 1284, 1344, 1360], "text1": 691, "text2": 691, "textclaus": 146, "texttt": [660, 820, 1240, 1329], "th": [215, 330, 493, 536, 549, 660, 681, 705, 820, 858, 934, 1104, 1150, 1163, 1240, 1260, 1284, 1329], "than": [46, 52, 53, 54, 55, 63, 64, 103, 126, 133, 135, 144, 145, 146, 149, 155, 158, 164, 193, 220, 233, 235, 236, 240, 253, 263, 264, 266, 298, 316, 330, 404, 489, 491, 494, 496, 506, 520, 548, 567, 568, 569, 585, 617, 629, 651, 660, 681, 685, 688, 689, 697, 705, 714, 751, 782, 820, 841, 842, 859, 864, 865, 917, 934, 1007, 1117, 1162, 1182, 1203, 1214, 1227, 1240, 1260, 1264, 1267, 1268, 1276, 1284, 1293, 1310, 1329, 1360], "the_aws_access_key_id": [45, 148, 159, 160, 330], "the_aws_region": [45, 330], "the_aws_secret_access_kei": [45, 148, 159, 160, 330], "thei": [43, 46, 52, 56, 64, 65, 96, 97, 132, 141, 158, 184, 236, 238, 265, 330, 610, 692, 700, 701, 820, 841, 865, 934, 938, 940, 1271], "them": [64, 129, 131, 132, 133, 135, 146, 147, 149, 153, 154, 155, 156, 158, 161, 162, 163, 184, 208, 209, 221, 236, 247, 255, 262, 292, 300, 330, 367, 476, 506, 539, 602, 603, 610, 630, 749, 760, 761, 763, 764, 807, 808, 820, 842, 853, 860, 865, 875, 883, 934, 940, 971, 1090, 1095, 1153, 1191, 1192, 1329, 1347, 1357], "therebi": [158, 161, 162], "therefor": [207, 330, 569, 810, 820, 1088, 1329], "theta": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "thi": [1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 18, 20, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 71, 72, 73, 74, 75, 79, 89, 97, 104, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 188, 189, 190, 191, 194, 195, 197, 199, 200, 203, 204, 207, 209, 213, 214, 219, 220, 221, 222, 226, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 248, 250, 251, 253, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 273, 275, 277, 278, 279, 282, 284, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 311, 316, 329, 330, 333, 334, 342, 345, 346, 355, 367, 373, 374, 375, 380, 399, 400, 403, 409, 419, 420, 422, 428, 429, 440, 446, 447, 449, 453, 456, 459, 470, 474, 481, 491, 498, 500, 503, 504, 506, 510, 532, 533, 539, 548, 549, 550, 551, 552, 553, 555, 560, 561, 565, 566, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 587, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 610, 617, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 654, 655, 656, 661, 662, 663, 666, 668, 675, 678, 680, 682, 683, 687, 688, 689, 692, 699, 700, 701, 702, 703, 708, 712, 714, 716, 719, 726, 727, 729, 730, 731, 732, 736, 740, 748, 749, 752, 754, 755, 768, 769, 771, 773, 774, 777, 778, 779, 782, 785, 787, 790, 792, 798, 801, 805, 809, 810, 811, 816, 820, 832, 835, 836, 837, 840, 841, 842, 843, 844, 846, 847, 849, 850, 851, 852, 859, 860, 862, 864, 865, 866, 868, 870, 874, 875, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 912, 917, 931, 932, 933, 934, 938, 939, 940, 942, 949, 950, 959, 971, 977, 978, 979, 984, 1002, 1005, 1010, 1011, 1016, 1017, 1027, 1028, 1035, 1036, 1038, 1047, 1057, 1058, 1060, 1064, 1067, 1070, 1081, 1083, 1086, 1088, 1094, 1095, 1104, 1106, 1110, 1112, 1122, 1131, 1146, 1147, 1153, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1175, 1180, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1194, 1197, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1241, 1242, 1244, 1245, 1247, 1254, 1257, 1259, 1261, 1262, 1266, 1267, 1268, 1271, 1278, 1279, 1280, 1287, 1291, 1293, 1294, 1296, 1299, 1300, 1304, 1306, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1317, 1318, 1319, 1329, 1334, 1338, 1339, 1340, 1344, 1352, 1355, 1356, 1357, 1358, 1360], "thing": [158, 165], "think": [446, 447, 1057, 1058], "third": [568, 820], "thoma": [247, 330, 875, 934], "those": [11, 36, 46, 144, 149, 265, 289, 299, 330, 489, 620, 675, 782, 820, 901, 934, 940, 1205, 1254, 1311, 1329], "though": [44, 146, 221, 330, 816, 860, 934], "thousand": [15, 33], "thousands_separ": [15, 16, 33], "thread": [20, 43, 52, 64, 138, 144, 145, 147, 180, 181, 276, 330, 532, 569, 663, 744, 820, 842, 892, 934, 979, 1146, 1169, 1242, 1329], "thread_loc": [569, 820], "thread_pool_s": 181, "threadpool": 63, "three": [46, 189, 262, 291, 330, 420, 617, 630, 652, 681, 690, 705, 820, 883, 934, 983, 1028, 1174, 1203, 1260, 1270, 1284, 1329], "threshold": [268, 330, 885, 934], "through": [130, 146, 816, 940, 1329, 1344], "throughout": 184, "throw": [45, 131, 132, 135, 201, 259, 330, 683, 684, 838, 848, 881, 934, 1262, 1263, 1329], "thu": [46, 209, 330, 333, 751, 938, 1095, 1329], "thursdai": [221, 330, 427, 746, 860, 934, 1034], "ti": [620, 820, 1205, 1329], "time": [7, 18, 43, 45, 47, 51, 52, 53, 54, 55, 62, 63, 64, 72, 74, 113, 148, 154, 156, 158, 159, 161, 162, 163, 174, 175, 178, 199, 209, 221, 236, 237, 262, 300, 330, 362, 399, 400, 428, 429, 431, 432, 433, 436, 437, 446, 447, 449, 452, 453, 454, 456, 458, 459, 467, 470, 476, 527, 528, 560, 629, 630, 633, 635, 637, 639, 641, 644, 646, 648, 656, 704, 707, 711, 725, 726, 727, 749, 750, 760, 761, 762, 763, 764, 765, 771, 779, 807, 808, 820, 841, 842, 846, 860, 865, 866, 879, 883, 934, 940, 966, 1002, 1035, 1036, 1038, 1039, 1043, 1044, 1060, 1063, 1064, 1065, 1067, 1069, 1070, 1078, 1081, 1090, 1095, 1141, 1142, 1214, 1236, 1283, 1286, 1290, 1312, 1314, 1329, 1338, 1344, 1353, 1360], "time_column": [300, 330], "time_format": [43, 52, 330, 934], "time_unit": [72, 74, 429, 431, 437, 458, 470, 707, 762, 763, 764, 765, 771, 939, 940, 1036, 1038, 1044, 1069, 1081, 1286], "time_unit_m": [429, 1036], "time_unit_n": [429, 1036], "time_unit_u": 470, "time_zon": [72, 432, 434, 453, 707, 762, 763, 764, 939, 940, 1035, 1039, 1043, 1064, 1286], "timedelta": [221, 236, 262, 300, 330, 449, 454, 459, 467, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 760, 761, 763, 764, 807, 808, 820, 860, 865, 883, 934, 939, 940, 1048, 1054, 1060, 1065, 1078, 1090, 1191, 1192, 1244, 1319, 1329], "timeout": [64, 842, 934], "timestamp": [136, 148, 159, 221, 330, 453, 454, 467, 771, 860, 934, 1064, 1065, 1078, 1350], "timestamp_m": 458, "timestamp_n": 1069, "timestamp_u": [458, 1069], "timestep": 771, "timeunit": [43, 52, 72, 74, 330, 429, 431, 458, 470, 707, 762, 763, 764, 765, 934, 940, 1036, 1038, 1069, 1081, 1286], "timezon": [72, 148, 159, 434, 940, 1353], "tip": [569, 820], "titl": [46, 330, 333, 1329, 1334, 1338], "titlecas": [712, 1291], "tm": [431, 459, 940, 1353], "to_arrow": [234, 330, 1310, 1329, 1357], "to_batch": [234, 330], "to_dict": [192, 265, 330, 838, 934, 940], "to_dummi": [287, 292, 330, 1329], "to_fram": [403, 437, 454, 458, 467, 704, 939, 1028, 1203, 1228, 1230, 1275, 1276, 1283, 1329, 1334], "to_init_repr": [136, 330, 1329], "to_jax": [292, 330, 1329], "to_list": [136, 262, 330, 1246, 1258, 1329], "to_lowercas": 601, "to_numpi": [287, 292, 330, 568, 820, 1329], "to_panda": [330, 1329], "to_phys": [820, 1010, 1329], "to_python": 939, "to_seri": [58, 216, 330, 704, 745, 795, 1283, 1352], "to_sql": [44, 330], "to_str": [456, 1067], "to_struct": [330, 676], "to_torch": [287, 330, 1329], "to_uppercas": [341, 600, 677, 820], "togeth": 1352, "token": [2, 7, 43, 47, 51, 52, 53, 54, 55, 154, 156, 158, 160, 161, 162, 163, 330, 934], "tokyo": [136, 940], "tokyo_tz": 940, "toler": [167, 168, 169, 170, 236, 330, 865, 934], "tone": [46, 330], "tonight": [668, 692, 1247, 1271], "too": [20, 255, 330, 387, 610, 820, 934, 990], "tooltip": [330, 333, 1329, 1334], "toomanyrowsreturnederror": [263, 330], "top": [46, 277, 293, 330, 333, 727, 820, 893, 897, 934, 1329, 1334, 1357], "top_col": [46, 330], "top_k": [191, 330, 399, 400, 727, 820, 836, 934, 1002, 1329], "top_k_bi": [399, 400, 726, 820], "top_row": [46, 330], "tor_id": 136, "torch": [166, 292, 330, 1313, 1329], "torchexporttyp": [292, 330], "total": [46, 207, 311, 330, 460, 461, 462, 463, 464, 465, 466, 521, 541, 820, 912, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1088, 1135, 1155, 1329], "total_gross": 1338, "toward": [311, 521, 541, 820, 912, 1135, 1155, 1329], "tp": [1, 60], "tpu": [287, 330, 1308, 1329], "tr15": [687, 1266], "trace": 75, "traceback": [167, 168, 169, 170, 288, 330, 625, 820, 1210, 1310, 1329], "tracebacktyp": 1357, "track": [148, 159, 160, 240, 330, 560, 1357], "trail": [34, 219, 330, 699, 700, 1278, 1279], "train": [292, 330], "train_lf": [906, 934], "transfer": 147, "transferencod": [384, 385, 670, 671, 987, 988, 1249, 1250], "transform": [240, 277, 330, 568, 712, 799, 820, 893, 934, 1291], "transform_dens": [1329, 1334], "transit": [212, 330, 856, 934], "translat": 146, "transpar": [841, 934], "transpos": [255, 330], "travel": [148, 159], "travers": [632, 634, 636, 638, 640, 643, 645, 647, 820, 1216, 1217, 1219, 1222, 1223, 1224, 1329], "treat": [144, 145, 158, 186, 476, 667, 669, 679, 690, 691, 810, 820, 942, 1090, 1246, 1248, 1258, 1269, 1270, 1329], "tree": [585, 852, 934], "tree_format": [852, 934], "trend": [46, 330], "tri": [240, 330], "triangl": [316, 917], "trigger": [45, 141, 238, 289, 330, 820, 1311, 1329], "trigonometri": [1350, 1356], "trim": [136, 1352], "trim_decimal_zero": 34, "trip": 146, "true": [13, 14, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 43, 44, 45, 46, 51, 52, 53, 54, 55, 63, 64, 65, 129, 130, 131, 132, 134, 135, 136, 138, 140, 141, 144, 145, 146, 148, 149, 150, 152, 155, 156, 158, 159, 161, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 184, 188, 192, 193, 194, 199, 201, 206, 211, 212, 214, 216, 218, 219, 220, 221, 226, 228, 229, 230, 233, 235, 236, 237, 238, 243, 244, 250, 251, 253, 255, 256, 259, 263, 264, 265, 266, 268, 276, 277, 280, 283, 285, 287, 288, 289, 292, 294, 295, 296, 298, 299, 300, 304, 310, 312, 314, 317, 318, 319, 320, 321, 322, 323, 330, 333, 340, 341, 342, 343, 344, 345, 356, 358, 359, 362, 366, 367, 375, 379, 383, 384, 386, 389, 390, 395, 398, 400, 401, 402, 406, 414, 415, 416, 417, 418, 420, 427, 429, 432, 435, 437, 439, 446, 447, 449, 450, 453, 454, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 477, 478, 485, 492, 494, 495, 496, 497, 500, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 523, 524, 528, 535, 537, 539, 555, 560, 567, 568, 569, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 604, 605, 607, 609, 612, 613, 617, 622, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 655, 656, 660, 662, 663, 666, 667, 668, 669, 670, 672, 678, 679, 680, 682, 683, 684, 690, 691, 695, 696, 698, 704, 706, 707, 709, 711, 715, 717, 718, 727, 729, 732, 735, 736, 737, 738, 739, 741, 744, 745, 746, 751, 760, 763, 769, 775, 779, 782, 786, 792, 795, 798, 799, 802, 804, 807, 810, 811, 820, 838, 839, 840, 841, 842, 846, 848, 852, 855, 856, 859, 860, 864, 865, 866, 868, 870, 874, 879, 881, 885, 890, 892, 893, 898, 899, 900, 901, 904, 909, 911, 913, 915, 918, 919, 920, 921, 922, 923, 924, 933, 934, 939, 940, 947, 948, 960, 962, 963, 966, 970, 971, 979, 986, 987, 989, 992, 1003, 1004, 1006, 1009, 1011, 1014, 1015, 1028, 1034, 1035, 1036, 1039, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1084, 1086, 1087, 1089, 1091, 1092, 1099, 1108, 1112, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1137, 1138, 1142, 1149, 1151, 1153, 1169, 1182, 1188, 1194, 1196, 1199, 1200, 1203, 1206, 1207, 1221, 1240, 1242, 1245, 1246, 1247, 1248, 1249, 1251, 1257, 1258, 1259, 1261, 1262, 1263, 1269, 1270, 1274, 1275, 1277, 1283, 1285, 1286, 1288, 1290, 1305, 1310, 1311, 1318, 1320, 1329, 1334, 1338, 1339, 1341, 1343, 1347, 1349, 1352, 1357, 1360], "truediv": [489, 820], "truncat": [26, 136, 144, 145, 158, 219, 221, 233, 264, 265, 284, 330, 860, 879, 934, 1356], "truncate_nod": [879, 934], "truncate_ragged_lin": [144, 145, 158], "truncate_str": 467, "truncate_td": 467, "trust": [422, 820, 847, 934], "try": [7, 43, 47, 51, 52, 53, 54, 55, 63, 64, 123, 144, 145, 150, 154, 156, 158, 161, 162, 163, 330, 841, 842, 852, 879, 890, 934], "try_cast": 1350, "try_parse_d": [138, 144, 145, 158], "try_parse_hive_d": [156, 161, 163], "ts_local": [453, 1064], "tseri": [446, 447, 1057, 1058], "tstamp": 940, "tstamp_tokyo": 940, "tstamp_utc": 940, "tue": [330, 333], "tuesdai": [221, 330, 860, 934], "tupl": [46, 66, 147, 149, 155, 189, 233, 240, 253, 263, 264, 265, 272, 292, 308, 330, 584, 626, 820, 879, 890, 934, 939, 940, 1211, 1232, 1329], "turn": [14, 52, 53, 54, 55, 63, 64, 144, 145, 158, 235, 236, 330, 841, 842, 852, 864, 865, 870, 879, 934], "twice": [46, 330], "two": [46, 56, 96, 97, 131, 133, 135, 147, 189, 212, 214, 236, 237, 246, 247, 264, 291, 297, 310, 316, 330, 334, 340, 424, 431, 489, 492, 495, 560, 617, 662, 742, 743, 749, 751, 753, 760, 763, 796, 797, 799, 820, 856, 865, 866, 874, 875, 900, 911, 917, 934, 940, 983, 1031, 1038, 1174, 1203, 1329, 1344, 1345, 1346, 1349, 1358], "two_a": 1357, "tworld": [701, 1278, 1280], "txt": [1, 18, 158, 667, 679, 1258, 1352], "type": [0, 1, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 46, 52, 53, 54, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 129, 131, 132, 133, 134, 135, 137, 144, 145, 146, 148, 149, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 186, 189, 195, 205, 208, 214, 219, 221, 222, 234, 235, 240, 262, 267, 270, 282, 287, 288, 291, 292, 295, 307, 330, 342, 344, 347, 348, 349, 350, 351, 352, 355, 360, 361, 362, 364, 367, 378, 379, 383, 384, 385, 386, 387, 388, 389, 401, 403, 404, 405, 409, 410, 411, 412, 413, 420, 421, 427, 428, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 479, 481, 492, 495, 498, 506, 507, 508, 509, 510, 511, 512, 521, 525, 526, 528, 533, 539, 541, 559, 560, 568, 569, 583, 617, 619, 623, 624, 625, 626, 628, 629, 630, 633, 635, 637, 639, 641, 644, 646, 648, 657, 658, 659, 666, 669, 670, 671, 674, 675, 676, 677, 680, 681, 682, 684, 685, 686, 694, 695, 696, 697, 704, 705, 709, 723, 724, 725, 732, 741, 749, 752, 759, 760, 761, 762, 763, 764, 765, 767, 775, 776, 778, 779, 780, 781, 782, 792, 795, 806, 807, 808, 811, 816, 820, 832, 841, 842, 851, 852, 853, 860, 864, 879, 883, 884, 890, 898, 908, 934, 939, 942, 947, 948, 960, 962, 963, 964, 965, 966, 968, 970, 971, 982, 983, 984, 986, 987, 988, 990, 991, 1003, 1005, 1007, 1008, 1016, 1028, 1029, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1087, 1090, 1094, 1110, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1137, 1138, 1139, 1140, 1142, 1147, 1153, 1155, 1173, 1174, 1196, 1203, 1209, 1210, 1211, 1213, 1214, 1235, 1237, 1245, 1246, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1259, 1260, 1261, 1263, 1264, 1265, 1273, 1274, 1275, 1276, 1283, 1284, 1288, 1309, 1310, 1312, 1320, 1329, 1338, 1345, 1350, 1352, 1356, 1357], "type_coercion": [52, 53, 54, 55, 63, 64, 841, 842, 852, 879, 890, 934], "typeerror": [45, 330], "typenam": [46, 330], "typic": [132, 146, 163, 240, 330, 436, 657, 820, 940, 1043, 1182, 1237, 1329], "tz": [707, 1286], "tzinfo": [72, 148, 159, 940], "u": [46, 72, 74, 163, 176, 236, 330, 429, 431, 437, 458, 470, 704, 707, 737, 739, 762, 763, 764, 765, 771, 865, 934, 939, 940, 1036, 1038, 1044, 1069, 1081, 1283, 1286, 1342, 1353], "u1": [288, 330], "u16": [158, 1355, 1360], "u32": [18, 146, 190, 192, 198, 252, 306, 307, 311, 315, 321, 323, 330, 340, 346, 353, 354, 355, 356, 357, 360, 361, 363, 372, 388, 404, 405, 413, 414, 500, 502, 521, 525, 526, 529, 541, 546, 592, 608, 620, 628, 629, 633, 635, 637, 639, 641, 644, 646, 648, 652, 669, 679, 680, 685, 686, 687, 725, 730, 732, 736, 740, 744, 745, 752, 754, 775, 778, 790, 820, 835, 838, 845, 877, 907, 908, 912, 916, 922, 924, 934, 940, 959, 960, 961, 964, 965, 967, 976, 1003, 1007, 1008, 1010, 1022, 1112, 1139, 1140, 1143, 1155, 1160, 1205, 1213, 1214, 1229, 1248, 1258, 1259, 1264, 1265, 1312, 1316, 1318, 1329, 1338, 1346, 1347, 1348, 1352, 1357], "u64": [222, 307, 330, 498, 622, 820, 879, 908, 934, 940, 1110, 1207, 1329], "u8": [192, 285, 286, 298, 330, 625, 735, 820, 838, 934, 940, 1210, 1305, 1329, 1360], "udf": [180, 240, 254, 316, 330, 422, 569, 614, 782, 820, 847, 878, 917, 934, 1182, 1329], "ufunc": 103, "uid": 146, "uint": 1360, "uint16": [158, 417, 418, 721, 820, 940, 1025, 1026, 1300, 1310, 1313, 1329], "uint2": 1355, "uint32": [137, 166, 192, 207, 262, 307, 330, 355, 360, 361, 388, 404, 405, 413, 476, 492, 495, 521, 525, 526, 541, 623, 628, 629, 630, 633, 635, 637, 639, 641, 644, 646, 648, 669, 680, 685, 686, 725, 752, 775, 778, 820, 838, 883, 908, 934, 940, 960, 964, 965, 991, 1003, 1007, 1008, 1088, 1090, 1139, 1140, 1155, 1213, 1214, 1248, 1259, 1264, 1265, 1312, 1313, 1329], "uint4": 1357, "uint64": [137, 222, 262, 307, 330, 360, 361, 476, 498, 525, 526, 622, 630, 633, 635, 637, 639, 641, 644, 646, 648, 820, 883, 908, 934, 940, 964, 965, 1090, 1110, 1139, 1140, 1207, 1313, 1329], "uint8": [146, 192, 286, 287, 288, 298, 330, 417, 418, 625, 721, 735, 820, 838, 934, 939, 940, 1025, 1026, 1210, 1300, 1313, 1329, 1360], "uint8_pair": 1360, "uit": [694, 1273], "uk": [676, 1255], "unabl": [105, 149], "unalias": 575, "unari": [606, 820], "unbias": [477, 478, 820, 1091, 1092, 1329], "unchang": [207, 330, 624, 725, 820, 870, 917, 934, 1088, 1209, 1312, 1329], "uncompress": [41, 47, 48, 51, 55, 150, 161, 330, 934], "undefin": [728, 820], "under": [5, 6, 7, 43, 47, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 96, 97, 154, 156, 158, 161, 162, 163, 255, 277, 330, 812, 813, 815, 816, 821, 822, 825, 827, 828, 829, 893, 934, 1321, 1323, 1325, 1330, 1335, 1336, 1337], "underli": [1, 56, 71, 72, 74, 89, 97, 102, 112, 129, 131, 132, 133, 135, 146, 147, 149, 153, 154, 155, 156, 162, 171, 174, 178, 208, 209, 233, 234, 264, 282, 288, 330, 384, 429, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 451, 453, 455, 459, 468, 469, 470, 471, 622, 649, 667, 670, 679, 820, 853, 934, 940, 987, 1010, 1036, 1037, 1038, 1042, 1045, 1046, 1047, 1051, 1052, 1053, 1055, 1056, 1059, 1061, 1062, 1064, 1066, 1070, 1079, 1080, 1081, 1082, 1095, 1207, 1225, 1235, 1246, 1249, 1258, 1304, 1310, 1329, 1357], "understood": 782, "undo": [586, 593, 594, 596, 598, 600, 601], "unexpect": [112, 121, 146, 568, 569, 820, 1182, 1329], "unhelpfulli": [167, 169], "unicod": [26, 405, 681, 686, 687, 694, 705, 940, 1008, 1260, 1265, 1266, 1273, 1284, 1352], "unicodeform": [687, 1266], "unifi": [46, 287, 292, 330, 940], "uniform": [46, 330, 617, 820, 1203, 1329], "unimod": [660, 820, 1240, 1329], "unintend": [212, 330, 856, 934], "union": [63, 64, 65, 552, 841, 842, 852, 879, 890, 934, 940, 1166, 1356, 1357], "uniqu": [51, 55, 57, 75, 141, 149, 171, 172, 173, 176, 178, 190, 230, 235, 251, 255, 265, 321, 330, 346, 357, 372, 420, 517, 546, 592, 617, 704, 706, 707, 711, 730, 732, 740, 790, 820, 835, 864, 922, 934, 950, 961, 976, 1028, 1130, 1160, 1189, 1203, 1283, 1285, 1286, 1290, 1316, 1318, 1329, 1345, 1347], "unique_column_valu": [255, 330], "unique_count": [820, 1329], "uniquekeepstrategi": [295, 330, 898, 934], "unit": [46, 72, 74, 141, 167, 168, 169, 170, 174, 178, 207, 330, 388, 429, 431, 437, 452, 458, 470, 476, 482, 566, 581, 704, 707, 731, 748, 762, 763, 764, 765, 771, 820, 879, 934, 940, 991, 1036, 1038, 1044, 1063, 1069, 1081, 1088, 1090, 1096, 1180, 1283, 1286, 1317, 1329, 1360], "uniti": [2, 3, 5, 6, 7, 832], "univers": [186, 942], "unix": [71, 72, 437, 771, 1044], "unknown": [560, 675, 780, 1254], "unless": [46, 57, 131, 287, 292, 330, 699, 700, 795, 934, 1278, 1352], "unlik": [140, 221, 330, 860, 934], "unnam": [677, 1256], "unnest": [140, 330, 420, 617, 628, 676, 677, 696, 697, 717, 719, 732, 820, 934, 983, 1028, 1174, 1203, 1213, 1275, 1276, 1329, 1350, 1356], "unpivot": [246, 330, 874, 934], "unregist": [1340, 1341, 1342, 1357, 1359], "unsaf": [141, 820], "unset": [44, 156, 161, 173, 315, 330, 392, 393, 394, 396, 397, 453, 560, 820, 916, 995, 996, 997, 999, 1000, 1064, 1329, 1338], "unsign": [90, 91, 92, 93, 622, 820, 940, 1207, 1329], "unsigned_integ": 940, "unstabl": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 127, 139, 140, 146, 148, 154, 156, 158, 159, 161, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 277, 287, 292, 299, 330, 333, 334, 419, 420, 500, 569, 617, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 748, 820, 841, 842, 852, 893, 901, 934, 1011, 1027, 1028, 1112, 1203, 1215, 1218, 1220, 1221, 1308, 1313, 1329, 1334], "unstack": 330, "unstackdirect": [298, 330], "unsuit": 128, "unsupport": [45, 330], "until": [96, 221, 238, 330, 688, 689, 714, 860, 934, 1267, 1268, 1293], "up": [16, 46, 88, 147, 233, 236, 255, 264, 265, 271, 284, 330, 408, 409, 569, 681, 690, 691, 705, 820, 864, 865, 870, 888, 934, 940, 1013, 1260, 1269, 1270, 1284, 1329], "upcast": [345, 820], "upcast_integer_typ": [1, 60], "updat": [45, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 184, 199, 330, 846, 934], "upgrad": 108, "upheld": [870, 934], "upon": 145, "upper": [144, 145, 146, 207, 221, 330, 409, 500, 506, 560, 595, 731, 741, 760, 761, 763, 764, 779, 807, 808, 820, 860, 934, 1016, 1088, 1112, 1117, 1180, 1317, 1329, 1347, 1350], "upper_bound": [221, 330, 409, 506, 560, 820, 860, 934, 1016, 1117, 1180, 1329], "uppercas": [601, 713, 1292, 1352], "upsampl": [221, 330, 860, 934], "urandom": [388, 991], "uri": [44, 45, 146, 147, 148, 159, 160, 330], "url": [2, 146, 147, 156, 161, 163, 675, 677, 1254, 1256], "urllib": 147, "us": [1, 2, 13, 15, 17, 18, 20, 26, 31, 33, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 51, 52, 55, 56, 57, 63, 64, 65, 66, 72, 88, 96, 97, 100, 104, 127, 130, 132, 133, 135, 137, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 190, 191, 192, 195, 199, 201, 203, 204, 210, 211, 212, 214, 220, 221, 228, 230, 232, 233, 234, 236, 240, 246, 250, 251, 253, 254, 255, 262, 263, 264, 265, 266, 268, 269, 271, 276, 277, 278, 282, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 305, 306, 307, 309, 316, 330, 333, 340, 342, 344, 346, 355, 356, 379, 384, 385, 387, 400, 402, 404, 405, 406, 409, 419, 422, 425, 426, 434, 452, 453, 454, 456, 459, 467, 470, 472, 475, 476, 477, 478, 479, 483, 484, 485, 489, 500, 504, 505, 506, 518, 532, 548, 556, 560, 562, 568, 569, 572, 593, 596, 598, 600, 601, 610, 617, 620, 622, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 651, 653, 655, 656, 660, 662, 663, 665, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 683, 684, 685, 686, 687, 690, 691, 692, 694, 696, 698, 700, 701, 702, 703, 704, 706, 707, 711, 714, 715, 719, 727, 733, 734, 736, 737, 738, 739, 740, 743, 744, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 771, 775, 776, 778, 779, 780, 782, 783, 784, 786, 788, 789, 792, 795, 796, 797, 798, 799, 801, 802, 803, 804, 807, 808, 809, 810, 811, 816, 819, 820, 831, 832, 835, 836, 837, 838, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 859, 860, 865, 868, 874, 883, 884, 885, 886, 888, 892, 893, 894, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 917, 934, 938, 939, 940, 947, 948, 950, 979, 983, 987, 988, 990, 1007, 1008, 1011, 1027, 1029, 1032, 1033, 1041, 1049, 1050, 1063, 1064, 1065, 1067, 1070, 1078, 1081, 1084, 1089, 1090, 1091, 1092, 1097, 1098, 1103, 1109, 1112, 1115, 1116, 1117, 1132, 1146, 1162, 1169, 1174, 1182, 1203, 1205, 1207, 1209, 1211, 1213, 1214, 1215, 1227, 1228, 1230, 1231, 1234, 1240, 1242, 1244, 1245, 1246, 1247, 1249, 1250, 1253, 1254, 1255, 1257, 1258, 1259, 1264, 1265, 1266, 1269, 1270, 1271, 1273, 1275, 1283, 1285, 1286, 1290, 1293, 1304, 1305, 1307, 1310, 1311, 1319, 1329, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1352, 1353, 1357, 1360], "usag": [174, 178, 274, 330, 940, 1235, 1329], "usd": [219, 330, 1360], "use_pyarrow": [51, 55, 144, 148, 150, 152, 156, 159, 288, 330, 934, 1310, 1329], "use_pyarrow_extension_arrai": [289, 330, 1311, 1329], "use_pyarrow_write_to_dataset": [51, 330], "use_statist": [156, 163], "user": [44, 139, 141, 146, 147, 186, 240, 254, 316, 330, 568, 569, 614, 653, 782, 820, 878, 917, 934, 938, 942, 1182, 1231, 1329], "user_conn": 146, "usernam": [144, 147, 150, 152], "userwarn": 1, "usr": 146, "usual": [104, 147, 184, 292, 330, 428, 1035], "utc": [148, 159, 428, 432, 434, 436, 453, 704, 707, 939, 940, 1035, 1039, 1043, 1064, 1283, 1286], "utc_tz": 940, "utf": [43, 52, 87, 330, 934], "utf8": [26, 144, 145, 158, 681, 694, 705, 1260, 1273, 1284], "utf8_borders_onli": 26, "utf8_ful": [26, 57, 136], "utf8_full_condens": [13, 26, 136], "utf8_horizontal_onli": 26, "utf8_no_bord": 26, "util": [292, 330, 771, 934], "uvloop": 146, "uvw": [676, 1255], "v": [14, 15, 51, 207, 330, 652, 737, 739, 820, 1229, 1329, 1341, 1342], "v1": 38, "v2": [14, 150, 161], "val": [46, 261, 330, 569, 614, 725, 810, 820, 882, 934], "valid": [43, 46, 52, 72, 144, 146, 150, 152, 156, 158, 178, 184, 201, 207, 235, 236, 259, 330, 419, 667, 669, 675, 676, 677, 679, 684, 690, 691, 810, 820, 848, 864, 865, 881, 909, 934, 940, 1027, 1088, 1246, 1248, 1254, 1255, 1256, 1258, 1263, 1269, 1270, 1329, 1338, 1339], "validate_output_schema": [870, 934], "vals_phys": [725, 820], "valu": [10, 11, 16, 17, 18, 19, 23, 26, 34, 36, 42, 43, 46, 51, 52, 55, 56, 57, 65, 66, 69, 75, 76, 84, 85, 94, 97, 106, 131, 132, 134, 135, 144, 145, 146, 147, 156, 158, 161, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 184, 188, 190, 191, 192, 199, 203, 204, 206, 209, 210, 211, 212, 216, 219, 221, 222, 223, 227, 231, 233, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 253, 255, 256, 257, 259, 262, 263, 264, 265, 266, 273, 276, 278, 279, 280, 281, 283, 284, 288, 289, 293, 294, 297, 298, 299, 300, 301, 308, 311, 312, 314, 317, 318, 320, 321, 330, 333, 334, 338, 339, 340, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 380, 381, 382, 384, 385, 386, 387, 388, 389, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 418, 419, 420, 423, 425, 426, 431, 435, 445, 450, 459, 468, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 523, 524, 525, 526, 529, 530, 531, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 553, 555, 556, 557, 558, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 577, 588, 589, 590, 591, 592, 602, 603, 604, 605, 608, 610, 611, 614, 615, 617, 618, 620, 623, 624, 625, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 657, 658, 659, 660, 662, 663, 664, 666, 667, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 705, 714, 716, 720, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 744, 747, 749, 750, 752, 754, 755, 756, 757, 758, 768, 769, 774, 775, 776, 777, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 794, 795, 796, 797, 803, 804, 810, 820, 835, 836, 846, 849, 850, 854, 855, 856, 860, 862, 863, 864, 865, 871, 872, 873, 874, 876, 877, 880, 881, 883, 889, 892, 894, 895, 897, 900, 901, 902, 912, 913, 915, 918, 919, 921, 922, 934, 940, 945, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 984, 985, 987, 988, 989, 990, 991, 992, 1003, 1004, 1007, 1008, 1009, 1013, 1016, 1018, 1019, 1020, 1022, 1027, 1028, 1029, 1030, 1032, 1033, 1038, 1042, 1056, 1061, 1070, 1079, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1102, 1103, 1104, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1145, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1167, 1169, 1170, 1171, 1172, 1175, 1176, 1182, 1183, 1184, 1186, 1187, 1189, 1191, 1192, 1194, 1195, 1197, 1198, 1202, 1203, 1204, 1205, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1230, 1233, 1237, 1238, 1239, 1240, 1242, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1284, 1293, 1296, 1300, 1301, 1302, 1303, 1310, 1311, 1312, 1316, 1318, 1320, 1329, 1338, 1343, 1345, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1355, 1357, 1359, 1360], "value1": [663, 820], "value2": [663, 820], "value_a": 1357, "value_b": 1357, "value_count": [730, 820, 1329], "value_cum_sum": [418, 820], "value_cum_sum_all_fil": [418, 820], "value_nam": [246, 297, 330, 874, 900, 934], "value_var": [246, 297, 330, 874, 900, 934], "valueerror": [21, 26], "valueexcept": 780, "var": [46, 179, 330, 647, 648, 820, 934, 1329, 1346], "var_samp": 1346, "vari": [149, 155, 428, 1035, 1360], "variabl": [7, 36, 43, 47, 51, 52, 53, 54, 55, 84, 154, 156, 158, 161, 162, 163, 177, 180, 246, 285, 297, 330, 874, 900, 934, 1305, 1329, 1339, 1341, 1357], "variable_nam": [246, 297, 330, 874, 900, 934], "variad": 146, "varianc": [301, 330, 478, 518, 647, 648, 733, 809, 820, 902, 934, 1092, 1132, 1224, 1319, 1329, 1350], "variou": [146, 189, 195, 330, 820, 843, 934, 939, 940, 1329], "vector": [632, 634, 636, 638, 640, 643, 645, 647, 820, 1216, 1217, 1219, 1222, 1223, 1224, 1329], "vectoris": [446, 447, 1057, 1058], "vein": 184, "verbos": [35, 167, 169, 184, 676, 1255], "veri": [146, 233, 294, 330, 569, 820, 917, 1351], "verifi": [236, 330, 865, 934], "versicolor": [330, 333], "version": [7, 44, 45, 62, 66, 144, 145, 148, 149, 159, 166, 171, 172, 173, 174, 178, 181, 188, 190, 200, 222, 235, 246, 270, 277, 287, 288, 292, 306, 311, 330, 333, 422, 434, 446, 447, 459, 470, 491, 498, 576, 577, 583, 587, 624, 666, 674, 719, 734, 743, 751, 794, 799, 820, 835, 847, 852, 864, 874, 887, 893, 906, 907, 912, 934, 940, 1041, 1049, 1050, 1057, 1058, 1070, 1081, 1109, 1110, 1209, 1245, 1253, 1308, 1310, 1313, 1329, 1334], "versu": [199, 330, 846, 934], "vertic": [65, 209, 298, 302, 330, 666, 682, 1245, 1261], "vertical_relax": 65, "via": [36, 144, 145, 146, 156, 158, 161, 162, 163, 187, 189, 200, 233, 264, 330, 422, 569, 677, 820, 847, 934, 943, 1256], "view": [569, 820], "visibl": [23, 207, 330, 1088, 1329], "visit": [419, 820, 1027, 1329], "visual": [228, 230, 330, 584, 890, 934], "volk": 140, "vote": [675, 677, 1254, 1256], "vowel": [690, 691, 1269, 1270], "vstack": [65, 209, 330], "w": [46, 146, 221, 265, 330, 669, 673, 675, 677, 737, 739, 860, 934, 940, 1248, 1252, 1254, 1256, 1279, 1341, 1342, 1345], "w_i": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "wa": [44, 62, 104, 149, 200, 287, 288, 330, 333, 422, 625, 692, 765, 820, 847, 934, 940, 1210, 1271, 1310, 1329, 1334], "wai": [96, 97, 129, 131, 132, 133, 135, 153, 154, 162, 220, 234, 254, 276, 309, 330, 454, 614, 663, 675, 752, 816, 820, 844, 851, 859, 878, 884, 892, 903, 910, 917, 934, 938, 1065, 1254], "walk": 750, "want": [64, 132, 134, 144, 149, 158, 184, 209, 240, 251, 262, 277, 330, 404, 427, 485, 568, 569, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 656, 668, 685, 690, 691, 692, 746, 755, 760, 763, 769, 792, 795, 811, 820, 842, 893, 909, 934, 940, 1007, 1034, 1095, 1182, 1247, 1264, 1269, 1270, 1271, 1329, 1344], "warehous": 147, "warn": [99, 100, 103, 104, 107, 114, 116, 117, 127, 236, 330, 610, 779, 820, 865, 934, 1329], "watermark": [51, 330], "wb": [46, 330], "we": [51, 142, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 189, 199, 200, 221, 236, 255, 262, 300, 330, 333, 422, 449, 454, 467, 500, 532, 560, 568, 569, 630, 633, 635, 637, 639, 641, 644, 646, 648, 677, 690, 691, 709, 759, 760, 761, 762, 763, 764, 780, 807, 808, 810, 820, 846, 847, 860, 865, 870, 883, 934, 1060, 1065, 1078, 1112, 1146, 1182, 1256, 1270, 1288, 1329, 1334, 1341], "weather": [690, 691, 1269, 1270], "wed": [330, 333], "wednesdai": [221, 330, 456, 459, 860, 934, 1067, 1070], "week": [221, 236, 262, 300, 330, 427, 449, 454, 467, 469, 476, 630, 633, 635, 637, 639, 641, 644, 646, 648, 746, 760, 761, 763, 764, 765, 807, 808, 820, 860, 865, 883, 934, 940, 1034, 1060, 1065, 1078, 1080, 1090, 1329, 1353], "week_mask": [427, 746, 1034], "weekdai": [435, 450], "weekend": [427, 746, 1034], "weekli": [221, 330, 467, 860, 934, 1078], "weghorst": [677, 1256], "weight": [140, 475, 476, 477, 478, 631, 632, 634, 636, 638, 640, 643, 645, 647, 660, 820, 1089, 1090, 1091, 1092, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1240, 1329], "wei\u00df": 1352, "well": [46, 144, 145, 146, 158, 330, 506, 799, 820, 1117, 1329, 1357], "were": [184, 624, 625, 816, 820, 1209, 1210, 1329], "west": [75, 237, 330, 866, 934], "what": [189, 251, 330, 427, 568, 668, 692, 820, 1034, 1247, 1271], "whatev": 184, "when": [16, 20, 23, 25, 29, 43, 44, 45, 46, 47, 48, 51, 52, 55, 56, 72, 88, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 139, 140, 144, 145, 146, 147, 149, 150, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 174, 178, 184, 191, 199, 205, 207, 209, 211, 214, 221, 235, 237, 240, 247, 254, 259, 263, 265, 268, 269, 273, 276, 282, 285, 287, 288, 292, 293, 295, 299, 305, 330, 374, 387, 404, 405, 409, 427, 475, 477, 478, 484, 553, 560, 581, 614, 624, 625, 654, 662, 663, 668, 674, 678, 680, 681, 685, 686, 692, 694, 699, 700, 701, 704, 705, 744, 746, 755, 769, 779, 820, 836, 846, 855, 860, 864, 866, 870, 875, 881, 885, 886, 889, 892, 897, 898, 901, 905, 931, 934, 978, 990, 1007, 1008, 1016, 1029, 1034, 1088, 1089, 1091, 1092, 1095, 1098, 1167, 1209, 1210, 1228, 1230, 1233, 1247, 1253, 1257, 1259, 1260, 1264, 1265, 1271, 1273, 1278, 1279, 1280, 1283, 1284, 1304, 1305, 1310, 1329, 1344, 1357], "when_matched_update_al": [45, 330], "when_not_matched_insert_al": [45, 330], "where": [46, 57, 104, 146, 147, 149, 203, 204, 209, 212, 221, 233, 237, 246, 255, 264, 277, 278, 287, 292, 297, 299, 301, 330, 356, 459, 469, 472, 474, 476, 485, 556, 562, 568, 605, 623, 652, 660, 663, 665, 692, 712, 733, 745, 751, 753, 796, 797, 799, 801, 809, 810, 820, 849, 850, 856, 860, 866, 874, 893, 894, 900, 901, 902, 934, 960, 1070, 1080, 1084, 1086, 1090, 1095, 1099, 1194, 1229, 1240, 1244, 1271, 1291, 1319, 1320, 1329, 1338, 1346, 1356, 1357, 1359], "wherea": [144, 158, 262, 330, 402, 406, 454, 467, 602, 603, 630, 820, 883, 934, 1065, 1078, 1191, 1192, 1329], "wherev": [46, 240, 316, 330, 569, 820, 1182, 1329], "whether": [43, 52, 133, 135, 140, 149, 155, 156, 161, 163, 178, 182, 206, 232, 236, 271, 276, 330, 342, 344, 358, 359, 439, 455, 497, 523, 524, 610, 653, 663, 678, 680, 744, 820, 865, 870, 888, 892, 934, 940, 947, 948, 962, 963, 1006, 1011, 1046, 1066, 1087, 1108, 1109, 1137, 1138, 1257, 1259, 1329, 1341, 1357], "which": [1, 12, 16, 26, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 132, 134, 144, 145, 146, 147, 148, 149, 154, 155, 156, 158, 159, 160, 161, 162, 163, 174, 177, 179, 184, 191, 192, 199, 200, 203, 204, 209, 210, 220, 221, 226, 235, 236, 255, 262, 270, 287, 288, 293, 295, 300, 330, 342, 379, 387, 422, 427, 449, 454, 456, 467, 476, 482, 506, 508, 511, 513, 514, 515, 516, 560, 568, 569, 581, 583, 630, 633, 635, 637, 639, 641, 644, 646, 648, 691, 709, 746, 760, 761, 763, 764, 765, 779, 807, 808, 810, 820, 836, 838, 841, 844, 846, 847, 849, 850, 851, 852, 860, 864, 865, 883, 887, 897, 898, 903, 934, 940, 983, 990, 1034, 1060, 1065, 1067, 1078, 1090, 1095, 1096, 1117, 1120, 1123, 1125, 1126, 1127, 1128, 1174, 1230, 1288, 1308, 1310, 1329, 1339, 1345, 1357, 1360], "while": [7, 45, 64, 145, 148, 149, 159, 163, 174, 178, 184, 233, 246, 294, 297, 299, 330, 405, 624, 686, 820, 842, 874, 900, 901, 934, 1008, 1209, 1265, 1329], "white": [46, 330], "whitespac": [136, 699, 700, 701, 1278, 1279, 1280, 1352], "whole": [568, 662, 663, 675, 820, 917, 934, 1254], "whose": [57, 236, 255, 330, 479, 767, 820, 865, 934, 940], "why": [841, 934], "wide": [146, 219, 246, 255, 297, 298, 330, 874, 900, 934], "width": [32, 46, 66, 144, 145, 158, 330, 333, 559, 748, 934, 1173, 1329, 1334], "wiki": 26, "wikipedia": 26, "wildcard": [141, 479, 715, 755, 756, 769, 794, 816, 820], "win_loss": [46, 330], "window": [144, 145, 158, 221, 262, 330, 419, 475, 477, 478, 569, 610, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 749, 796, 797, 820, 860, 883, 934, 1027, 1089, 1091, 1092, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1329], "window_s": [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 796, 797, 820, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1329], "windowmappingstrategi": [610, 820], "winter": [678, 680, 690, 691, 1257, 1259], "wise": [46, 57, 146, 214, 330, 347, 348, 349, 350, 351, 352, 410, 411, 412, 480, 564, 657, 658, 659, 723, 724, 769, 794, 820, 951, 952, 953, 954, 955, 956, 1018, 1019, 1020, 1093, 1178, 1179, 1237, 1238, 1239, 1302, 1303, 1329], "wish": [191, 293, 330, 399, 400, 726, 727, 820, 836, 897, 934, 1002, 1314, 1329], "with_column": [1, 18, 60, 63, 64, 139, 221, 254, 262, 292, 298, 305, 330, 339, 341, 356, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 372, 373, 374, 375, 379, 384, 385, 387, 388, 401, 402, 404, 405, 406, 409, 414, 415, 416, 417, 418, 420, 423, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 468, 469, 471, 473, 474, 476, 483, 484, 489, 494, 496, 498, 504, 505, 506, 509, 510, 512, 513, 514, 515, 516, 520, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 568, 569, 589, 591, 593, 594, 596, 598, 600, 601, 604, 605, 606, 610, 611, 614, 615, 617, 620, 624, 625, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 654, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 709, 710, 712, 713, 714, 716, 719, 720, 725, 728, 735, 737, 739, 742, 746, 747, 748, 749, 750, 755, 756, 758, 759, 761, 762, 766, 776, 779, 781, 784, 786, 789, 800, 804, 806, 808, 810, 816, 820, 841, 842, 852, 860, 862, 878, 879, 883, 890, 905, 934, 940, 1028, 1064, 1203, 1259, 1329, 1357], "with_column_nam": 158, "with_columns_seq": [330, 934], "with_context": 934, "with_field": [569, 820], "with_replac": [266, 330, 548, 651, 820, 1162, 1227, 1329], "with_row_count": [330, 934], "with_row_index": [1, 262, 306, 330, 633, 635, 637, 639, 641, 644, 646, 648, 820, 907, 934, 1228, 1329, 1334], "within": [51, 66, 76, 84, 167, 168, 169, 170, 220, 221, 222, 236, 262, 300, 330, 498, 620, 663, 820, 860, 865, 883, 934, 1110, 1329, 1357], "without": [1, 2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 62, 63, 64, 73, 75, 79, 104, 107, 136, 139, 140, 148, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 235, 237, 277, 287, 288, 292, 298, 299, 330, 333, 334, 419, 420, 500, 569, 617, 631, 633, 635, 637, 639, 641, 642, 644, 646, 648, 668, 678, 680, 692, 748, 752, 779, 798, 820, 841, 842, 852, 864, 866, 893, 901, 934, 938, 1006, 1011, 1027, 1028, 1112, 1203, 1215, 1218, 1220, 1221, 1247, 1257, 1259, 1271, 1308, 1310, 1313, 1329, 1334, 1359], "without_fil": [148, 159, 160], "wod": [701, 1280], "womp": [296, 330, 899, 934], "word": [147, 690, 691, 700, 701, 712, 1291], "work": [46, 73, 75, 79, 145, 164, 269, 305, 330, 342, 344, 380, 404, 405, 408, 409, 479, 488, 532, 561, 568, 569, 593, 594, 596, 598, 600, 601, 610, 681, 685, 686, 694, 705, 729, 779, 820, 886, 905, 934, 938, 940, 947, 948, 984, 1007, 1008, 1013, 1016, 1102, 1146, 1175, 1260, 1264, 1265, 1273, 1284, 1315, 1329], "workaround": 330, "workbook": [46, 149, 155, 330], "working_with_conditional_format": [46, 330], "working_with_sparklin": [46, 330], "worksheet": [46, 149, 155, 330], "workspac": 2, "workspace_url": 2, "world": [1, 26, 668, 692, 699, 700, 701, 940, 1153, 1247, 1271, 1278, 1279, 1280, 1340, 1343], "wors": [892, 934], "worth": [532, 1146], "worthwhil": [167, 169], "would": [103, 144, 145, 158, 189, 288, 292, 330, 333, 355, 366, 427, 537, 568, 569, 580, 610, 620, 744, 746, 820, 959, 970, 1034, 1151, 1205, 1310, 1329, 1334, 1355], "wrap": [86, 136, 401, 506, 568, 820, 1003, 1329], "wrap_numer": [401, 820, 1003, 1329], "wrapper": [64, 842, 934], "writabl": [41, 43, 47, 48, 49, 50, 51, 270, 288, 330, 1310, 1329], "write": [41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 143, 145, 150, 184, 195, 330, 409, 584, 587, 820, 868, 890, 934, 940, 1016, 1329], "write_avro": 330, "write_clipboard": [143, 330], "write_csv": [42, 145, 158, 330], "write_databas": 330, "write_delta": 330, "write_excel": 330, "write_ipc": [150, 330], "write_ipc_stream": 330, "write_json": 330, "write_markdown_frame_to_stdout": 184, "write_ndjson": [49, 330], "write_parquet": 330, "write_t": [51, 330], "write_to_dataset": [51, 330], "writeabl": [288, 330, 1310, 1329], "writer": [45, 330], "writer_properti": [45, 330], "writerproperti": [45, 330], "written": [12, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 270, 330, 583, 887, 934], "ww": [1352, 1359], "www": [687, 717, 1266], "x": [33, 57, 65, 88, 106, 130, 136, 144, 145, 147, 149, 155, 158, 171, 172, 174, 188, 207, 225, 228, 230, 235, 255, 264, 265, 294, 297, 298, 330, 333, 339, 341, 343, 362, 367, 388, 414, 421, 473, 474, 489, 494, 496, 498, 520, 527, 539, 565, 567, 568, 569, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 609, 615, 623, 624, 625, 629, 657, 660, 696, 719, 720, 725, 728, 735, 737, 739, 742, 743, 749, 755, 756, 758, 769, 780, 781, 784, 786, 789, 794, 799, 804, 810, 820, 864, 870, 891, 893, 900, 934, 939, 940, 971, 1010, 1022, 1098, 1182, 1209, 1210, 1237, 1240, 1275, 1308, 1312, 1313, 1329, 1334, 1341, 1342, 1345, 1351, 1357, 1359], "x00": [383, 384, 385, 386, 387, 389, 670, 986, 987, 988, 989, 990, 992, 1249], "x01": [387, 990], "x05": [387, 990], "x07": 388, "x1": 388, "x10": [387, 990], "x80": 388, "x83": 388, "x88": 388, "x8e": 388, "x99": 388, "x_": [476, 820, 1090, 1329], "x_0": [298, 330, 475, 476, 477, 478, 820, 1089, 1090, 1091, 1092, 1329], "x_1": [298, 330, 476, 820, 1090, 1329], "x_2": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "x_i": [476, 820, 1090, 1329], "x_invers": [615, 820], "x_pow_8": 1351, "x_round": 1351, "x_round_1": 1351, "x_squar": [615, 820], "x_t": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "x_uniqu": [592, 820], "x_y": [367, 539], "xb": 388, "xb9neq": 388, "xbd": 388, "xc14": 388, "xd3": 388, "xdist": 1360, "xee": 388, "xf4v": 388, "xf9": 388, "xfb": 388, "xff": [383, 384, 385, 386, 389, 670, 986, 987, 988, 989, 992, 1249], "xi": [676, 1255], "xl": 149, "xlog2": [591, 615, 820], "xlsb": 149, "xlsx": [46, 149, 330], "xlsx2csv": [149, 166], "xlsxwriter": [46, 166, 330], "xor": [398, 820, 1001, 1329, 1348], "xor_xi": [735, 820], "xx": [16, 58, 60, 178, 199, 277, 330, 846, 934, 940, 1345, 1352, 1359], "xxx": [203, 330, 717, 849, 934], "xy": [58, 60], "xyz": [13, 22, 24, 25, 26, 27, 28, 29, 30, 31, 339, 669, 676, 820, 1248, 1255, 1306, 1329], "y": [33, 57, 65, 88, 106, 130, 136, 171, 172, 174, 188, 207, 228, 230, 235, 255, 264, 265, 294, 297, 298, 330, 333, 339, 341, 343, 362, 367, 388, 456, 459, 473, 474, 494, 496, 520, 527, 539, 567, 569, 592, 594, 596, 598, 600, 601, 604, 605, 609, 623, 624, 625, 629, 704, 706, 707, 719, 728, 735, 737, 739, 742, 743, 758, 765, 780, 784, 786, 789, 799, 804, 820, 864, 891, 893, 900, 934, 939, 940, 971, 1010, 1067, 1070, 1209, 1210, 1283, 1285, 1286, 1329, 1334, 1345, 1352, 1353, 1359], "y_": [475, 476, 477, 478, 820, 1089, 1090, 1091, 1092, 1329], "y_0": [298, 330, 475, 476, 477, 478, 820, 1089, 1090, 1091, 1092, 1329], "y_1": [298, 330], "y_i": [476, 820, 1090, 1329], "y_mul": 719, "y_t": [475, 477, 478, 820, 1089, 1091, 1092, 1329], "y_uniqu": [592, 820], "ya": [694, 1273], "ya29": 160, "year": [221, 236, 262, 277, 300, 330, 427, 439, 440, 449, 450, 452, 454, 467, 468, 630, 633, 635, 637, 639, 641, 644, 646, 648, 746, 759, 760, 761, 762, 763, 764, 807, 808, 820, 860, 865, 883, 934, 940, 1034, 1046, 1047, 1060, 1061, 1063, 1065, 1078, 1079, 1353], "yellow": [330, 334, 383, 384, 385, 386, 389], "yield": [133, 135, 144, 145, 146, 158, 207, 209, 232, 294, 330, 489, 568, 610, 820, 934, 1088, 1095, 1329], "you": [1, 16, 20, 46, 51, 55, 57, 64, 65, 129, 131, 132, 133, 134, 135, 141, 144, 145, 146, 147, 149, 150, 153, 154, 158, 162, 164, 184, 191, 209, 212, 221, 232, 233, 236, 240, 251, 255, 262, 263, 264, 265, 277, 284, 287, 293, 294, 295, 297, 316, 330, 333, 399, 400, 404, 427, 446, 447, 449, 453, 456, 459, 479, 485, 506, 532, 560, 568, 569, 584, 610, 615, 622, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 656, 668, 685, 690, 691, 692, 712, 715, 726, 727, 746, 755, 760, 763, 765, 769, 779, 782, 792, 795, 799, 811, 820, 836, 842, 856, 860, 865, 883, 890, 893, 897, 898, 900, 909, 917, 934, 938, 940, 1002, 1007, 1034, 1057, 1058, 1064, 1067, 1070, 1095, 1117, 1146, 1182, 1201, 1207, 1247, 1264, 1269, 1270, 1271, 1291, 1308, 1314, 1329, 1334, 1339, 1344, 1360], "your": [44, 46, 56, 57, 97, 139, 144, 145, 146, 147, 149, 164, 184, 233, 235, 240, 264, 265, 268, 284, 304, 309, 316, 330, 333, 432, 476, 491, 569, 677, 704, 706, 707, 714, 782, 820, 864, 870, 885, 904, 910, 917, 934, 938, 1039, 1090, 1182, 1256, 1283, 1285, 1286, 1293, 1329, 1334, 1360], "yy": [16, 58, 60, 178, 199, 277, 330, 846, 934, 940, 1345, 1352, 1359], "yyi": [203, 330, 717, 849, 934], "yyyi": [46, 330], "yz": [58, 60], "z": [46, 65, 88, 136, 172, 207, 228, 230, 235, 264, 265, 294, 297, 298, 330, 339, 341, 343, 498, 527, 569, 594, 596, 598, 600, 601, 609, 623, 624, 625, 668, 676, 678, 680, 692, 704, 707, 737, 739, 758, 784, 786, 789, 795, 799, 804, 820, 864, 891, 893, 900, 934, 939, 940, 1098, 1209, 1210, 1247, 1255, 1257, 1259, 1271, 1283, 1286, 1329, 1341, 1345, 1357, 1359], "z_0": [298, 330], "z_1": [298, 330], "zap": 940, "zero": [34, 46, 129, 130, 142, 144, 145, 150, 152, 156, 173, 176, 188, 211, 221, 233, 263, 277, 282, 288, 289, 330, 484, 560, 565, 652, 660, 714, 728, 820, 839, 855, 860, 934, 1015, 1098, 1174, 1240, 1293, 1304, 1310, 1311, 1329, 1351, 1357], "zero_copy_onli": [1310, 1329], "zfill": [689, 735, 820, 1268], "zip": 1360, "zip_with": [214, 330, 1329], "zone": [72, 174, 175, 178, 428, 432, 453, 476, 707, 762, 763, 764, 820, 940, 1035, 1039, 1064, 1090, 1286, 1329], "zoneinfo": [72, 940], "zoom": [46, 330], "zstd": [45, 47, 48, 51, 53, 55, 330, 934], "zz": [178, 199, 277, 330, 846, 934, 1345, 1352, 1359], "zzz": 717, "\u03bc": [136, 192, 221, 233, 262, 264, 265, 284, 300, 330, 428, 429, 431, 432, 433, 434, 436, 438, 441, 443, 444, 446, 447, 448, 449, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 630, 633, 635, 637, 639, 641, 644, 646, 648, 704, 707, 762, 763, 764, 765, 771, 820, 838, 860, 883, 934, 940, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1050, 1051, 1055, 1057, 1058, 1059, 1060, 1064, 1065, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1081, 1283, 1286, 1352], "\u0441\u0438\u043d\u0438\u0439": 1352, "\u0967\u096f\u096f\u096f": 940, "\u0968\u0966\u096d\u096d": 940, "\u4eac\u90fd": 940, "\u5927\u962a": 940, "\u6771\u4eac": [404, 405, 685, 686, 940, 1007, 1008, 1264, 1265], "\u90fd\u5e02": 940, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [687, 1266], "\uff54\uff45\uff53\uff54": 1352, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1352, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1352, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1352, "\ud835\udf0b": 1351}, "titles": ["Index", "Extending the API", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1345, 1358], "IF": 1349, "__array__": [186, 942], "__arrow_c_stream__": [187, 943], "__dataframe__": 188, "__getitem__": [189, 944], "__iter__": 308, "ab": [338, 945, 1351], "aco": 1354, "acosd": 1354, "add": 339, "add_business_dai": [427, 1034], "agg": [309, 910], "agg_group": 340, "aggreg": [185, 337, 834, 941, 1346], "alia": [341, 946], "alias": [1346, 1351, 1352], "align_fram": 57, "all": [310, 342, 358, 523, 736, 911, 947, 962, 1137, 1358], "all_horizont": 737, "and_": 343, "ani": [344, 359, 524, 738, 948, 963, 1138], "any_horizont": 739, "api": [1, 58, 59, 60, 61, 832, 1357], "append": [345, 949], "approx_n_uniqu": [190, 346, 740, 835, 950], "arang": 741, "arcco": [347, 951], "arccosh": [348, 952], "arcsin": [349, 953], "arcsinh": [350, 954], "arctan": [351, 955], "arctan2": 742, "arctan2d": 743, "arctanh": [352, 956], "arg_max": [353, 360, 525, 957, 964, 1139], "arg_min": [354, 361, 526, 958, 965, 1140], "arg_sort": [355, 959], "arg_sort_bi": 744, "arg_tru": [356, 960], "arg_uniqu": [357, 961], "arg_wher": 745, "arr": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985], "arrai": [66, 812, 1321, 1347], "array_agg": 1347, "array_contain": 1347, "array_get": 1347, "array_length": 1347, "array_low": 1347, "array_mean": 1347, "array_revers": 1347, "array_sum": 1347, "array_to_str": 1347, "array_uniqu": 1347, "array_upp": 1347, "asin": 1354, "asind": 1354, "assert": 1360, "assert_frame_equ": 167, "assert_frame_not_equ": 168, "assert_series_equ": 169, "assert_series_not_equ": 170, "atan": 1354, "atan2": 1354, "atan2d": 1354, "atand": 1354, "attribut": [325, 929, 1322], "avail": 1, "avg": 1346, "avro": 833, "backward_fil": 382, "base_utc_offset": [428, 1035], "batched_read": 138, "batchedcsvread": 138, "bin": [383, 384, 385, 386, 387, 388, 389, 986, 987, 988, 989, 990, 991, 992], "binari": [67, 813, 826, 1323], "bit_and": 1348, "bit_count": 1348, "bit_length": 1352, "bit_or": 1348, "bit_xor": 1348, "bitwise_and": [390, 993], "bitwise_count_on": [391, 994], "bitwise_count_zero": [392, 995], "bitwise_leading_on": [393, 996], "bitwise_leading_zero": [394, 997], "bitwise_or": [395, 998], "bitwise_trailing_on": [396, 999], "bitwise_trailing_zero": [397, 1000], "bitwise_xor": [398, 1001], "boolean": [68, 814, 1324], "bottom_k": [191, 399, 836, 1002], "bottom_k_bi": 400, "build_info": 62, "business_day_count": 746, "cach": 837, "cancel": 926, "cast": [192, 401, 838, 1003, 1355], "cast_time_unit": [429, 1036], "cat": [402, 403, 404, 405, 406, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "catalog": [2, 3, 4, 5, 6, 7, 183], "categor": 69, "categori": [815, 1325], "categoricalremappingwarn": 99, "cbrt": [407, 1012, 1351], "ceil": [408, 1013, 1351], "centuri": [430, 1037], "chronoformatwarn": 100, "chunk_length": 1014, "claus": 1345, "clear": [193, 839, 1015], "clip": [409, 1016], "clipboard": 833, "clone": [194, 840, 1017], "cloud": 833, "co": [410, 1018, 1354], "coalesc": [747, 1349], "col": 816, "collect": 841, "collect_al": 63, "collect_all_async": 64, "collect_async": 842, "collect_schema": [195, 843], "column": [171, 172, 196, 817, 844], "columnnotfounderror": 101, "combin": [431, 1038], "comparison": [826, 1333], "comput": [326, 818, 1326], "computeerror": 102, "concat": [65, 527, 666, 1141, 1245, 1352], "concat_arr": 748, "concat_list": 749, "concat_str": 750, "concat_w": 1352, "condit": 1349, "config": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 184], "conjunct": 826, "contain": [362, 383, 528, 667, 966, 986, 1142, 1246], "contains_ani": [668, 1247], "context": 184, "convers": 831, "convert_time_zon": [432, 1039], "corr": [197, 751], "cosd": 1354, "cosh": [411, 1019], "cot": [412, 1020, 1354], "cotd": 1354, "count": [198, 311, 413, 752, 845, 912, 1021, 1346], "count_match": [363, 529, 669, 967, 1143, 1248], "cov": 753, "creat": 1359, "create_list_strategi": 173, "credenti": 833, "credentialprovid": 37, "credentialprovideraw": 38, "credentialproviderazur": 39, "credentialprovidergcp": 40, "csv": [138, 833], "cum_count": [414, 754, 1022], "cum_fold": 755, "cum_max": [415, 1023], "cum_min": [416, 1024], "cum_prod": [417, 1025], "cum_reduc": 756, "cum_sum": [418, 757, 1026], "cum_sum_horizont": 758, "cumulative_ev": [419, 1027], "customufuncwarn": 103, "cut": [420, 1028], "dai": [435, 1042], "data": 335, "databas": 833, "datafram": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 174, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 330], "dataorientationwarn": 104, "dataset": 833, "datatyp": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 335], "date": [71, 433, 759, 1040, 1352], "date_part": 1353, "date_rang": [760, 761], "datetim": [72, 434, 762, 1041], "datetime_rang": [763, 764], "decim": 73, "decod": [384, 670, 987, 1249], "decor": 184, "degre": [421, 1354], "delta": 833, "describ": [199, 846, 1029], "descript": [327, 930, 1327], "deseri": [200, 422, 847], "diff": [423, 530, 1030, 1144], "disable_string_cach": 96, "distinct": 1345, "div": 1351, "document": 1357, "dot": [424, 1031], "drop": [201, 848, 1359], "drop_in_plac": 202, "drop_nan": [203, 425, 849, 1032], "drop_nul": [204, 426, 531, 850, 1033, 1145], "dst_offset": [436, 1043], "dt": [427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082], "dtype": [175, 205, 851, 1083], "duplicateerror": 105, "durat": [74, 765], "element": 766, "enable_string_cach": 97, "encod": [385, 671, 988, 1250], "ends_with": [386, 402, 672, 989, 1004, 1251, 1352], "engine_config": 909, "entropi": [472, 1084], "enum": 75, "epoch": [437, 1044], "eq": [473, 573, 1085], "eq_miss": [474, 1086], "equal": [206, 1087], "error": 336, "escape_regex": [98, 673, 1252], "estimated_s": [207, 1088], "eval": [532, 1146], "ewm_mean": [475, 1089], "ewm_mean_bi": [476, 1090], "ewm_std": [477, 1091], "ewm_var": [478, 1092], "exampl": [1, 940, 1360], "excel": 833, "except": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 336, 1358], "exclud": [479, 767], "execut": 1338, "execute_glob": 1339, "exp": [480, 1093, 1351], "explain": [852, 1359], "explod": [208, 364, 481, 533, 674, 853, 968, 1094, 1147, 1253], "export": [328, 1328], "expr": [338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735], "express": [820, 938, 1357], "extend": [1, 209, 1095], "extend_const": [482, 1096], "extract": [675, 1254, 1353], "extract_al": [676, 1255], "extract_group": [677, 1256], "extract_mani": [678, 1257], "feather": 833, "fetch": 927, "fetch_block": 928, "field": [76, 715, 1294, 1295], "fill_nan": [210, 483, 854, 1097], "fill_nul": [211, 484, 855, 1098], "filter": [212, 485, 856, 1099], "find": [679, 1258], "find_mani": [680, 1259], "first": [312, 365, 486, 534, 768, 857, 913, 969, 1100, 1148, 1346], "flag": [213, 1101], "flatten": 487, "float32": 77, "float64": 78, "floor": [488, 1102, 1351], "floordiv": 489, "fold": [214, 769], "format": 770, "forward_fil": 490, "frame": 1357, "from": 1345, "from_arrow": 129, "from_datafram": 130, "from_dict": [131, 132], "from_epoch": 771, "from_json": 491, "from_numpi": 133, "from_panda": 134, "from_record": 135, "from_repr": 136, "function": [1, 819, 831, 940, 1350], "gather": [492, 535, 1103, 1149], "gather_everi": [215, 493, 536, 858, 1104, 1150], "ge": [494, 1105], "get": [366, 495, 537, 970, 1151], "get_categori": [403, 1005], "get_chunk": 1106, "get_column": [216, 218], "get_column_index": 217, "get_index_typ": 137, "get_table_info": 3, "glimps": 219, "global": 1357, "gpuengin": [909, 931], "greatest": 1349, "group": [772, 1345], "group_bi": [220, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 859, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925], "group_by_dynam": [221, 860], "groupbi": [308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 329, 932], "gt": [496, 1107], "has_multiple_output": 574, "has_nul": [497, 1108], "has_valid": 1109, "hash": [498, 1110], "hash_row": 222, "have": 1345, "head": [223, 313, 499, 538, 681, 773, 861, 914, 1111, 1152, 1260], "height": 224, "helper": 1360, "hist": [500, 1112], "hour": [438, 1045], "hstack": 225, "iceberg": 833, "ifnul": 1349, "implod": [501, 774, 1113], "import": 940, "in_process": [926, 927, 928], "index": 0, "index_of": [502, 1114], "initcap": 1352, "inprocessqueri": [926, 927, 928, 933], "input": 833, "insert_column": 226, "inspect": [503, 862], "instanc": 184, "int128": 79, "int16": 80, "int32": 81, "int64": 82, "int8": 83, "int_rang": [775, 776], "interfac": 1356, "interpol": [227, 504, 863, 1115], "interpolate_bi": [505, 1116], "intersect": 1358, "introduct": 1357, "invalidoperationerror": 106, "io": [138, 139, 938], "ipc": 833, "is_between": [506, 1117], "is_column": 575, "is_column_select": 576, "is_dupl": [228, 507, 1118], "is_empti": [229, 1119], "is_finit": [508, 1120], "is_first_distinct": [509, 1121], "is_in": [510, 1122], "is_infinit": [511, 1123], "is_last_distinct": [512, 1124], "is_leap_year": [439, 1046], "is_liter": 577, "is_loc": 1006, "is_nan": [513, 1125], "is_not_nan": [514, 1126], "is_not_nul": [515, 1127], "is_nul": [516, 1128], "is_regex_project": 578, "is_sort": 1129, "is_uniqu": [230, 517, 1130], "iso_year": [440, 1047], "item": [231, 1131], "iter_column": 232, "iter_row": 233, "iter_slic": 234, "join": [235, 367, 539, 682, 864, 971, 1153, 1261, 1345], "join_asof": [236, 865], "join_wher": [237, 866], "json": 833, "json_decod": [683, 1262], "json_encod": [716, 1296], "json_norm": 140, "json_path_match": [684, 1263], "keep": 593, "kurtosi": [518, 1132], "lake": 833, "last": [314, 368, 519, 540, 777, 867, 915, 972, 1133, 1154, 1346], "lazi": [238, 868], "lazyfram": [52, 53, 54, 55, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934], "lazygroupbi": [910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925], "le": [520, 1134], "least": 1349, "left": 1352, "len": [315, 521, 541, 778, 916, 1135, 1155], "len_byt": [404, 685, 1007, 1264], "len_char": [405, 686, 1008, 1265], "length": 1352, "limit": [239, 522, 869, 1136, 1345], "linear_spac": 779, "list": [84, 176, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 821, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1330], "list_catalog": 4, "list_namespac": 5, "list_tabl": 6, "lit": 780, "ln": 1351, "load": [8, 184], "load_from_fil": 9, "load_profil": 177, "log": [563, 1177, 1351], "log10": [564, 1178, 1351], "log1p": [565, 1179, 1351], "log2": 1351, "lower": 1352, "lower_bound": [566, 1180], "lt": [567, 1181], "ltrim": 1352, "manag": 184, "manipul": [332, 824, 936, 1332], "map": 594, "map_batch": [568, 781, 870], "map_el": [569, 1182], "map_field": 595, "map_group": [316, 782, 917], "map_row": 240, "mapwithoutreturndtypewarn": 107, "math": 1351, "max": [241, 317, 369, 542, 570, 783, 871, 918, 973, 1048, 1156, 1183, 1346], "max_horizont": [242, 784], "mean": [243, 318, 543, 571, 785, 872, 919, 1049, 1157, 1184], "mean_horizont": [244, 786], "median": [245, 319, 370, 544, 572, 787, 873, 920, 974, 1050, 1158, 1185, 1346], "melt": [246, 874], "merge_sort": [247, 875], "meta": [573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 822], "metadata": 937, "method": 1357, "microsecond": [441, 1051], "millennium": [442, 1052], "millisecond": [443, 1053], "min": [248, 320, 371, 545, 588, 788, 876, 921, 975, 1054, 1159, 1186, 1346], "min_horizont": [249, 789], "minut": [444, 1055], "miscellan": [331, 823, 831, 935, 1331], "mod": [589, 1351], "mode": [590, 1187], "moduleupgraderequirederror": 108, "month": [445, 1056], "month_end": [446, 1057], "month_start": [447, 1058], "mul": 591, "multipl": 184, "n_chunk": [250, 1188], "n_uniqu": [251, 321, 372, 546, 592, 790, 922, 976, 1160, 1189], "name": [593, 594, 595, 596, 597, 598, 599, 600, 601, 817, 825, 1190, 1358], "nan_max": [602, 1191], "nan_min": [603, 1192], "nanosecond": [448, 1059], "ne": [579, 604, 1193], "ne_miss": [605, 1194], "neg": 606, "nest": 335, "new": 1, "new_from_index": 1195, "next_batch": 138, "nodataerror": 109, "normal": [687, 1266, 1352], "norowsreturnederror": 110, "not_": [607, 1196], "nth": 791, "null": 85, "null_count": [252, 608, 877, 1197], "nullif": 1349, "numer": [335, 826, 1333], "object": 86, "octet_length": 1352, "od": 833, "offset": 1345, "offset_bi": [449, 1060], "ones": 792, "oper": [826, 940, 1333, 1358, 1359], "option": 184, "or_": 609, "order": 1345, "ordinal_dai": [450, 1061], "other": 335, "outofboundserror": 111, "output": 833, "output_nam": 580, "over": 610, "pad_end": [688, 1267], "pad_start": [689, 1268], "panic": 336, "panicexcept": 112, "parallel": 831, "parametercollisionerror": 113, "parametr": [171, 172, 173, 174, 175, 176, 177, 178, 179, 1360], "parquet": 833, "partition_bi": 253, "pct_chang": [611, 1198], "peak_max": [612, 1199], "peak_min": [613, 1200], "performancewarn": 114, "pi": 1351, "pipe": [254, 614, 878], "pivot": 255, "plot": [333, 1334], "plugin": [139, 141, 938], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1360], "polarserror": 115, "polarsinefficientmapwarn": 116, "polarswarn": 117, "pop": 581, "pow": [615, 1201, 1351], "prefix": 596, "prefix_field": 597, "product": [256, 616, 1202], "profil": [879, 1360], "provid": 1, "pyarrow": 833, "python": [832, 1357], "qcut": [617, 1203], "quantil": [257, 322, 618, 793, 880, 923, 1204], "quantile_cont": 1346, "quantile_disc": 1346, "quarter": [451, 1062], "queri": 1357, "radian": [619, 1354], "random": 831, "rank": [620, 1205], "read_avro": 142, "read_clipboard": 143, "read_csv": 144, "read_csv_batch": 145, "read_databas": 146, "read_database_uri": 147, "read_delta": 148, "read_excel": 149, "read_ipc": 150, "read_ipc_schema": 151, "read_ipc_stream": 152, "read_json": 153, "read_ndjson": 154, "read_od": 155, "read_parquet": 156, "read_parquet_schema": 157, "rechunk": [258, 621, 1206], "reduc": 794, "refer": 832, "regexp_lik": 1352, "regist": 1340, "register_dataframe_namespac": 58, "register_expr_namespac": 59, "register_glob": 1341, "register_io_sourc": 139, "register_lazyframe_namespac": 60, "register_mani": 1342, "register_plugin_funct": 141, "register_series_namespac": 61, "registr": 1, "reinterpret": [387, 622, 990, 1207], "renam": [259, 881, 1208], "rename_field": [717, 1297], "repeat": 795, "repeat_bi": 623, "replac": [452, 624, 690, 1063, 1209, 1269, 1352], "replace_al": [691, 1270], "replace_column": 260, "replace_mani": [692, 1271], "replace_strict": [625, 1210], "replace_time_zon": [453, 1064], "reshap": [626, 1211], "restore_default": 10, "revers": [261, 373, 547, 627, 693, 882, 977, 1161, 1212, 1272, 1352], "right": 1352, "rle": [628, 1213], "rle_id": [629, 1214], "roll": [262, 630, 883], "rolling_corr": 796, "rolling_cov": 797, "rolling_map": [631, 1215], "rolling_max": [632, 1216], "rolling_max_bi": 633, "rolling_mean": [634, 1217], "rolling_mean_bi": 635, "rolling_median": [636, 1218], "rolling_median_bi": 637, "rolling_min": [638, 1219], "rolling_min_bi": 639, "rolling_quantil": [640, 1220], "rolling_quantile_bi": 641, "rolling_skew": [642, 1221], "rolling_std": [643, 1222], "rolling_std_bi": 644, "rolling_sum": [645, 1223], "rolling_sum_bi": 646, "rolling_var": [647, 1224], "rolling_var_bi": 648, "root_nam": 582, "round": [454, 649, 1065, 1225, 1351], "round_sig_fig": [650, 1226], "row": [263, 264], "rows_by_kei": 265, "rowserror": 118, "rtrim": 1352, "sampl": [266, 548, 651, 1162, 1227], "save": [11, 184], "save_to_fil": 12, "scan_csv": 158, "scan_delta": 159, "scan_iceberg": 160, "scan_ipc": 161, "scan_ndjson": 162, "scan_parquet": 163, "scan_pyarrow_dataset": 164, "scan_tabl": 7, "scatter": 1228, "schema": [267, 884, 939, 1298], "schemaerror": 121, "schemafieldnotfounderror": 122, "search_sort": [652, 1229], "second": [455, 1066], "select": [268, 332, 798, 824, 885, 936, 1332, 1345], "select_seq": [269, 886], "selector": 940, "seri": [178, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1329], "serial": [270, 331, 583, 887, 935], "set": [940, 1230, 1358], "set_ascii_t": 13, "set_auto_structifi": 14, "set_decimal_separ": 15, "set_differ": [549, 1163], "set_float_precis": 16, "set_fmt_float": 17, "set_fmt_str_length": 18, "set_fmt_table_cell_list_len": 19, "set_intersect": [550, 1164], "set_profil": 179, "set_random_se": 165, "set_sort": [271, 653, 888, 1231], "set_streaming_chunk_s": 20, "set_symmetric_differ": [551, 1165], "set_tbl_cell_align": 21, "set_tbl_cell_numeric_align": 22, "set_tbl_col": 23, "set_tbl_column_data_type_inlin": 24, "set_tbl_dataframe_shape_below": 25, "set_tbl_format": 26, "set_tbl_hide_column_data_typ": 27, "set_tbl_hide_column_nam": 28, "set_tbl_hide_dataframe_shap": 29, "set_tbl_hide_dtype_separ": 30, "set_tbl_row": 31, "set_tbl_width_char": 32, "set_thousands_separ": 33, "set_trim_decimal_zero": 34, "set_union": [552, 1166], "set_verbos": 35, "shape": [272, 1232], "shapeerror": 123, "shift": [273, 374, 553, 654, 889, 978, 1167, 1233], "show": 1359, "show_graph": [584, 890], "show_vers": 166, "shrink_dtyp": [655, 1234], "shrink_to_fit": [274, 1235], "shuffl": [656, 1236], "sign": [657, 1237, 1351], "sin": [658, 1238, 1354], "sind": 1354, "sinh": [659, 1239], "sink_csv": 52, "sink_ipc": 53, "sink_ndjson": 54, "sink_parquet": 55, "size": [388, 991], "skew": [660, 1240], "slice": [275, 554, 661, 694, 891, 1168, 1241, 1273], "sort": [276, 375, 555, 662, 892, 979, 1169, 1242], "sort_bi": 663, "split": [695, 1274], "split_exact": [696, 1275], "splitn": [697, 1276], "sql": [277, 799, 893, 1345, 1350, 1356, 1357], "sql_expr": 800, "sqlcontext": [1338, 1339, 1340, 1341, 1342, 1343, 1344, 1357], "sqlinterfaceerror": 119, "sqlsyntaxerror": 120, "sqrt": [664, 1243, 1351], "starts_with": [389, 406, 698, 992, 1009, 1277, 1352], "state": [36, 184], "std": [278, 376, 556, 665, 801, 894, 980, 1170, 1244], "stddev": 1346, "str": [666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293], "strategi": 1360, "strftime": [456, 1067, 1353], "string": [87, 335, 827, 1335, 1352], "stringcach": [56, 831], "stringcachemismatcherror": 124, "strip_char": [699, 1278], "strip_chars_end": [700, 1279], "strip_chars_start": [701, 1280], "strip_prefix": [702, 1281], "strip_suffix": [703, 1282], "strpo": 1352, "strptime": [704, 1283, 1352], "struct": [88, 715, 716, 717, 718, 719, 802, 828, 1294, 1295, 1296, 1297, 1298, 1299, 1336], "structfieldnotfounderror": 125, "style": 334, "sub": 720, "substr": 1352, "suffix": 598, "suffix_field": 599, "sum": [279, 323, 377, 557, 721, 803, 895, 924, 981, 1171, 1300, 1346], "sum_horizont": [280, 804], "tabl": [1343, 1359], "tail": [281, 324, 558, 705, 722, 805, 896, 925, 1172, 1284, 1301], "tan": [723, 1302, 1354], "tand": 1354, "tanh": [724, 1303], "tempor": [335, 829, 1337, 1348, 1353], "test": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 1360], "thread_pool_s": 180, "threadpool_s": 181, "time": [89, 457, 806, 1068], "time_rang": [807, 808], "timestamp": [458, 1069, 1352], "to_arrai": [559, 1173], "to_arrow": [282, 1304], "to_dat": [706, 1285], "to_datetim": [707, 1286], "to_decim": [708, 1287], "to_dict": [283, 284], "to_dummi": [285, 1305], "to_fram": 1306, "to_init_repr": [286, 1307], "to_integ": [709, 1288], "to_jax": [287, 1308], "to_list": [378, 982, 1309], "to_loc": 1010, "to_lowercas": [600, 710, 1289], "to_numpi": [288, 1310], "to_panda": [289, 1311], "to_phys": [725, 1312], "to_seri": 290, "to_str": [459, 1070], "to_struct": [291, 379, 560, 983, 1174], "to_tim": [711, 1290], "to_titlecas": [712, 1291], "to_torch": [292, 1313], "to_uppercas": [601, 713, 1292], "toomanyrowsreturnederror": 126, "top_k": [293, 726, 897, 1314], "top_k_bi": 727, "total_dai": [460, 1071], "total_hour": [461, 1072], "total_microsecond": [462, 1073], "total_millisecond": [463, 1074], "total_minut": [464, 1075], "total_nanosecond": [465, 1076], "total_second": [466, 1077], "transpos": 294, "tree_format": 585, "trigonometri": 1354, "truediv": 728, "truncat": [467, 1078, 1359], "try_cast": 1355, "type": [335, 1355], "uint16": 90, "uint32": 91, "uint64": 92, "uint8": 93, "undo_alias": 586, "union": 1358, "uniqu": [295, 380, 561, 729, 898, 984, 1175, 1315], "unique_count": [730, 1316], "uniti": 183, "unknown": 94, "unnest": [296, 718, 899, 1299, 1347, 1359], "unpivot": [297, 900], "unregist": 1344, "unstablewarn": 127, "unstack": 298, "unsuitablesqlerror": 128, "updat": [299, 901], "upper": 1352, "upper_bound": [731, 1317], "upsampl": 300, "us": 184, "uses_lexical_ord": 1011, "using_string_cach": 182, "utf8": 95, "value_count": [732, 1318], "var": [301, 381, 562, 733, 809, 902, 985, 1176, 1319], "varianc": 1346, "vstack": 302, "warn": 336, "week": [468, 1079], "weekdai": [469, 1080], "when": 810, "where": [734, 1345], "width": [303, 903], "window": 830, "with_column": [304, 904], "with_columns_seq": [305, 905], "with_context": 906, "with_field": 719, "with_row_count": [306, 907], "with_row_index": [307, 908], "with_time_unit": [470, 1081], "write_avro": 41, "write_clipboard": 42, "write_csv": 43, "write_databas": 44, "write_delta": 45, "write_excel": 46, "write_ipc": 47, "write_ipc_stream": 48, "write_json": [49, 587], "write_ndjson": 50, "write_parquet": 51, "xor": 735, "year": [471, 1082], "zero": 811, "zfill": [714, 1293], "zip_with": 1320}})